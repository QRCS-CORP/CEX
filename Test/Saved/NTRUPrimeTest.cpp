#include "NTRUPrimeTest.h"
#include "NistRng.h"
#include "../CEX/AsymmetricKey.h"
#include "../CEX/AsymmetricKeyPair.h"
#include "../CEX/CryptoAuthenticationFailure.h"
#include "../CEX/IntegerTools.h"
#include "../CEX/NTRUPrime.h"
#include "../CEX/SecureRandom.h"
#include "../CEX/SecureVector.h"

namespace Test
{
	using Asymmetric::AsymmetricKey;
	using Asymmetric::AsymmetricKeyPair;
	using Enumeration::AsymmetricKeyTypes;
	using Enumeration::AsymmetricPrimitives;
	using Enumeration::AsymmetricParameters;
	using Exception::CryptoAsymmetricException;
	using Tools::IntegerTools;
	using Test::NistRng;
	using Asymmetric::Encrypt::NTRUP::NTRUPrime;
	using Enumeration::NTRUPrimeParameters;
	using Prng::SecureRandom;

	const std::string NTRUPrimeTest::CLASSNAME = "NTRUPrimeTest";
	const std::string NTRUPrimeTest::DESCRIPTION = "NTRUPrime key generation, encryption, and decryption tests..";
	const std::string NTRUPrimeTest::SUCCESS = "SUCCESS! NTRUPrime tests have executed succesfully.";

	NTRUPrimeTest::NTRUPrimeTest()
		:
		m_cptexp(0),
		m_priexp(0),
		m_pubexp(0),
		m_rngseed(0),
		m_sskexp(0),
		m_progressEvent()
	{
	}

	NTRUPrimeTest::~NTRUPrimeTest()
	{
		IntegerTools::Clear(m_cptexp);
		IntegerTools::Clear(m_priexp);
		IntegerTools::Clear(m_pubexp);
		IntegerTools::Clear(m_rngseed);
		IntegerTools::Clear(m_sskexp);
	}

	const std::string NTRUPrimeTest::Description()
	{
		return DESCRIPTION;
	}

	TestEventHandler &NTRUPrimeTest::Progress()
	{
		return m_progressEvent;
	}

	std::string NTRUPrimeTest::Run()
	{
		try
		{
			Initialize();

			Authentication();
			OnProgress(std::string("NTRUPrimeTest: Passed message authentication test.."));
			CipherText();
			OnProgress(std::string("NTRUPrimeTest: Passed cipher-text integrity test.."));
			Exception();
			OnProgress(std::string("NTRUPrimeTest: Passed exception handling test.."));
			Integrity();
			OnProgress(std::string("NTRUPrimeTest: Passed NIST PQ Round 2 cipher-text, shared-secret, public and private key known answer tests.."));
			Kat();
			OnProgress(std::string("NTRUPrimeTest: Passed NIST PQ Round 2 cipher-text and shared-secret known answer tests.."));
			PublicKey();
			OnProgress(std::string("NTRUPrimeTest: Passed public key integrity test.."));
			Serialization();
			OnProgress(std::string("NTRUPrimeTest: Passed key serialization tests.."));
			Stress();
			OnProgress(std::string("NTRUPrimeTest: Passed encryption and decryption stress tests.."));

			return SUCCESS;
		}
		catch (TestException const &ex)
		{
			throw TestException(CLASSNAME, ex.Function(), ex.Origin(), ex.Message());
		}
		catch (CryptoException &ex)
		{
			throw TestException(CLASSNAME, ex.Location(), ex.Origin(), ex.Message());
		}
		catch (std::exception const &ex)
		{
			throw TestException(CLASSNAME, std::string("Unknown Origin"), std::string(ex.what()));
		}
	}

	void NTRUPrimeTest::Authentication()
	{
		std::vector<byte> cpt(0);
		std::vector<byte> sec1(32);
		std::vector<byte> sec2(32);

		// test param 1: NTRUS2SQ4591N761
		NTRUPrime cpr1(NTRUPrimeParameters::NTRUS2SQ4591N761);
		AsymmetricKeyPair* kp1 = cpr1.Generate();

		cpr1.Initialize(kp1->PublicKey());
		cpr1.Encapsulate(cpt, sec1);
		cpr1.Initialize(kp1->PrivateKey());

		if (!cpr1.Decapsulate(cpt, sec2))
		{
			throw TestException(std::string("Authentication"), cpr1.Name(), std::string("L-Prime Message authentication integrity test failed! -NA1"));
		}

		cpt.clear();
		sec1.clear();
		sec2.clear();
		delete kp1;

		// test param 2: NTRUS2SQ4591N761
		NTRUPrime cpr2(NTRUPrimeParameters::NTRUS2SQ4591N761);
		AsymmetricKeyPair* kp2 = cpr2.Generate();

		cpr2.Initialize(kp2->PublicKey());
		cpr2.Encapsulate(cpt, sec1);
		cpr2.Initialize(kp2->PrivateKey());

		if (!cpr2.Decapsulate(cpt, sec2))
		{
			throw TestException(std::string("Authentication"), cpr2.Name(), std::string("S-Prime Message authentication test failed! -NA2"));
		}

		delete kp2;
	}

	void NTRUPrimeTest::CipherText()
	{
		std::vector<byte> cpt(0);
		std::vector<byte> sec1(32);
		std::vector<byte> sec2(32);
		SecureRandom gen;

		// test param 1: NTRUS2SQ4591N761
		NTRUPrime cpr1(NTRUPrimeParameters::NTRUS2SQ4591N761);
		AsymmetricKeyPair* kp1 = cpr1.Generate();

		cpr1.Initialize(kp1->PublicKey());
		cpr1.Encapsulate(cpt, sec1);

		// alter ciphertext
		gen.Generate(cpt, 0, 4);

		cpr1.Initialize(kp1->PrivateKey());

		if (cpr1.Decapsulate(cpt, sec2))
		{
			throw TestException(std::string("CipherText"), cpr1.Name(), std::string("L-Prime Cipher text integrity test failed! -NC1"));
		}

		cpt.clear();
		sec1.clear();
		sec2.clear();
		delete kp1;

		// test param 2: NTRUS2SQ4591N761
		NTRUPrime cpr2(NTRUPrimeParameters::NTRUS2SQ4591N761);
		AsymmetricKeyPair* kp2 = cpr2.Generate();

		cpr2.Initialize(kp2->PublicKey());
		cpr2.Encapsulate(cpt, sec1);

		// alter ciphertext
		gen.Generate(cpt, 0, 4);

		cpr2.Initialize(kp2->PrivateKey());

		if (cpr2.Decapsulate(cpt, sec2))
		{
			throw TestException(std::string("CipherText"), cpr2.Name(), std::string("S-Prime Cipher text integrity test failed! -NC2"));
		}

		delete kp2;
	}

	void NTRUPrimeTest::Exception()
	{
		// test invalid constructor parameters
		try
		{
			NTRUPrime cpr(NTRUPrimeParameters::None);

			throw TestException(std::string("Exception"), cpr.Name(), std::string("Exception handling failure! -NE1"));
		}
		catch (CryptoAsymmetricException const &)
		{
		}
		catch (TestException const &)
		{
			throw;
		}

		try
		{
			NTRUPrime cpr(NTRUPrimeParameters::None, Enumeration::Prngs::None);

			throw TestException(std::string("Exception"), cpr.Name(), std::string("Exception handling failure! -NE2"));
		}
		catch (CryptoAsymmetricException const &)
		{
		}
		catch (TestException const &)
		{
			throw;
		}
	}

	void NTRUPrimeTest::Integrity()
	{
		std::vector<byte> cpt(0);
		std::vector<byte> ssk1(32);
		std::vector<byte> ssk2(32);
		NistRng gen;

		// NTRUS1SQ4621N653

		gen.Initialize(m_rngseed[0]);

		NTRUPrime cpr1(NTRUPrimeParameters::NTRUS1SQ4621N653, &gen);

		// generate the key pair
		AsymmetricKeyPair* kp1 = cpr1.Generate();

		if (kp1->PublicKey()->Polynomial() != m_pubexp[0])
		{
			throw TestException(std::string("Integrity"), cpr1.Name(), std::string("Public key does not match expected! -NI1"));
		}

		if (kp1->PrivateKey()->Polynomial() != m_priexp[0])
		{
			throw TestException(std::string("Integrity"), cpr1.Name(), std::string("Private key does not match expected! -NI2"));
		}

		// initialize and encapsulate
		cpr1.Initialize(kp1->PublicKey());
		cpr1.Encapsulate(cpt, ssk1);

		// initialize and decapsulate
		cpr1.Initialize(kp1->PrivateKey());

		if (!cpr1.Decapsulate(cpt, ssk2))
		{
			throw TestException(std::string("Integrity"), cpr1.Name(), std::string("Failed authentication test! -NI3"));
		}

		if (cpt != m_cptexp[0])
		{
			throw TestException(std::string("Integrity"), cpr1.Name(), std::string("Cipher-text arrays do not match! -NI4"));
		}

		if (ssk1 != ssk2)
		{
			throw TestException(std::string("Integrity"), cpr1.Name(), std::string("Shared secrets do not match! -NI5"));
		}

		if (ssk1 != m_sskexp[0])
		{
			throw TestException(std::string("Integrity"), cpr1.Name(), std::string("Shared secret does not match expected! -NI6"));
		}

		cpt.clear();
		ssk1.clear();
		ssk2.clear();
		delete kp1;

		// NTRUS2SQ4591N761

		gen.Initialize(m_rngseed[0]);

		NTRUPrime cpr2(NTRUPrimeParameters::NTRUS2SQ4591N761, &gen);

		// generate the key pair
		AsymmetricKeyPair* kp2 = cpr2.Generate();

		if (kp2->PublicKey()->Polynomial() != m_pubexp[1])
		{
			throw TestException(std::string("Integrity"), cpr2.Name(), std::string("Public key does not match expected! -NI7"));
		}

		if (kp2->PrivateKey()->Polynomial() != m_priexp[1])
		{
			throw TestException(std::string("Integrity"), cpr2.Name(), std::string("Private key does not match expected! -NI8"));
		}

		// initialize and encapsulate
		cpr2.Initialize(kp2->PublicKey());
		cpr2.Encapsulate(cpt, ssk1);

		// initialize and decapsulate
		cpr2.Initialize(kp2->PrivateKey());

		if (!cpr2.Decapsulate(cpt, ssk2))
		{
			throw TestException(std::string("Integrity"), cpr2.Name(), std::string("Failed authentication test! -NI9"));
		}

		if (cpt != m_cptexp[1])
		{
			throw TestException(std::string("Integrity"), cpr2.Name(), std::string("Cipher-text arrays do not match! -NI10"));
		}

		if (ssk1 != ssk2)
		{
			throw TestException(std::string("Integrity"), cpr2.Name(), std::string("Shared secrets do not match! -NI11"));
		}

		if (ssk1 != m_sskexp[10])
		{
			throw TestException(std::string("Integrity"), cpr2.Name(), std::string("Shared secret does not match expected! -NI12"));
		}

		cpt.clear();
		ssk1.clear();
		ssk2.clear();
		delete kp2;

		// NTRUS3SQ5167N857

		gen.Initialize(m_rngseed[0]);

		NTRUPrime cpr3(NTRUPrimeParameters::NTRUS3SQ5167N857, &gen);

		// generate the key pair
		AsymmetricKeyPair* kp3 = cpr3.Generate();

		if (kp3->PublicKey()->Polynomial() != m_pubexp[2])
		{
			throw TestException(std::string("Integrity"), cpr3.Name(), std::string("Public key does not match expected! -NI13"));
		}

		if (kp3->PrivateKey()->Polynomial() != m_priexp[2])
		{
			throw TestException(std::string("Integrity"), cpr3.Name(), std::string("Private key does not match expected! -NI14"));
		}

		// initialize and encapsulate
		cpr3.Initialize(kp3->PublicKey());
		cpr3.Encapsulate(cpt, ssk1);

		// initialize and decapsulate
		cpr3.Initialize(kp3->PrivateKey());

		if (!cpr3.Decapsulate(cpt, ssk2))
		{
			throw TestException(std::string("Integrity"), cpr3.Name(), std::string("Failed authentication test! -NI15"));
		}

		if (cpt != m_cptexp[2])
		{
			throw TestException(std::string("Integrity"), cpr3.Name(), std::string("Cipher-text arrays do not match! -NI16"));
		}

		if (ssk1 != ssk2)
		{
			throw TestException(std::string("Integrity"), cpr3.Name(), std::string("Shared secrets do not match! -NI17"));
		}

		if (ssk1 != m_sskexp[20])
		{
			throw TestException(std::string("Integrity"), cpr3.Name(), std::string("Shared secret does not match expected! -NI18"));
		}

		delete kp3;
	}

	void NTRUPrimeTest::Kat()
	{
		const size_t TSTCNT = m_rngseed.size();
		std::vector<byte> cpt(0);
		std::vector<byte> ssk1(32);
		std::vector<byte> ssk2(32);
		NistRng gen;
		size_t i;

		// NTRUS1SQ4621N653

		for (i = 0; i < TSTCNT; ++i)
		{
			gen.Initialize(m_rngseed[i]);

			NTRUPrime cpr(NTRUPrimeParameters::NTRUS1SQ4621N653, &gen);
			AsymmetricKeyPair* kp = cpr.Generate();

			cpr.Initialize(kp->PublicKey());
			cpr.Encapsulate(cpt, ssk1);
			cpr.Initialize(kp->PrivateKey());

			if (!cpr.Decapsulate(cpt, ssk2))
			{
				throw TestException(std::string("Kat"), cpr.Name(), std::string("Failed authentication test! -NK1"));
			}

			if (ssk1 != ssk2)
			{
				throw TestException(std::string("Kat"), cpr.Name(), std::string("Shared secrets do not match! -NK2"));
			}

			if (ssk1 != m_sskexp[i])
			{
				throw TestException(std::string("Kat"), cpr.Name(), std::string("Shared secret does not match expected! -NK3"));
			}

			delete kp;
		}

		cpt.clear();
		ssk1.clear();
		ssk2.clear();

		// NTRUS2SQ4591N761

		for (i = 0; i < TSTCNT; ++i)
		{
			gen.Initialize(m_rngseed[i]);

			NTRUPrime cpr(NTRUPrimeParameters::NTRUS2SQ4591N761, &gen);
			AsymmetricKeyPair* kp = cpr.Generate();

			cpr.Initialize(kp->PublicKey());
			cpr.Encapsulate(cpt, ssk1);
			cpr.Initialize(kp->PrivateKey());

			if (!cpr.Decapsulate(cpt, ssk2))
			{
				throw TestException(std::string("Kat"), cpr.Name(), std::string("Failed authentication test! -NK1"));
			}

			if (ssk1 != ssk2)
			{
				throw TestException(std::string("Kat"), cpr.Name(), std::string("Shared secrets do not match! -NK2"));
			}

			if (ssk1 != m_sskexp[10 + i])
			{
				throw TestException(std::string("Kat"), cpr.Name(), std::string("Shared secret does not match expected! -NK3"));
			}

			delete kp;
		}

		cpt.clear();
		ssk1.clear();
		ssk2.clear();

		// NTRUS3SQ5167N857

		for (i = 0; i < TSTCNT; ++i)
		{
			gen.Initialize(m_rngseed[i]);

			NTRUPrime cpr(NTRUPrimeParameters::NTRUS3SQ5167N857, &gen);
			AsymmetricKeyPair* kp = cpr.Generate();

			cpr.Initialize(kp->PublicKey());
			cpr.Encapsulate(cpt, ssk1);
			cpr.Initialize(kp->PrivateKey());

			if (!cpr.Decapsulate(cpt, ssk2))
			{
				throw TestException(std::string("Kat"), cpr.Name(), std::string("Failed authentication test! -NK1"));
			}

			if (ssk1 != ssk2)
			{
				throw TestException(std::string("Kat"), cpr.Name(), std::string("Shared secrets do not match! -NK2"));
			}

			if (ssk1 != m_sskexp[20 + i])
			{
				throw TestException(std::string("Kat"), cpr.Name(), std::string("Shared secret does not match expected! -NK3"));
			}

			delete kp;
		}
	}

	void NTRUPrimeTest::PublicKey()
	{
		std::vector<byte> cpt(0);
		std::vector<byte> sec1(32);
		std::vector<byte> sec2(32);

		// test param 1: NTRUS2SQ4591N761
		NTRUPrime cpr1(NTRUPrimeParameters::NTRUS2SQ4591N761);
		AsymmetricKeyPair* kp1 = cpr1.Generate();

		// alter public key
		std::vector<byte> p1 = kp1->PublicKey()->Polynomial();
		p1[0] += 1;
		p1[1] += 1;
		AsymmetricKey* pk1 = new AsymmetricKey(p1, AsymmetricPrimitives::NTRUPrime, AsymmetricKeyTypes::CipherPublicKey, static_cast<AsymmetricParameters>(NTRUPrimeParameters::NTRUS2SQ4591N761));
		cpr1.Initialize(pk1);
		cpr1.Encapsulate(cpt, sec1);

		cpr1.Initialize(kp1->PrivateKey());

		if (cpr1.Decapsulate(cpt, sec2))
		{
			throw TestException(std::string("PublicKey"), cpr1.Name(), std::string("Public key integrity test failed! -NP1"));
		}

		cpt.clear();
		sec1.clear();
		sec2.clear();
		delete kp1;
		delete pk1;

		// test param 2: NTRUS2SQ4591N761
		NTRUPrime cpr2(NTRUPrimeParameters::NTRUS2SQ4591N761);
		AsymmetricKeyPair* kp2 = cpr2.Generate();

		// alter public key
		std::vector<byte> p2 = kp2->PublicKey()->Polynomial();
		p2[0] += 1;
		p2[1] += 1;
		AsymmetricKey* pk2 = new AsymmetricKey(p2, AsymmetricPrimitives::NTRUPrime, AsymmetricKeyTypes::CipherPublicKey, static_cast<AsymmetricParameters>(NTRUPrimeParameters::NTRUS2SQ4591N761));
		cpr2.Initialize(pk2);
		cpr2.Encapsulate(cpt, sec1);

		cpr2.Initialize(kp2->PrivateKey());

		if (cpr2.Decapsulate(cpt, sec2))
		{
			throw TestException(std::string("PublicKey"), cpr2.Name(), std::string("Public key integrity test failed! -NP2"));
		}

		delete kp2;
		delete pk2;
	}

	void NTRUPrimeTest::Serialization()
	{
		SecureVector<byte> skey(0);

		// test param 1: NTRUS2SQ4591N761
		NTRUPrime cpr1(NTRUPrimeParameters::NTRUS2SQ4591N761);

		for (size_t i = 0; i < TEST_CYCLES; ++i)
		{
			AsymmetricKeyPair* kp = cpr1.Generate();
			AsymmetricKey* prik1 = kp->PrivateKey();
			skey = AsymmetricKey::Serialize(*prik1);
			AsymmetricKey* prik2 = AsymmetricKey::DeSerialize(skey);

			if (prik1->Polynomial() != prik2->Polynomial() || prik1->Parameters() != prik2->Parameters())
			{
				throw TestException(std::string("Serialization"), cpr1.Name(), std::string("Private key serialization test has failed! -NR1"));
			}

			AsymmetricKey* pubk1 = kp->PublicKey();
			skey = AsymmetricKey::Serialize(*pubk1);
			AsymmetricKey* pubk2 = AsymmetricKey::DeSerialize(skey);

			if (pubk1->Polynomial() != pubk2->Polynomial() || pubk1->Parameters() != pubk2->Parameters())
			{
				throw TestException(std::string("Serialization"), cpr1.Name(), std::string("Public key serialization test has failed! -NR2"));
			}

			delete kp;
			delete prik2;
			delete pubk2;
		}

		skey.clear();

		// test param 2: NTRUS2SQ4591N761
		NTRUPrime cpr2(NTRUPrimeParameters::NTRUS2SQ4591N761);

		for (size_t i = 0; i < TEST_CYCLES; ++i)
		{
			AsymmetricKeyPair* kp = cpr2.Generate();
			AsymmetricKey* prik1 = kp->PrivateKey();
			skey = AsymmetricKey::Serialize(*prik1);
			AsymmetricKey* prik2 = AsymmetricKey::DeSerialize(skey);

			if (prik1->Polynomial() != prik2->Polynomial() || prik1->Parameters() != prik2->Parameters())
			{
				throw TestException(std::string("Serialization"), cpr2.Name(), std::string("Private key serialization test has failed! -NR3"));
			}

			AsymmetricKey* pubk1 = kp->PublicKey();
			skey = AsymmetricKey::Serialize(*pubk1);
			AsymmetricKey* pubk2 = AsymmetricKey::DeSerialize(skey);

			if (pubk1->Polynomial() != pubk2->Polynomial() || pubk1->Parameters() != pubk2->Parameters())
			{
				throw TestException(std::string("Serialization"), cpr2.Name(), std::string("Public key serialization test has failed! -NR4"));
			}

			delete kp;
			delete prik2;
			delete pubk2;
		}
	}

	void NTRUPrimeTest::Stress()
	{
		// test encapsulate/decapsulate with LPrime configuration
		std::vector<byte> cpt(0);
		std::vector<byte> sec1(32);
		std::vector<byte> sec2(32);
		SecureRandom gen;

		// test param 1: NTRUS2SQ4591N761
		NTRUPrime cpr1(NTRUPrimeParameters::NTRUS2SQ4591N761);

		for (size_t i = 0; i < TEST_CYCLES / 2; ++i)
		{
			gen.Generate(sec1);
			AsymmetricKeyPair* kp = cpr1.Generate();

			cpr1.Initialize(kp->PublicKey());
			cpr1.Encapsulate(cpt, sec1);

			cpr1.Initialize(kp->PrivateKey());

			if (!cpr1.Decapsulate(cpt, sec2))
			{
				throw TestException(std::string("Stress"), cpr1.Name(), std::string("Stress test authentication has failed! -NS1"));
			}

			if (sec1 != sec2)
			{
				throw TestException(std::string("Stress"), cpr1.Name(), std::string("L-Prime Stress test has failed! -NS2"));
			}

			delete kp;
		}

		cpt.clear();
		sec1.clear();
		sec2.clear();

		// test param 2: NTRUS2SQ4591N761
		NTRUPrime cpr2(NTRUPrimeParameters::NTRUS2SQ4591N761);

		for (size_t i = 0; i < TEST_CYCLES / 2; ++i)
		{
			gen.Generate(sec1);
			AsymmetricKeyPair* kp = cpr2.Generate();

			cpr2.Initialize(kp->PublicKey());
			cpr2.Encapsulate(cpt, sec1);

			cpr2.Initialize(kp->PrivateKey());

			if (!cpr2.Decapsulate(cpt, sec2))
			{
				throw TestException(std::string("Stress"), cpr2.Name(), std::string("Stress test authentication has failed! -NS3"));
			}

			if (sec1 != sec2)
			{
				throw TestException(std::string("Stress"), cpr2.Name(), std::string("S-PrimeStress test has failed! -NS4"));
			}

			delete kp;
		}
	}

	void NTRUPrimeTest::Initialize()
	{
		/*lint -save -e417 */

		const std::vector<std::string> cprexp =
		{
			std::string("BC60F537CD5FE3038DACE613B8819A0DC920B8FE092474F763A1BD05F69137A1A084AA1A45A5BF1055F9340368D60CE415217C2C382E7EFFCD289D62A0A9E1E7"
				"FA2EFD07EF4B75B02DD436535AED897AECD520763AC7F8DFAFEBC122594388F210DF28DE472E748CFB640E8899B07CB4514401DEF9E9C542DC89733F20F9605F"
				"641DD1DD6F332DC051C2E5B2C391ACE70FD00FBC251EE1EA2AB27D165F966DA338F8AA970AAF66931F7CC68E2846EE5AD7EAF8E15B9CA333AD1260163E2BE232"
				"4C03094E249D3418164A655BD469E506F5B8420BF4FF6080DA230373B18D74AF03F11C9B545E3791CCC9B3B9927B2222983B7A6DE620BE8520B215ECDA453026"
				"95C0229C2A9607260BFD3C6EB9D7EAFAB5E47FD5760FA23067BAC1E6A980C4727B0C187A5B6397AC43D3BE24C42A1D2FCFE43512494A7BFC5CC19455DF6AA6F2"
				"698A2903831CA2E5F4F84442E6A74BC9D3CC3D6FBEE97D5CF4B6C58D3DC9ADB359FB56CF35FE21F96E885624498ACDF0BAF3A52B7F2564D1EA384DDA7FD32167"
				"786C5E010C3BCF5D2E7164BD6ECE815366887250D184F8061E57C3935214F191B38E982132EF4262E91808FF1CFD902B5248F6E7C031A98234DE0D578D1234B7"
				"453F2F575A88B622B0F11902C2146F45912E9BDAFA0846AF7B6789E621ABE3C65A4D990A96488B6307BE210887E82BBADFB026B60CA7DF3C9D429D8FEFCCC93A"
				"82E345F3B17756F6341F5DB3151974B1B9C7AC4AA33E80923475FE38FFC0AE7F47529360787AC283008971D87FB07369BAD111F1B99FAA59F2E1B5C088A5F31A"
				"47ED6A8E30FF6465A7DC79967EA78891C8EBD462D2566A4EA30EDFB8B7BEDD3C4E2ABFEEE7B366125A19B6372CEE2EB2F85514648AE920D292F444E6F90346DF"
				"87FD7C107848796219027BA581B3D87704FA8605108CA88ACF262C5C07D9BFB42635A1944634AF0633B471D0D2B2E4D6284894E0E48D58AE5D07E95130C9FBA7"
				"7A0F124F9348E1A570BA0D009B7B46E03CEB201B17114B935AA91691A7F830346636FD34ECE2CC295D0124AD8CA76CC81E942C1607699F0DFFD3BDB509392FAF"
				"8212363F562554B05F756FF252765E6FCAFB04C6F2CF6A76F2E59E14F5BD4EA8E2ECF50B17E632F346D697FFB7AEB82ADDEF5B4DEC0DEE73D2D96B1A33C6AB4B"
				"CF7A160B79114A48F224FA037315ADF0485AB63DC2BF09F02606DAD80F13F0ED0241E6F53B21BBBE584794F77D0B783A7093F53AC916A848FF0F9FA3FB08A053C4"),
			std::string("84F327D38929039EF84366AB796A96E6CC268454D5AD8D05410D3E969B6D228B6CED2CBAD7BAB3B4B7EE453747D3331D43B21CD2ECC3BF557D696E81773EE69F"
				"687FE1F61E63742AF913A35418575467118409D4FFDBBAC5CA062DFF3F04D76154D17EC34212DEBFCA967A91E461F73786D949D6A9765140B9DC7849639A4870"
				"58F45DDA919576090D35E783804BA7B8B33B5C6A8C1EBB7C39F042696CF9F2B624D26EA5D6D101489E242CC35126B573928B6B8BF9945269AD22E7DA70CCB7DC"
				"374F75641978D5F6D5F540A1169EB098570A7CFD65C9257C4C196F42C6DA4F4466D8F11A17C6A75A9BDD45B5AC77A8367B005ED22141A81B995A19E4DC9E6743"
				"B4B45E0329E7A00D3FF90C7A917CDC9CA75A34FFFDD9A321751B5C8B2AB9E1EA037CF45C04B412A97F52E7C6D66508456D9117961257B4F50BB9F500DE99B6F0"
				"61C377D44F495D711AB2ED3E88CCF14DF10F8C60BD00E29CD83AD160FAEF2984FAC7E897CBB8CDA144D50E4C1AD20238A2617598DA6EFE786AA82E0931B0B5D1"
				"A7FA024B856353AFAEDB0A1150A42DA182353CE5A00403BB6B7A13EFFC14B0FD97E1117302ED8A66FAAED88B43B34CFC73CB33E49A4C34D0BFDEE2FEADC2B4C8"
				"BB1EC41215586FC66550D496373305B99CEE254EAC71D3CDAC689A777062ACAE65B031B5A1A973835BE6A4BB061F178531C45DE3B33E7763B483621821E037FE"
				"5EF48FD971D8D2BEFDA63250E9B1181D8B8086BED9CDA8CDE6644CDE8EBF7C1F1038AFE798A2A4C492B603B7F4F8805D0FDF19D8274888CEBEC3043CC9ACF024"
				"BD30D8B0D28D311985930110386598775CF84E0848B11E090905A65F56142FC17D2573536FC51E7D5B2E0FF7B09471155008561156FBAEC215031ED0D844EB14"
				"D6C609173355FFF8AE22C6E5BCCD19B2832E5FBE625C2C0E516E1369D1FCF49A5FDBAF8CF572F04317DB8ED70EE1605B96D077B4F054C72B139F5BCAA5BB627E"
				"39BE5BCC97AF922C5E70835BD918281B95E557FC86A43C75980A0D9F0F9162F230014CD867DD07DB23260934546C04499D6B8627B8D5DEC73FA45327F8498352"
				"9BAF3AA10E885724FE76055099D136CCAACC159B4CE38784404CC9B04723910F990AF77C64D42A29D784FC897955758F1D2A12BB7C6F6A8E5B94EFA740F662CF"
				"0DA2D099C61EE1CC6B661A64F0887B805AF53C7B64C4456DAF228582C1B2212A8F718E56DF6B72D7EFA0C5D26582CE96AEFCE13CB2830C3FB32E5115AACC20D3"
				"A335F7A4C12E0CD1DE532D8D9D42D69BC2D0BE0AC7DF3B8F416B9A53DB261C47272725A8A88298678351B42103219092076B6ECE744D993388A8F2C475079CB8"
				"BC4DC492A4797147C01EA3508225826F7A3D32BF502B0F4552F36FC9F6FB91E82DB1949338B45436EC0FF63B53F900F27F8147D420F93D33C83794980E94143F"
				"D361F944DDB56D3114EE974C96A155"),
			std::string("A3D8E984C05DE5C4A79CF942CD91C01C7DAE42B3A7A8EEFE8E49A446E8339B2F380A7AD85EE435E137C62143BD4E9BF2F10760804FB34D16C49D8FECE7F8A169"
				"4E4BF44E2D2AC9C77F497A60C60D5BFA298BE5AB85BE4FE5C7E5EDDCA01DE8513849014CF5027E73EFFE0EA7E5A2C258A339F89AB6E6FE606A9866BEE26A2DEE"
				"BE7BD27DE4103AFBF98C6399452A1F6AC88BC7C7A498CDB3891B30D69304C87F3B662B30B4B560C6DC7FBF06C7162701882A9A4E9E2295D3A501D1B011528405"
				"907671DF1C001D4DE4311BF286CF6B20B41C395318BAF45A301689C07FDCBC12A89CF9E600F10BDAC6D3EC97E398ADD5E2C462F5C89A22B7F6EF7FF3502195DF"
				"8C15A5E1F0A5EB8C47C1467618A6426C4D1F288C2BDDF5B7DE30D72A2052B48F140C41C989E1CF83A8BAC3542FA1BC12E2667C661C2CE9E7178199DD3ECF33CF"
				"B1F12200CCE56DA90319DD4E041DC3F78CD272D9DCBCAF5F8B87F1D5A7AC138A9020C07E67FF161674E4CED4EF8E7DB7EDDFDBEEC2D9D32FCCC62BCB1527CB01"
				"B752A09E331668EF1410EBD5BE0C041ACAE0AE69D7568CD423056A0513999596486CC9BD8F8AD20C874BE58C0BEAD0BA8A22F898EB066B6377C51CB4D7C8D230"
				"67E13FD5F4FA5EADD8543DD7CD5DB0F75051C4DB07305995A8DFF6F5A0799A4835682A4AA63090245F1459B66E4FBBD5507CBF2DBB37A61B4D160D6BD2D8FFF0"
				"6B24A1A83AA8CB98437E5793B323DC9DAE9BCD0D7C093CD770738249E57AB950EC0AF951DB35711B4FFFD0D5E15FE57EF61F2306875051628B8029D638ACCC50"
				"2B3A1C2D0F4783DD7768D1BEC2407E2B5012AEB842479100C4AEC393D1FFD67B1E8C6A57347E11A82EEB01EEADBF439676A664BC7DF2C0D25061B48B566A4A66"
				"260261E3873FAC3143BA4628C2510C14E27F4F9B3349A0F135CB649D8661CF64A60D36D5E73B9D2C873C04352EC5AA1CF747D7648579958BFDDA8D65F2F4ABAB"
				"CD094D155E3E800C48A07B57A6C36404FDA84BE742F180FE9778D1C1FD0C00DB50BD597C6877CFB2E9EB1373B27A28A496CB8182B6D96E885CAE6C830C6AC451"
				"209B6E4006E59441627E344E12C0FD65EF5915993F63EBC1F43D5F22430C1DEE2088497BF6F833C0EEF23A7F8176BB46EFCB057C14921C63A083FBE0385458F3"
				"5B8AA193A5F7C937BB86D3D21CF404E60650C9F42BFB802DA61411F0D4F8794FDCF506D63959E5B92940D33F79036F50390786FCBE6CA758737B1DA6E3AD4865"
				"AE264B7F9B25AE10909633393140BF0FFD05F20A29711C528DFD64189E0E5F84312D54BDA0680CF8F18C3B6981A437153C26B411243DC9BAC825915C9659D7B6"
				"8C30F1524E781E7A5ED6C163C1C56F82DD0A95CD0D79B83BB6828181BB37F8A3A42769E7D4C33312D355225F9724C7933FDDEE105336002E854C43C28E145094"
				"E5E8B14B4C92954FE5A289C60D496FF858DDEAA080946730DF6D32E9B45ED36AEE2FCBE2A9529A24BBE258696EB077F0D390BC4B0BADF6003FC6510251D27FFE"
				"5C77FB601F37DF29F221AA840464D7E0791E060A25D143A9609F4D5A135F498C13AE098AA855FF7CFD03709BF40A3FF5E3F8ED6FC4692F9E3112337552D1391C"
				"2B8D9F80D00D0E09C05372C6CF3CC7BB527A40AFC18343DBE9F15289A578832F")
		};
		HexConverter::Decode(cprexp, 3, m_cptexp);

		const std::vector<std::string> pubexp =
		{
			std::string("01031FE0C4328B956E9AFA7B5D86DE2CBF1F0728A1236F685DD2FD221ACDD05CAB64B01AF7A5F3C2837A5B7FE5FE31E366F7F04C5B77C1D6BD3B25A765A84CF9"
				"AA08FD9ABA3BB6A4B5C3504064D0803687A04F06B2BB5F7BB95AABF6CB823ACC6E74E98FC468C3E07BCAE284797221A8C8A16168A91A03D066F0EC93F26C8BB6"
				"E948BECB9919A72E0FB86F380F1F2C1A2EFCEF871D6ACE4F5E0AD226A80117F7CEEFE566193D872A9ABADB9873D3E9ABB0119CF4133D06F0DA9F0ECB6319CEE7"
				"96F2FF5B85B4A6754AD4C94346E325BAFF9CC922561CF02B827E2A487ECE6A4AD9ABBDE1D81C218CD5D50A66B8E3EB9870C9F68457BC813A2D827EA7C8795143"
				"9DD394DA1ED071E8AAEE175BDBFC5CE2ACDE12F78C9B82D9653B970F035A130A1DFBE5B2D4C186C909B9ADF4FB821B2FA21EC03D8D8E095D68F4CC12CEDBE1DE"
				"7428A201B04A9575BE758D58340E73602C3467876A4B18218C34A3126DBCC877144E4A42A45005217D9C50F38DBAFAC6477011DA1A1FC749F26B6C747DDADF1F"
				"1E4707440A34C22046A6145D3033408212254FBEFAE6A4FCF5AA41BA14EF3C6CA23F3E04CA53A5C2AA03C717A04E928E5DD392ADFBA921528E54944B4183ACBE"
				"D4D21DFFA3F33D35B9679068B3711AC438F7CAF3042436A9C0BB296ED1C7891B7B782EAABFCE080BDC54CB4EAE3E75536171BF1235397ED37A4394D05D31D727"
				"4A1640C1B42912CD9AEBB6B323C370130A854E5BB2253D6F3CA7AFA061C241646C28A8D1EA7AACA73A028920C2BA5DC9EC21F1645B92B35FE810E024CB764CE5"
				"3F611E61DFC62CEDD8BCD445870D50EBD4DD8021924CC366FADE330AC3826DBF43A328254C367B15718967D72EB4F7EC3BFB692B5BEF357BEF0974739400113F"
				"766922F3171964E303D255FE2453BE85AA7B9B9B6408D1655D475BE7EF0351273BC084C9E71B794FAC5C256E87CFEDE5FD8E03EC272B24675B947BB5C1711D89"
				"4285E026221A152D19DDE65ED293710D195D31968D18E9E2ACF3A0BF5C9F4760B1C20DDCB49FD9A24A3027025A5C090C708E97CD0F273E89DD43180ABEAC4665"
				"478732683325406CFBF20BF3059AE57756FAF185612EC199424EC64EC444BC190F0FAA6B2E9A2D96E7814E2FC3BF673B87B7CEC8D6F3A814B5774CF95490E258"
				"F0B10269E1ADD8C1D1C4BDD5346ABD921CE3E02A2D051A95E56DFE9A0C655D926FCA45D445170498F6D0870BC8D3F444982E55DE23D59A385E1F18732F7D7F65"
				"26289C6659D4363009EBCDF2066411E49E3A8E3D6B312DDCC49169BBF9B13C827A88ACFD5B3E61A9116916F41052A3AAF50ABDA2E7CAA9DB7EA816F44C0F315C"
				"B86700F62E25E05C90294FBD55342D62BAFA8BA55BEE7B532D50CD947065E704E625"),
			std::string("36C969CF1008A6AA9551A784941C65A9BF68C2DC33FA36B5D266B25171B346679F2D22BF3123A79C790D6DEC68E1BC44420A6824F5357C78E3C336FEE0551E62"
				"0DCB975F563682A312A3353B521C727F57CABED0C3228F09317CAE8B58158EBF5B26BDC6E6365AA601ACAD2ABD37F5830D0BBFE355705C0A62B76A5C910AD04E"
				"55E5DAD749C7393D2E2E8AB643E62E4757AD2201CAA33203F53B4A9D4757E7274D72BDB036A31D7DE11E5D1C66CF3059F33B6A2972C1E1D9C9FB2AEBC78B2C05"
				"5D48D79C3A7C996C08B7DEF0791CDE895053885D8DA1D254EE19C090AF34F4720B0B77139108D8498982FEAB0B54934CEE3DCD24B049F981A84C928028A64A26"
				"CDF87052313C3E50B2E1F539394502433C0962996C3599189B15174281B6595B567B8C4CD80902860E613AE1906A55607CBF0E11AD6C0C0DF38C006A5F535FA6"
				"E6FB49D10B78B9CB6473BF0630518DB6FDECFD70DED201C7E35FFB3BB78D8AEC181F6DE960C316FE354B7CC69E8048201965AAFEF4EA3F808737FF45255A1779"
				"DE57A4B68DB587263D7B7F6CB07D8B01224DD291237EFD9C01676E30154A2A7D60174536580FE64EFEDDA5FB42C13ED8C5768A3CBCAE7A2343B3128CD5C1C663"
				"A07C7DC0E1E2642C0D9A02F349C964154A6C4308D8ECF30F47E9A81EED2A32A2BB44DFC36A28A66AE77BB139FA416B6327EEFE33632469CCC21229587573C4F7"
				"752CE1CC79CA0C6BDA08CD79E25720D2D9092EA2AB13F31E9A3AF1C69FC6379D8E2AD2B87B514C817A087338B7B0736B8954DE9223225B40079C92601248C14B"
				"2104901E74F849D9EEE9F5636C1DAD6031AB477C573197E7EB6CE535D9F0F69183DD9DF5521595E5C9E98D846CE08AA655B70CC0D8041401929690298F645D91"
				"12DBB03B189CDB1FCF4D512F6874B409BF55EE1CC284A05B698B8818F043C2591C9F4ABA29CF4259915D6A0BE71B6B93963C618CBB567838E5EADE6500DE9AD2"
				"50083A01EB3EB44C00EECB2B0F874CDA165FAA6524CA13D435C938DB9469292FE97283C69222107EA2F9EFCA1B6D41DCA5B149B2A8CC2244A1BC54261CC11742"
				"ACD27B7F2352C33FB83FE143386479D78D6D5C3E51684B60A56714182449C94327139B0289B9BDE0AE3FEF319FE2C605AB5507C894D2C2761A3BD3EA30F4BA92"
				"8F9F23303061617E2F042DCF229AFF2C9345A6B3CDCF90D3E3BCC3A1110C85616BD585C31CDE3E69ADC12A18BFA5797DF0543435A7C874A8ACF3786FCCBA4A6C"
				"EAA65E5666230AA7206AE78EB1B98CB5236508E6357E18CCCFAEC5693532BE4EE38022C48FE94F62B0293A088BF4D737F48748F23BCB338B58B4D666AD3C64E9"
				"ECD07265F971B07AF716D4A5B719C3F5FE35744734CBA5430381661E372B6F6510D61B11E4697A1A961589949DBA53B5BC5BDB76FA09324387D799536506182E"
				"FF7078034B34E1DDD2612B0A40E7F1A294FBA869DA2E46C4C36BB08C7E9BEF09A94459E8FC2D3CC579D15284DF1F19EF77E03041511ACC39BF9CA8AC8DE6A0E5"
				"EEA0BBD4289B6DAE38E9E82EB50A0397B3EE6C52FBDC7DEEA2C376825E89016C859B09488548BF76CA62D696DF94A61E8F0E13C69EE816CE5AA2768987B0A782"
				"D74C673EC005"),
			std::string("F4781059E81A38E6789F2FC33912E568B5B5E5C5C1B04F43B6DED86AC1ABD43047E555370FC95796AEE8C2CA83F1D409378E23F3A9E77595856C94D956346D52"
				"5AF0604E5DD16C0678D67E51443C60A0BB2199394F55A81A67279066C4F85524962A78AF51B82E2B33D7E8B20D0CCE16C23F1254C920252DE9635E3D5DB01271"
				"4DE34D68F43334F2AEA80C07D26CB78229B5A0040A7C44FC5285BDD0348CB38FCD3B84DD3708BE88439F1F928F818DF3CA82FB503A596615E89D1A45BD4BC41D"
				"C0DFC384F3BCF319880AF67F4F28675E58E2BC6A85891BD3D234B7C385DDB8413A0CAB6D2085B548B07F55C90821F1D3D57D5B823B54D0721513268331BE3714"
				"C4EB371CBF7930588F5C13970254B57026D69A56840902F54E7EB6C0B5FCEEF182A94BFF67D6A09D87D72CEE210FD05B69665BE0E6AD1AEFEBB5C3B529A889D3"
				"CF9EFAA38F9BA10A97FEC68743075313D1895619881A776CE386DAF1D1190CFD633F88703F7E42A89A079235012886FCF1C5C6AAAD405F6AC380392B231EB3F8"
				"163BAAE536B9BC9DE552CC8C813D206A659FD304B217CBA653772C7E484AEC75329FF7841A1D97A0721B9965637040EA10D9F62DAF55E130A44DE2968103C237"
				"6D0F210566B5DF987DC3747A7BF1F850AF40AE4C12956FF1B4A2FEC451DFB17EDDFE7F9A463123A6BA5D651DE81A58F513C6B28F28148B7F42A4D5CF3E7A6A84"
				"CD3BF95929761DAEE5A38E1E9AD06C6A6932BF04E371CAF5C10512190739EA5A9062558BC050A0DD2AF17375691A70743DE9254CC540E115A96FB57C27588FAC"
				"56C9FDE9E93245CCAECEA1D10D73DA471F28055C0FA7EF5903C5915AF1C7496FD0DF17CF533A480D6BDE7EB291D7000D7470CA0C7D350FD175A8D46FFCFD942A"
				"F5964878C560D27C4492077DFA0EBBA43DA9C7DE441DDA8AADA7A43B93F8637D798C9B5D949EF68CE1DA5136FC13D654AF820BB1620EB535878104694F5AD422"
				"A48D4527E0BBD3357DAC6F3F433A58D0652E4322EBC346FA0440FF1F62ECA67A8E46FD9609CCDC665B40D640CD2B0A21D25F94936A50A8B5B959D0102970B9E8"
				"44C2FF15A3DED41F7F28FD7F6A9B7B1FD26A75A71E7F7ADC943484E142E3883B119AB32F68BE6C586098805FE1A9F6C71ABEB4512429914B2898F38D78D65DB8"
				"22718307C7280506D49B6A857481A28A04F2131687A17A3D0463E3CD3929BCBB877BBDBC52606E36811E96E69CE0FF8812F30E4A6F7522E7601E31F69E3A0B8C"
				"C3000BB3CE5F39DD477CF02897D18DAA2EDFEC88DF542A8A0CB5E1492E486F314D889E1D2BF6BA8DA350F3C0B6CB32A19312B3BF61892E546A99522FEB4CC85B"
				"018C8E36E80884283B1A770601942D50601B19A0ACB40E449070488EAA2DB069CF2CDA251201ADDABEDA2F8438160F98F24029E4FEE3EA7FD1526E5CBCDE08C6"
				"999F7E75C6B87EF7F73D6B87821ED92015D16DB06B6C62625284926488DD7433CC7B069E0295906350A9D4B58314709A09D91BF62A59827D6197FD8D91B4BC6F"
				"965B75FE59A5AF2977D81A0FB7335D80AC2768BF022E27DAC66D2137A0B3A07EDF7102219D8C6198F0263E35093DFE97C2D8BB95793FB96023B6E6DDA85AAACF"
				"8B87391B57E9BC8CFE7FE2D4AD98487A7963CD9C0AD80EEB3B8C73120DEF03EF3D3A43B15D8808F8A78D6A867AD9A0E87447B8D21BE0C27F30A1F5A222A4AC40"
				"2E576CB90784CA05DE12FDCFE3EE1E4071B99D27F5143C97D303A56A387BFC4CB8CBDBBE0B68C467CA2C76DB00926DE21D1F7D29093E2FDCDDA99CFB37D6B99D"
				"6AAFB37DCDC61F1F14BA57E331767D7507E1C1C5DC542349BA23836C71F4E0FEC6A813DED59D14A23010")
		};
		HexConverter::Decode(pubexp, 3, m_pubexp);

		const std::vector<std::string> priexp =
		{
			std::string("5515559645A956544158655545514489451621815999295514A25949655418096985596A011900615556598565956A6866A91655545521455199545546064054"
				"8011661525945242549500A515565165659455A52545A6A5445050A2054599A4659591541906682494418654A68A969155864655419119405555105595842994"
				"525415591649A569515155058551859A565A8854655454848415444169519555149656009A284AA0664A42991A8809015AA6555A54AA55101046008442110280"
				"9A028A940502189698410446514812188888644650A081288196648158A61261A94A50908918A5810846011A9925260685A244404A0A585A0289066611A85A5A"
				"12408668A6A6591565185058559A18658821104418281602A994A6505012A82A662412A40255690122299A0954295A9461106692991040149525005292946240"
				"41461249AA142A0201031FE0C4328B956E9AFA7B5D86DE2CBF1F0728A1236F685DD2FD221ACDD05CAB64B01AF7A5F3C2837A5B7FE5FE31E366F7F04C5B77C1D6"
				"BD3B25A765A84CF9AA08FD9ABA3BB6A4B5C3504064D0803687A04F06B2BB5F7BB95AABF6CB823ACC6E74E98FC468C3E07BCAE284797221A8C8A16168A91A03D0"
				"66F0EC93F26C8BB6E948BECB9919A72E0FB86F380F1F2C1A2EFCEF871D6ACE4F5E0AD226A80117F7CEEFE566193D872A9ABADB9873D3E9ABB0119CF4133D06F0"
				"DA9F0ECB6319CEE796F2FF5B85B4A6754AD4C94346E325BAFF9CC922561CF02B827E2A487ECE6A4AD9ABBDE1D81C218CD5D50A66B8E3EB9870C9F68457BC813A"
				"2D827EA7C87951439DD394DA1ED071E8AAEE175BDBFC5CE2ACDE12F78C9B82D9653B970F035A130A1DFBE5B2D4C186C909B9ADF4FB821B2FA21EC03D8D8E095D"
				"68F4CC12CEDBE1DE7428A201B04A9575BE758D58340E73602C3467876A4B18218C34A3126DBCC877144E4A42A45005217D9C50F38DBAFAC6477011DA1A1FC749"
				"F26B6C747DDADF1F1E4707440A34C22046A6145D3033408212254FBEFAE6A4FCF5AA41BA14EF3C6CA23F3E04CA53A5C2AA03C717A04E928E5DD392ADFBA92152"
				"8E54944B4183ACBED4D21DFFA3F33D35B9679068B3711AC438F7CAF3042436A9C0BB296ED1C7891B7B782EAABFCE080BDC54CB4EAE3E75536171BF1235397ED3"
				"7A4394D05D31D7274A1640C1B42912CD9AEBB6B323C370130A854E5BB2253D6F3CA7AFA061C241646C28A8D1EA7AACA73A028920C2BA5DC9EC21F1645B92B35F"
				"E810E024CB764CE53F611E61DFC62CEDD8BCD445870D50EBD4DD8021924CC366FADE330AC3826DBF43A328254C367B15718967D72EB4F7EC3BFB692B5BEF357B"
				"EF0974739400113F766922F3171964E303D255FE2453BE85AA7B9B9B6408D1655D475BE7EF0351273BC084C9E71B794FAC5C256E87CFEDE5FD8E03EC272B2467"
				"5B947BB5C1711D894285E026221A152D19DDE65ED293710D195D31968D18E9E2ACF3A0BF5C9F4760B1C20DDCB49FD9A24A3027025A5C090C708E97CD0F273E89"
				"DD43180ABEAC4665478732683325406CFBF20BF3059AE57756FAF185612EC199424EC64EC444BC190F0FAA6B2E9A2D96E7814E2FC3BF673B87B7CEC8D6F3A814"
				"B5774CF95490E258F0B10269E1ADD8C1D1C4BDD5346ABD921CE3E02A2D051A95E56DFE9A0C655D926FCA45D445170498F6D0870BC8D3F444982E55DE23D59A38"
				"5E1F18732F7D7F6526289C6659D4363009EBCDF2066411E49E3A8E3D6B312DDCC49169BBF9B13C827A88ACFD5B3E61A9116916F41052A3AAF50ABDA2E7CAA9DB"
				"7EA816F44C0F315CB86700F62E25E05C90294FBD55342D62BAFA8BA55BEE7B532D50CD947065E704E62500D57230D15E762228DA98178A193D7D95284B20E82D"
				"74228146FDF68D59B37C5E7F78C0E14E7C40BD4F4D9CF0B189B69983DD39E29AA6439ECAB0A5B294D2A1216CE31CAC6D1B2358D2B0476C4D8002519B6D63639B"
				"2D4564E2458C8E06BDEEBE82262570777780F43B110A96547415A69A38EF0ECE0C2AF16B9CF11FF8326E2DE6DD0333B2EDE445AA3A1057824478BFC71FD00DEE"
				"601938734810D816F4DADD35F4C152B10CF13957945F8CC47FEF0CE3BDD1F0C5D8CD24B07E3F6D2A5D01717CFD06"),
			std::string("55565515155545556569159955A2555455456161450594556556915055895615548852955456550098544995555AA5465400A5555558956510A6515596559665"
				"996A44915415414465565555551105624156954944626940555555165665955555A5159155595659156565154240408919545456695585906425865628505456"
				"9505A6A956949446661415580115565055485955259049A5545525455504526A195455554185525A899625525556582484644514556589656258515459150185"
				"08154A51A0448959112A286212608A52911A949119A2895664165900A861541A200A52104029544600425A5A1198101A1A50A094A551425A484959A1506486A6"
				"18555A89905615029622A2A46696A2A6595A46682622525050489A8040562808168156854185026540A1059A94AAA291811948A259816991110951802409AA5A"
				"2A06290092451446655608404096898AA56220562285150891914066110A0905A841044865042A2688AA12441AAA46064669155555A2109659299922820036C9"
				"69CF1008A6AA9551A784941C65A9BF68C2DC33FA36B5D266B25171B346679F2D22BF3123A79C790D6DEC68E1BC44420A6824F5357C78E3C336FEE0551E620DCB"
				"975F563682A312A3353B521C727F57CABED0C3228F09317CAE8B58158EBF5B26BDC6E6365AA601ACAD2ABD37F5830D0BBFE355705C0A62B76A5C910AD04E55E5"
				"DAD749C7393D2E2E8AB643E62E4757AD2201CAA33203F53B4A9D4757E7274D72BDB036A31D7DE11E5D1C66CF3059F33B6A2972C1E1D9C9FB2AEBC78B2C055D48"
				"D79C3A7C996C08B7DEF0791CDE895053885D8DA1D254EE19C090AF34F4720B0B77139108D8498982FEAB0B54934CEE3DCD24B049F981A84C928028A64A26CDF8"
				"7052313C3E50B2E1F539394502433C0962996C3599189B15174281B6595B567B8C4CD80902860E613AE1906A55607CBF0E11AD6C0C0DF38C006A5F535FA6E6FB"
				"49D10B78B9CB6473BF0630518DB6FDECFD70DED201C7E35FFB3BB78D8AEC181F6DE960C316FE354B7CC69E8048201965AAFEF4EA3F808737FF45255A1779DE57"
				"A4B68DB587263D7B7F6CB07D8B01224DD291237EFD9C01676E30154A2A7D60174536580FE64EFEDDA5FB42C13ED8C5768A3CBCAE7A2343B3128CD5C1C663A07C"
				"7DC0E1E2642C0D9A02F349C964154A6C4308D8ECF30F47E9A81EED2A32A2BB44DFC36A28A66AE77BB139FA416B6327EEFE33632469CCC21229587573C4F7752C"
				"E1CC79CA0C6BDA08CD79E25720D2D9092EA2AB13F31E9A3AF1C69FC6379D8E2AD2B87B514C817A087338B7B0736B8954DE9223225B40079C92601248C14B2104"
				"901E74F849D9EEE9F5636C1DAD6031AB477C573197E7EB6CE535D9F0F69183DD9DF5521595E5C9E98D846CE08AA655B70CC0D8041401929690298F645D9112DB"
				"B03B189CDB1FCF4D512F6874B409BF55EE1CC284A05B698B8818F043C2591C9F4ABA29CF4259915D6A0BE71B6B93963C618CBB567838E5EADE6500DE9AD25008"
				"3A01EB3EB44C00EECB2B0F874CDA165FAA6524CA13D435C938DB9469292FE97283C69222107EA2F9EFCA1B6D41DCA5B149B2A8CC2244A1BC54261CC11742ACD2"
				"7B7F2352C33FB83FE143386479D78D6D5C3E51684B60A56714182449C94327139B0289B9BDE0AE3FEF319FE2C605AB5507C894D2C2761A3BD3EA30F4BA928F9F"
				"23303061617E2F042DCF229AFF2C9345A6B3CDCF90D3E3BCC3A1110C85616BD585C31CDE3E69ADC12A18BFA5797DF0543435A7C874A8ACF3786FCCBA4A6CEAA6"
				"5E5666230AA7206AE78EB1B98CB5236508E6357E18CCCFAEC5693532BE4EE38022C48FE94F62B0293A088BF4D737F48748F23BCB338B58B4D666AD3C64E9ECD0"
				"7265F971B07AF716D4A5B719C3F5FE35744734CBA5430381661E372B6F6510D61B11E4697A1A961589949DBA53B5BC5BDB76FA09324387D799536506182EFF70"
				"78034B34E1DDD2612B0A40E7F1A294FBA869DA2E46C4C36BB08C7E9BEF09A94459E8FC2D3CC579D15284DF1F19EF77E03041511ACC39BF9CA8AC8DE6A0E5EEA0"
				"BBD4289B6DAE38E9E82EB50A0397B3EE6C52FBDC7DEEA2C376825E89016C859B09488548BF76CA62D696DF94A61E8F0E13C69EE816CE5AA2768987B0A782D74C"
				"673EC0059FA532AE97F8BDF90F90130926654FB8B469D772049D72A8375CD8459D06CC1B90633EB3A899685D21491B5062A9FC73FB6E878D7A73198EFA0B569D"
				"9CE665CE126FFDC9862EB00D11F457A7995555F7C92011C24E1CEC45C270FB5F121F08177F97FC3F631C0EF86A92E99D557FB69A0F6FCD8B1C0EF94AA7429B3A"
				"8A11614D847202D3D04A98313FC0D63ABF9FD75CA321C879458BF8837B7E74CCF5179C7714FA9800D1821EE3F9639D28136B7910872631F85AE7B6DD289E0103"
				"4217210859D4E53C65487CE38AFF621DA76BA1C4E2E77ED5380B47B8D983CCB5BB793E"),
			std::string("95599A5585515551555655559019A556445555155521595558429544955A544956956156116019465544595504645649558595A5465555556556645564699641"
				"665869655595554665265114099155416101A15655614A5915514162126655559944905824542584518555559955546845514A45096665155156452544442565"
				"169169A5560645252915959055595465426AA6569464195951422558015556811595559945464951596865A50651595655809156425015961559565A55915595"
				"515A59919114968924555556589926465A51515555550194154402264A5A5945888921556A8589509604A98889651688824968869888A5812149544024055596"
				"9401902A928848248A8126A29040110241540568A96AA9814151AA296616A2011194A4561245A60691290861990A980A465116894442852428508595A581206A"
				"941889256446012A88004844556516A1066849A86088A00426A299128456A544A5404855929A45815A8506A98081461A45A469AA200A40A12A149A1456A9AA02"
				"4882412624220A20645009662989862A512A5066920A681996A81516822298081199085A68A48066616485954400F4781059E81A38E6789F2FC33912E568B5B5"
				"E5C5C1B04F43B6DED86AC1ABD43047E555370FC95796AEE8C2CA83F1D409378E23F3A9E77595856C94D956346D525AF0604E5DD16C0678D67E51443C60A0BB21"
				"99394F55A81A67279066C4F85524962A78AF51B82E2B33D7E8B20D0CCE16C23F1254C920252DE9635E3D5DB012714DE34D68F43334F2AEA80C07D26CB78229B5"
				"A0040A7C44FC5285BDD0348CB38FCD3B84DD3708BE88439F1F928F818DF3CA82FB503A596615E89D1A45BD4BC41DC0DFC384F3BCF319880AF67F4F28675E58E2"
				"BC6A85891BD3D234B7C385DDB8413A0CAB6D2085B548B07F55C90821F1D3D57D5B823B54D0721513268331BE3714C4EB371CBF7930588F5C13970254B57026D6"
				"9A56840902F54E7EB6C0B5FCEEF182A94BFF67D6A09D87D72CEE210FD05B69665BE0E6AD1AEFEBB5C3B529A889D3CF9EFAA38F9BA10A97FEC68743075313D189"
				"5619881A776CE386DAF1D1190CFD633F88703F7E42A89A079235012886FCF1C5C6AAAD405F6AC380392B231EB3F8163BAAE536B9BC9DE552CC8C813D206A659F"
				"D304B217CBA653772C7E484AEC75329FF7841A1D97A0721B9965637040EA10D9F62DAF55E130A44DE2968103C2376D0F210566B5DF987DC3747A7BF1F850AF40"
				"AE4C12956FF1B4A2FEC451DFB17EDDFE7F9A463123A6BA5D651DE81A58F513C6B28F28148B7F42A4D5CF3E7A6A84CD3BF95929761DAEE5A38E1E9AD06C6A6932"
				"BF04E371CAF5C10512190739EA5A9062558BC050A0DD2AF17375691A70743DE9254CC540E115A96FB57C27588FAC56C9FDE9E93245CCAECEA1D10D73DA471F28"
				"055C0FA7EF5903C5915AF1C7496FD0DF17CF533A480D6BDE7EB291D7000D7470CA0C7D350FD175A8D46FFCFD942AF5964878C560D27C4492077DFA0EBBA43DA9"
				"C7DE441DDA8AADA7A43B93F8637D798C9B5D949EF68CE1DA5136FC13D654AF820BB1620EB535878104694F5AD422A48D4527E0BBD3357DAC6F3F433A58D0652E"
				"4322EBC346FA0440FF1F62ECA67A8E46FD9609CCDC665B40D640CD2B0A21D25F94936A50A8B5B959D0102970B9E844C2FF15A3DED41F7F28FD7F6A9B7B1FD26A"
				"75A71E7F7ADC943484E142E3883B119AB32F68BE6C586098805FE1A9F6C71ABEB4512429914B2898F38D78D65DB822718307C7280506D49B6A857481A28A04F2"
				"131687A17A3D0463E3CD3929BCBB877BBDBC52606E36811E96E69CE0FF8812F30E4A6F7522E7601E31F69E3A0B8CC3000BB3CE5F39DD477CF02897D18DAA2EDF"
				"EC88DF542A8A0CB5E1492E486F314D889E1D2BF6BA8DA350F3C0B6CB32A19312B3BF61892E546A99522FEB4CC85B018C8E36E80884283B1A770601942D50601B"
				"19A0ACB40E449070488EAA2DB069CF2CDA251201ADDABEDA2F8438160F98F24029E4FEE3EA7FD1526E5CBCDE08C6999F7E75C6B87EF7F73D6B87821ED92015D1"
				"6DB06B6C62625284926488DD7433CC7B069E0295906350A9D4B58314709A09D91BF62A59827D6197FD8D91B4BC6F965B75FE59A5AF2977D81A0FB7335D80AC27"
				"68BF022E27DAC66D2137A0B3A07EDF7102219D8C6198F0263E35093DFE97C2D8BB95793FB96023B6E6DDA85AAACF8B87391B57E9BC8CFE7FE2D4AD98487A7963"
				"CD9C0AD80EEB3B8C73120DEF03EF3D3A43B15D8808F8A78D6A867AD9A0E87447B8D21BE0C27F30A1F5A222A4AC402E576CB90784CA05DE12FDCFE3EE1E4071B9"
				"9D27F5143C97D303A56A387BFC4CB8CBDBBE0B68C467CA2C76DB00926DE21D1F7D29093E2FDCDDA99CFB37D6B99D6AAFB37DCDC61F1F14BA57E331767D7507E1"
				"C1C5DC542349BA23836C71F4E0FEC6A813DED59D14A2301068876367383971F68034FF76FECCF1CCDF158B8ACDE8489B02541B71062217C6507E83D2F473C734"
				"B3F9ADDB37C50A0FB90292F1460F700DCA44D9A865A35575EE454DFF4BE1DB605322E575017B2E269A9487C4508D4B1F2B96C77C107E300DACA9CF7BCFCDB47B"
				"B468C5E7C7BC326543ED2210BFDC262674A269DB63DFADD23B71E60C8E3C4105E8D20C91B2B6F5AA44EF5DE056B12ED22E8837D868E7BD7A798861930D06E39E"
				"54A65C4934BB236F5C53A886C032F90738FB7F4FA5F9A7B09691FD9C93492DA1C1641F0D01907237DBE963B45245C0D9395A11A720B85BC242F36F41091F26AB"
				"19E134BE504E9CBCFAFF490E3C21A3")
		};
		HexConverter::Decode(priexp, 3, m_priexp);

		const std::vector<std::string> sskexp =
		{
			std::string("2FFCE8C89E97BBA86A7ECD68088FB116A20601B88B8E88A3783CF2D2ED439769"),
			std::string("6EEFFF4BE113E73222E2AC5EB1337675B50CB1219ECCB0202710C84F7C56D0A6"),
			std::string("D3FCEB530243401C5EEF8A004C6DBDF4B16B3F8938617A0F3A1B3F0B57E563DC"),
			std::string("74036DB0E3A881ED44CE14A214A54AD4B8CB6834144361BAB04CD1FA36DE22D9"),
			std::string("AFF4B1915989CC12657365FA3AD839E8E35710B211CBC703701BADDF05D36685"),
			std::string("705994578F8E7FA16FED09B496BA4A3F9BBDD5878B172F3023D9D5EFEC6C1AD5"),
			std::string("FBC2FC22199962B2453BBF22ADF5EBDA4BA92AA12DAC1710F55C1C12D68AACD5"),
			std::string("FE4E601CA5B2754547977EED11439931F734CB2831840747CE089A43B76051A6"),
			std::string("1635AF2CDFD7081D50B3331EC25C0D01D66440C35DDFC12F0672DD664B615598"),
			std::string("3DB105C7673ADA8C689BA75EFAC795AD9B5CBD7848A095F5F177B0AC0B6E1690"),
			// S761
			std::string("344CA5E25F6DA5EA95E4A695B1C5446ECA9859334532E4A9537669F012C743A2"),
			std::string("16C15126F734E51268BA916CE3B39A72E171AE79B8C2B6A68B34AB0DC5621B7E"),
			std::string("2DF903B31750990D079674136656B106A3AB2277653EFDAB150F1E39881F1907"),
			std::string("0B437617697E7149328955B7D503DFB8FCA6535AA17A379DECC5E61863201835"),
			std::string("6373E8A2AA718203EA2794D6F2CF30F00D4BA10B512DF14027C664665ED62453"),
			std::string("449255B1C5806C2330F029B682B3B863E10F26443C0894BBB03F62449480BD29"),
			std::string("73A7168C5F23CBE12066AA6520CC2827882F1AD872FD87F1E8A496E305A493D5"),
			std::string("628C55B3008B008F0A6636B548C7FFAA86F7A75F43012AA8D7F9A139F70717D6"),
			std::string("DEE4AB9F9407A62BAACCDDD0F7692EF0CBAA83CE9DF434E140EDF141BD7E3ACE"),
			std::string("9E5376ED59339C708D1F4A8894E1C701CD440E5B0C0D7ED3F5A81A086DD47EFC"),

			std::string("BA921CF057BA9900BB02B2F1972635344F35D7C8847E0A21BE3DB87324CF1938"),
			std::string("9496D01589DDA3EDA8F38B81E9056134593C5A70519ABDD9AF528D0D559D9DE3"),
			std::string("07FB797009D5B0AE7FB3930AB56629BA7AC877B0BD1E78DABBACC38F2FF10D48"),
			std::string("FBA7D0656C7DA27DE22F51641BFAF384C681C124D1C33F3EF8D5F6537E1AF762"),
			std::string("762C26D19D73E3550B0A09F295BCD54E7C8969FC3DC3455B8577E5684D9D76D7"),
			std::string("00181C9213E0B2DD248C5F4BAEA9E1651DFA6F0C69148BE7B4312DAE28B5B9AC"),
			std::string("45587A384942694FC34A5E655DFBF5D2D0BF77EA29EE314EA0AB33F33A61C325"),
			std::string("AEB6C62FE939B9601E11C2A429AE18C55CCB76B476A5B0FD4794663FD8CB9B22"),
			std::string("E49B3810A6414F96DD5063524AD4E576E8DBBD5A21249D866B6FD4E3678CD127"),
			std::string("391D6845AE624AE7334B7106CEDD7F6D2BCABC4E3E7D9D5BF50B4D27807D5129")
		};
		HexConverter::Decode(sskexp, 30, m_sskexp);

		const std::vector<std::string> rngseed =
		{
			std::string("061550234D158C5EC95595FE04EF7A25767F2E24CC2BC479D09D86DC9ABCFDE7056A8C266F9EF97ED08541DBD2E1FFA1"),
			std::string("D81C4D8D734FCBFBEADE3D3F8A039FAA2A2C9957E835AD55B22E75BF57BB556AC81ADDE6AEEB4A5A875C3BFCADFA958F"),
			std::string("64335BF29E5DE62842C941766BA129B0643B5E7121CA26CFC190EC7DC3543830557FDD5C03CF123A456D48EFEA43C868"),
			std::string("225D5CE2CEAC61930A07503FB59F7C2F936A3E075481DA3CA299A80F8C5DF9223A073E7B90E02EBF98CA2227EBA38C1A"),
			std::string("EDC76E7C1523E3862552133FEA4D2AB05C69FB54A9354F0846456A2A407E071DF4650EC0E0A5666A52CD09462DBC51F9"),
			std::string("AA93649193C2C5985ACF8F9E6AC50C36AE16A2526D7C684F7A3BB4ABCD7B6FF790E82BADCE89BC7380D66251F97AAAAA"),
			std::string("2E014DC7C2696B9F6D4AF555CBA4B931B34863FF60E2341D4FDFE472FEF2FE2C33E0813FC5CAFDE4E30277FE522A9049"),
			std::string("AEFB28FDD34E0AB403A703B535296E3A545CA479C1D8148E2D501B3C8DD8B1034BD986F13F1A7B4671BE769359FD2AAB"),
			std::string("CBE5161E8DE02DDA7DE204AEB0FBB4CA81344BA8C30FE357A4664E5D2988A03B64184D7DC69F8D367550E5FEA0876D41"),
			std::string("B4663A7A9883386A2AE4CBD93787E247BF26087E3826D1B8DBEB679E49C0BB286E114F0E9F42F61F63DEC42B4F974846")
		};
		HexConverter::Decode(rngseed, 10, m_rngseed);

		/*lint -restore */
	}

	void NTRUPrimeTest::OnProgress(const std::string &Data)
	{
		m_progressEvent(Data);
	}
}
