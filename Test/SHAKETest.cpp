#include "SHAKETest.h"
#include "../CEX/Keccak.h"
#include "../CEX/IDigest.h"
#include "../CEX/IntegerTools.h"
#include "../CEX/MemoryTools.h"
#include "../CEX/SecureRandom.h"
#include "../CEX/SHAKE.h"
#include "../CEX/SymmetricKeySize.h"

namespace Test
{
	using Exception::CryptoKdfException;
	using Digest::Keccak;
	using Tools::IntegerTools;
	using Tools::MemoryTools;
	using Prng::SecureRandom;
	using Kdf::SHAKE;
	using Cipher::SymmetricKeySize;

	const std::string SHAKETest::CLASSNAME = "SHAKETest";
	const std::string SHAKETest::DESCRIPTION = "SHAKE XOF Known Answer Tests";
	const std::string SHAKETest::SUCCESS = "SUCCESS! All SHAKE tests have executed succesfully.";

	SHAKETest::SHAKETest()
		:
		m_expected(0),
		m_key(0),
		m_progressEvent()
	{
		Initialize();
	}

	SHAKETest::~SHAKETest()
	{
		IntegerTools::Clear(m_expected);
		IntegerTools::Clear(m_key);
	}

	const std::string SHAKETest::Description()
	{
		return DESCRIPTION;
	}

	TestEventHandler &SHAKETest::Progress()
	{
		return m_progressEvent;
	}

	std::string SHAKETest::Run()
	{
		try
		{
			Ancillary();
			OnProgress(std::string("SHAKETest: Passed Keccak component functions tests.."));

			Exception();
			OnProgress(std::string("SHAKETest: Passed SHAKE exception handling tests.."));

			SHAKE* gen128 = new SHAKE(ShakeModes::SHAKE128);
			Kat(gen128, m_key[0], m_expected[0]);
			Kat(gen128, m_key[1], m_expected[1]);
			Kat(gen128, m_key[2], m_expected[2]);
			Kat(gen128, m_key[3], m_expected[3]);
			Kat(gen128, m_key[4], m_expected[4]);
			OnProgress(std::string("SHAKETest: Passed SHAKE128 KAT tests.."));

			SHAKE* gen256 = new SHAKE(ShakeModes::SHAKE256);
			Kat(gen256, m_key[5], m_expected[5]);
			Kat(gen256, m_key[6], m_expected[6]);
			Kat(gen256, m_key[7], m_expected[7]);
			Kat(gen256, m_key[8], m_expected[8]);
			Kat(gen256, m_key[9], m_expected[9]);
			OnProgress(std::string("SHAKETest: Passed SHAKE256 KAT tests.."));

			SHAKE* gen512 = new SHAKE(ShakeModes::SHAKE512);
			Kat(gen512, m_key[10], m_expected[10]);
			Kat(gen512, m_key[11], m_expected[11]);
			Kat(gen512, m_key[12], m_expected[12]);
			Kat(gen512, m_key[13], m_expected[13]);
			Kat(gen512, m_key[14], m_expected[14]);
			OnProgress(std::string("SHAKETest: Passed SHAKE512 KAT tests.."));

			OnProgress(std::string("SHAKETest: Testing the custom cSHAKE implementations.."));
			Kat(gen128, m_key[0], m_custom, m_expected[20]);
			Kat(gen128, m_key[20], m_custom, m_expected[21]);
			OnProgress(std::string("SHAKETest: Passed SP800-185 cSHAKE-128 KAT tests.."));

			Kat(gen256, m_key[5], m_custom, m_expected[22]);
			Kat(gen256, m_key[20], m_custom, m_expected[23]);
			OnProgress(std::string("SHAKETest: Passed SP800-185 cSHAKE-256 KAT tests.."));

			Kat(gen512, m_key[10], m_custom, m_expected[24]);
			OnProgress(std::string("SHAKETest: Passed customized cSHAKE-512 KAT test.."));

			Params(gen128);
			Params(gen256);
			Params(gen512);
			OnProgress(std::string("SHAKETest: Passed initialization tests.."));

			Stress(gen128);
			Stress(gen256);
			Stress(gen512);
			OnProgress(std::string("SHAKETest: Passed stress tests.."));

			delete gen128;
			delete gen256;
			delete gen512;

			return SUCCESS;
		}
		catch (TestException const &ex)
		{
			throw TestException(CLASSNAME, ex.Function(), ex.Origin(), ex.Message());
		}
		catch (CryptoKdfException &ex)
		{
			throw TestException(CLASSNAME, ex.Location() + std::string("::") + ex.Origin(), ex.Name(), ex.Message());
		}
		catch (CryptoException &ex)
		{
			throw TestException(CLASSNAME, ex.Location() + std::string("::") + ex.Origin(), ex.Name(), ex.Message());
		}
		catch (std::exception const &ex)
		{
			throw TestException(CLASSNAME, std::string("Unknown Origin"), std::string(ex.what()));
		}
	}

	void SHAKETest::Ancillary()
	{
		// SHAKE-128
		const size_t BLK128 = ((m_expected[0].size() % Keccak::KECCAK128_RATE_SIZE) != 0) ? (m_expected[0].size() / Keccak::KECCAK128_RATE_SIZE) + 1 : 
			(m_expected[0].size() / Keccak::KECCAK128_RATE_SIZE);

		// test the absorb/squeeze api
		std::vector<uint8_t> otp(BLK128 * Keccak::KECCAK128_RATE_SIZE);
		std::array<uint64_t, 25> state = { 0 };
		Keccak::Absorb(m_key[0], 0, m_key[0].size(), Keccak::KECCAK128_RATE_SIZE, Keccak::KECCAK_SHAKE_DOMAIN, state);
		Keccak::Squeeze(state, otp, 0, BLK128, Keccak::KECCAK128_RATE_SIZE);

		if (IntegerTools::Compare(m_expected[0], 0, otp, 0, m_expected[0].size()) == false)
		{
			throw TestException(std::string("Exception"), std::string("SHAKE-128"), std::string("Exception handling failure! -SA1"));
		}

		// test the stand-alone XOF api
		MemoryTools::Clear(otp, 0, otp.size());
		otp.resize(m_expected[0].size());
		Keccak::XOFP1600(m_key[0], 0, m_key[0].size(), otp, 0, otp.size(), Keccak::KECCAK128_RATE_SIZE);

		if (otp != m_expected[0])
		{
			throw TestException(std::string("Exception"), std::string("SHAKE-128"), std::string("Exception handling failure! -SA2"));
		}

		// SHAKE-256
		const size_t BLK256 = ((m_expected[5].size() % Keccak::KECCAK256_RATE_SIZE) != 0) ? (m_expected[5].size() / Keccak::KECCAK256_RATE_SIZE) + 1 :
			(m_expected[5].size() / Keccak::KECCAK256_RATE_SIZE);

		MemoryTools::Clear(state, 0, state.size() * sizeof(uint64_t));
		MemoryTools::Clear(otp, 0, otp.size());
		otp.resize(BLK256 * Keccak::KECCAK256_RATE_SIZE);
		Keccak::Absorb(m_key[5], 0, m_key[5].size(), Keccak::KECCAK256_RATE_SIZE, Keccak::KECCAK_SHAKE_DOMAIN, state);
		Keccak::Squeeze(state, otp, 0, BLK256, Keccak::KECCAK256_RATE_SIZE);

		if (IntegerTools::Compare(m_expected[5], 0, otp, 0, m_expected[5].size()) == false)
		{
			throw TestException(std::string("Exception"), std::string("SHAKE-256"), std::string("Exception handling failure! -SA3"));
		}

		// test the SHAKE-256 XOF api
		MemoryTools::Clear(otp, 0, otp.size());
		otp.resize(m_expected[5].size());
		Keccak::XOFP1600(m_key[5], 0, m_key[5].size(), otp, 0, otp.size(), Keccak::KECCAK256_RATE_SIZE);

		if (otp != m_expected[5])
		{
			throw TestException(std::string("Exception"), std::string("SHAKE-256"), std::string("Exception handling failure! -SA4"));
		}

		// SHAKE-512
		const size_t BLK512 = ((m_expected[10].size() % Keccak::KECCAK512_RATE_SIZE) != 0) ? (m_expected[10].size() / Keccak::KECCAK512_RATE_SIZE) + 1 :
			(m_expected[10].size() / Keccak::KECCAK512_RATE_SIZE);

		MemoryTools::Clear(state, 0, state.size() * sizeof(uint64_t));
		MemoryTools::Clear(otp, 0, otp.size());
		otp.resize(BLK512 * Keccak::KECCAK512_RATE_SIZE);
		Keccak::Absorb(m_key[10], 0, m_key[10].size(), Keccak::KECCAK512_RATE_SIZE, Keccak::KECCAK_SHAKE_DOMAIN, state);
		Keccak::Squeeze(state, otp, 0, BLK512, Keccak::KECCAK512_RATE_SIZE);

		if (IntegerTools::Compare(m_expected[10], 0, otp, 0, m_expected[10].size()) == false)
		{
			throw TestException(std::string("Exception"), std::string("SHAKE-512"), std::string("Exception handling failure! -SA5"));
		}

		// test the SHAKE-512 XOF api
		MemoryTools::Clear(otp, 0, otp.size());
		otp.resize(m_expected[10].size());
		Keccak::XOFP1600(m_key[10], 0, m_key[10].size(), otp, 0, otp.size(), Keccak::KECCAK512_RATE_SIZE);

		if (otp != m_expected[10])
		{
			throw TestException(std::string("Exception"), std::string("SHAKE-512"), std::string("Exception handling failure! -SA6"));
		}

		// cSHAKE compact-implementation tests //

		const std::vector<uint8_t> ZERO(0, 0x00);

		MemoryTools::Clear(otp, 0, otp.size());
		otp.resize(m_expected[20].size());
		Keccak::CXOFP1600(m_key[0], m_custom, ZERO, otp, 0, otp.size(), Keccak::KECCAK128_RATE_SIZE);

		if (otp != m_expected[20])
		{
			throw TestException(std::string("Exception"), std::string("cSHAKE-128"), std::string("Exception handling failure! -SA9"));
		}

		// cSHAKE-256
		MemoryTools::Clear(otp, 0, otp.size());
		otp.resize(m_expected[22].size());
		Keccak::CXOFP1600(m_key[5], m_custom, ZERO, otp, 0, otp.size(), Keccak::KECCAK256_RATE_SIZE);

		if (otp != m_expected[22])
		{
			throw TestException(std::string("Exception"), std::string("cSHAKE-256"), std::string("Exception handling failure! -SA10"));
		}

		// cSHAKE-512
		MemoryTools::Clear(otp, 0, otp.size());
		otp.resize(m_expected[24].size());
		Keccak::CXOFP1600(m_key[10], m_custom, ZERO, otp, 0, otp.size(), Keccak::KECCAK512_RATE_SIZE);

		if (otp != m_expected[24])
		{
			throw TestException(std::string("Exception"), std::string("cSHAKE-512"), std::string("Exception handling failure! -SA11"));
		}
	}

	void SHAKETest::Exception()
	{
		// test constructor
		try
		{
			// invalid digest choice
			SHAKE gen(ShakeModes::None);

			throw TestException(std::string("Exception"), gen.Name(), std::string("Exception handling failure! -SE1"));
		}
		catch (CryptoKdfException const &)
		{
		}
		catch (TestException const &)
		{
			throw;
		}

		// test initialization
		try
		{
			SHAKE gen(ShakeModes::SHAKE128);
			// invalid key size
			std::vector<uint8_t> key(1);
			gen.Initialize(key);

			throw TestException(std::string("Exception"), gen.Name(), std::string("Exception handling failure! -SE2"));
		}
		catch (CryptoKdfException const &)
		{
		}
		catch (TestException const &)
		{
			throw;
		}

		// test generator state -1
		try
		{
			SHAKE gen(ShakeModes::SHAKE128);
			std::vector<uint8_t> otp(32);
			// generator was not initialized
			gen.Generate(otp);

			throw TestException(std::string("Exception"), gen.Name(), std::string("Exception handling failure! -SE3"));
		}
		catch (CryptoKdfException const &)
		{
		}
		catch (TestException const &)
		{
			throw;
		}

		// test generator state -2
		try
		{
			SHAKE gen(ShakeModes::SHAKE128);
			Cipher::SymmetricKeySize ks = gen.LegalKeySizes()[0];
			std::vector<uint8_t> key(ks.KeySize());
			std::vector<uint8_t> otp(32);

			gen.Initialize(key);
			// array too small
			gen.Generate(otp, 0, otp.size() + 1);

			throw TestException(std::string("Exception"), gen.Name(), std::string("Exception handling failure! -SE4"));
		}
		catch (CryptoKdfException const &)
		{
		}
		catch (TestException const &)
		{
			throw;
		}
	}

	void SHAKETest::Kat(IKdf* Generator, std::vector<uint8_t> &Key, std::vector<uint8_t> &Expected)
	{
		std::vector<uint8_t> otp(Expected.size());
		SymmetricKey kp(Key);

		Generator->Initialize(kp);
		Generator->Generate(otp);

		if (otp != Expected)
		{
			throw TestException(std::string("Kat"), Generator->Name(), std::string("Output does not match the known answer! -SK1"));
		}
	}

	void SHAKETest::Kat(IKdf* Generator, std::vector<uint8_t> &Key, std::vector<uint8_t> &Custom, std::vector<uint8_t> &Expected)
	{
		std::vector<uint8_t> otp(Expected.size());
		SymmetricKey kp(Key, Custom);

		Generator->Initialize(kp);
		Generator->Generate(otp);

		if (otp != Expected)
		{
			throw TestException(std::string("Kat"), Generator->Name(), std::string("Output does not match the known answer! -SK1"));
		}
	}

	void SHAKETest::Initialize()
	{
		/*lint -save -e417 */
		/*lint -save -e146 */
		HexConverter::Decode(std::string("456D61696C205369676E6174757265"), m_custom);

		const std::vector<std::string> keys =
		{
			// selected official shake128 vectors from: https://raw.githubusercontent.com/gvanas/KeccakCodePackage/master/TestVectors/ShortMsgKAT_SHAKE128.txt
			std::string("52A608AB21CCDD8A4457A57EDE782176"),
			std::string("A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3"
				"A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3"
				"A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3"
				"A3A3A3A3A3A3A3A3"),
			std::string("84E950051876050DC851FBD99E6247B8"),
			std::string("A6FE00064257AA318B621C5EB311D32BB8004C2FA1A969D205D71762CC5D2E633907992629D1B69D9557FF6D5E8DEB454AB00F6E497C89A4FEA09E257A6FA207"
				"4BD818CEB5981B3E3FAEFD6E720F2D1EDD9C5E4A5C51E5009ABF636ED5BCA53FE159C8287014A1BD904F5C8A7501625F79AC81EB618F478CE21CAE6664ACFFB3"
				"0572F059E1AD0FC2912264E8F1CA52AF26C8BF78E09D75F3DD9FC734AFA8770ABE0BD78C90CC2FF448105FB16DD2C5B7EDD8611A62E537DB9331F5023E16D6EC"
				"150CC6E706D7C7FCBFFF930C7281831FD5C4AFF86ECE57ED0DB882F59A5FE403105D0592CA38A081FED84922873F538EE774F13B8CC09BD0521DB4374AEC69F4"
				"BAE6DCB66455822C0B84C91A3474FFAC2AD06F0A4423CD2C6A49D4F0D6242D6A1890937B5D9835A5F0EA5B1D01884D22A6C1718E1F60B3AB5E232947C76EF70B"
				"344171083C688093B5F1475377E3069863"),
			std::string("9202E884FC1FC78B3BA2B78FF17B78A1F9E7E87840EF7713D732DBA046E5059D2218533DE23B070DEEE0F8D7F9C387C69107D5CCF4C2334126BCDACD4074DD87"
				"0B645B5ECD86F9B963178F5A909B22889521136D02C895BDCB8264989E18B5B2746F68B1670985D6C3CEE6E05F0D312D2EBE0A23110A86CEEF0DE2CA08DA7564"
				"86BFE3FC55CB94AE358E64310E209CFE836522B5C98EECBDBAE3BA2B25C005E669DE320842D40C87E2DE711444DC4B43BD9EC3EDD45EB1D3538E56839ED54D80"
				"4454BF9DD42DD7AAF2467552A94A274403F15591D782BB55E3961C9A1A1E35793FA7F182B3DDDB5F8C4ED8B3E67116487EE7406A7D00F48E9181763842A5A61B"
				"84612F8188EC02EDD87F03FFA35A01995507EC406BE242C586D9CB24BE7186AC3809E360FB63329EFF605CFE870BD17DB1D9C1DB4C308F41E9258327358ABF75"
				"862874E8B34955B8297A4C783B8E6C3DBAE62802C6F0C24BE3EE060950F937BE94454AE159A652847D533C3467EBBC2197B5877F812CC32B9CBBBB92B6C5D8CF"
				"8AE8CD139483114A247592FBB228A87071CF471826EB7A293B140C890FF688EF919A65460DE77A524668B895C44F17746FBAD1965D36CF8DE98160B805953167"
				"D1E17A416CDA75E309B214CA4667F373BA008CC0CD14AA9ECD8B20E53EA8BA80714874CD5864EA4698DD1062E07923B67928DF601F8DF3A510B9B2D9623A0B7F"
				"9954BBB2798EC1C419711224398C8F85D5BB343CFBA992EAD9947F5C1A500CAF738FB7B8785FE2A3B5F484D9FAA81F28F640F21E07716FB551A3EF360EF4A557"
				"2480D0A6FDE0352B93F0CD49CAD5BBE6033F80CCEEEC724E9F6E6B2EE52DBEBED7AF6F46AF17A3A6DCEC553C521C4B082541480E562284FCED7D590D47043F2D"
				"B2A5FA5E370E125AB771847A3A84B7D683CDB1AEE81C8B096059229BDE7F10ECDDE9DBB73CCD6B904D06C2CA2916E798466B23724BE170BB22892FA04FA91943"
				"81037819675A9790C53377F6C7D9C39695A3062427791C5B5B95E7E44587437AC67C3B4C60BF7DA248800BC4BDD5341899FEC38A26ED76303206B12E662374D8"
				"D3DB8B17CE04040EFE76E6FDB31220657903C06DEE446584D062F7485A8495A6D1A8CF435A2F161B0E9C7069509971C65E3B66942786D39D5D3420F8CAB28F2D"
				"E76C7198AB4A9A13A17A12CF3D710D83702C1DC97ABCA7C4000194075EB648B23EADD8DE6A5C773CDE9932F822A2DEE4D6604ED28EEDC941E153BA3DBD97AA80"
				"FDF66CDD3E6E97DFEE803AADA535CA30B95F5F780D21205C29B1FC61905D9CDE4DCC955DD087E143F8B790B47131BBB140AFBA839C60965D00A4C13D7E100513"
				"56B9BB25C7AF3DB225C79ED52C9E98AD94DAC5BBE5B3128B8DB3729730B9CF683F4446FECCEE93729D37CADA7F84496DDC68EAE890217D30F96675384D60E125"
				"31F69EB0874DCBCC878F7E8911ECB53941DF90D145B3BD926B4533E87E0B239253552B039FD3CE080B5821AC8BDDC659EBC91E3FAB70BBF90CD9146E6BC47DF6"
				"CEEB56BFBD89826E53191B099460631401ADFEFA6A605FAF04A98194BB92D79BC94085AB8875D046845AD369D57C74B3AC1497CA2B8B92FB7A3DE020177E19C7"
				"6DDA2190A9A1A0D7C9A4B393F539E27E1385517796FA3A24961E9ADB268E2BC3E2439336C715DB6A487D22519D9F93BD5F8894C852B4407382D3188D91CCF5D7"
				"4F0342658BD867472970886975B770B8B7A5C88608C18D3063E4C1FEFF40604ADCA095E59CF12EB695024EA4248861B7446555795F2A08A364DAFCF519F15266"
				"B3A4F67DA46B17FFB4BDDACA531A4F012D4FA46900F69813AA3C333C87E7B471F997CCF7484B0969AD2895A3A97620DF9BEC1B1E922D27CA6092CD99F02A6FB4"
				"D9FF7E19329BEE3DA9CBE7F6CFA3BE99B6C2235FBED89C0EAC6532D5FCC36977796676AC0A63ADC4CF2F398D6CA90F77A55B25F62CFDDE28B63BC9B854B98C02"
				"01531B7777A92E4348DBF12E2991FDC0913F87A983A7D760A79FFC09A014BF9C9A4FD544227759053B5779A2AE626FBEA1F4B3416BDB6EFDA716329287DCE98E"
				"6CE10CD9B3D41651D12C37B1A2244CB7FE040F868EA38B49DD2AD419B21AF4219E9128FFD1C94D6E31E19522AEE07EF4CFF7053F9106168A72624867C9D6C79A"
				"58E7917E245CE6A585FEF9BF799DECBD3D53FB361F0DF8098E46F74473164A44C46CB01E5597C93EF20CCD4EAC637E5A70A25B31DEBE170E575F497758E46566"
				"07A7EBA70C82DE81A2927898EE3A1C128F6B8CF976235CE0F834A7CA214700474C20ABE0F0240EB5BD186265E82BAE2EC337F6569044AFC9974E770376480330"
				"B9605992AA853F246A26F37D413D1CF6338D010FD427F90F5D3322EBFEED566976EE5B85E2AD5A14D24593A7A2794EB208F515EEE9D620FB716D114A6240E23A"
				"AC521B813FA548CE1DFCAAADB3E52DAA69F79AB978590ED5FB84ABE84A498DEB8315FF4E6974EF9A72D4A0551B8C9F267F1CF83928B6A9E525FE578C5C0F40C3"
				"22BE71B3092239BFF954DD6883738D6D71EB9736A2F7DB7215657F00439AE40BB2D5D87AC7B80D87DC04C9AD92A4E0C868EDE0788D248BC6F3408A0AA5F25F0C"
				"5AE39C694A3D5238406CCDEEF1267E7F8CA839C69243A127E818E0732B209B0B436F24493BB9F21B4F154FF1470151DA04A60BE9595E04DE1C74E9027C2B7E53"
				"9401DAE14134D4783186B97F3D3D4020F96FBFAA897C9E33B6DC0C81411BF22B762125FB05B7E0970E4771607BE3329B9289BBCFCAA6566DDED8B4B621F8DEDA"
				"11586D5D2E49FEBF0DE1E15CA8FB1191F87E6920C6E314D6BEF1466BC5CB29A98C2D1BD065F3163A56DB6F3B6C8BC44B52D63067223BC0B47BAE2B66D49CBDE0"
				"1029951C52BC104E12BD85C4719D3311C917776A89B643504098CB70F77181C7C4D244099CACD44469108AC05C38462B85CBA8F2A15D83F233358E50D6545DA5"
				"D1B3905FECCB4B64825AE6F8D865E5E0AD792AC7123769E27C10DDD0184C39C45E51E2E5E9225BF5862600318B2BF8796AAA65B1854CDD6744AE1EB66561FD6A"
				"9436A0643CB8ED419CF942361D92673EE3E5C178A2A5C8CAB399BBCB679C92E09BE934A58C95EA8EED5D13CE37A21A7741B2A6E310491054F0581AD7C304DE6E"
				"9AF2046D82C23825A1D9DBC08164F96CAB997CBC78409F4A2473A5A224A2CA5BB9DA7A87C646C14EDFF603D5A2DFED654A23ABC981935BF77672C2F3307C3EF1"
				"2227FCBAFF296B50CF3AF1D5431BDCA945D79BD3D4492EA20FDEDB938F9D2376FA64F4CDD57420759A2F0E880B21B081C53EB4A1186AFF92163F574BEA0A5F33"
				"6C16C989F22EC703685DC2B5A3F84F35F2DE5FFDF6FFB510B41B9EE1E9CCDC709DC7E3B6FB5F4843604B7626B2A8A30DF34202AD160F3A6411FC181D33EC8075"
				"B8FEAA1C9B0F8B7DAB8190A1E13A9250F1EF077A1FA275D654692DC971723589E3448682784777F970877AEFD8B50648136FD42CBAC04EAEA6EB45AB4A64E2F5"
				"4620DFB13A0EF6FED8E69AD83E21E63B8248D38B8E72AD332E09C88D67CC6F020B1A1D728A6DF0D50B255A23BB871A7265056A5E44BF7AAE154B1E356FB1C3F5"
				"57BAA88B106B4BC730CC219AF9EE8935E52B036F83B09D678239AF6B0B1CC8195589E8C47310F01A706356039D5E1DCC2A440584F44CFFA69E5CE3F9E31465B5"
				"2A0E46E75B64C716F273632752DFBD7E5BD8D8663E9B86B3903B23A69EA1821001D128BA7270B805DF83AFCEBE7A5194A16DE4DD0AA51BD5815ED539E5CB0873"
				"005BF7075D3BAC2D5E1CA2BF8936C256238D90B10073A756994E637B5F9BDD264F331C94C7CD89D898C5A4C45C1CF60C0ABF46A9C70C107CFF923334B518EA71"
				"17E1FD29562F394CB4061DA3DF32D6FE7D8C6E8E08784090DCB2AF2B8E4B179C80EE0490B268A2D1DB677525B9824A74A57A6E286AC01DD957373D2A933A4DEE"
				"B1E198908480AEB13571141292143BB5A913AF3F96EB91A199A847F76CEF72B0D34220F074804432E9AB633214EE8F0AB2DF999B3301832ECA8D345BC0726F2B"
				"0D9A0679296F4B9E209EC84DE51A30BBE8659503EA0BDACA106F6C1E37C92DA48870B1F34C55AD3B01D0AC2AADA00410722D0941630F80BB96D457087AFE9366"
				"6B4C8926843B5152B5CB78921586F55079BF5E1B45185C4982475DE1311988B8DFB6F6D97A281F2A6317924DC4D6EAC524A4FD5A392B56BEFD4DE6700420F6E1"
				"0C3760D6D624FF0D343A64236498CAB59C634CC6E65256602E705A7E991DC42A19"),
			// selected official shake256 vectors from: https://raw.githubusercontent.com/gvanas/KeccakCodePackage/master/TestVectors/ShortMsgKAT_SHAKE256.txt
			std::string("9F2FCC7C90DE090D6B87CD7E9718C1EA6CB21118FC2D5DE9F97E5DB6AC1E9C10"),
			std::string("A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3"
				"A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3"
				"A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3"
				"A3A3A3A3A3A3A3A3"),
			std::string("104FEFE89F08D15D36A2233F42A7DEFA917C5AD2642E06CAC56D5CC51AD914ECFB7D984F4199B9CF5FA5A03BF69207B9A353A9681C9CF6437BEA0C49D9C3E3DB"
				"1F3FC76519C70C40CC1DFDD70A9C150943C272CF9EEB861F485F10100C8F4A3E259C6470501932782512225BA64D70B219CF9D5013A21D25D6D65062DCC6B3DE"
				"B49D58B90D18933F118DF70FF42C807CCC851233A34A221ECA56B38971EF858475488988794A975D3894633A19C1AE2F05E9B9C0756AFFD3CFE823CCF29228F6"
				"0FA7E025BC39A79943325126409460926B057A3FB28A1B098B938872883804FD2BC245D7FD6D29BCDA6CA6198F2EFF6EA7E03EF78133DE8BA65FC8C45A688160"
				"719FA1E7646D878EA44C4B5C2E16F48B"),
			std::string("E17D557607AE1B5BF061F3403EC424DF0E8D5BBE208EF460388A75BCC3485BEEBEE51A2DD46E5FFDC6AF98A51045B6E4CAFB31E0CC534D5F15629D396EE1C50E"
				"4A828334F180F1F3DD7A04F5648159F8987031C66C7BBA67180B9095BECA83704DF99B73A60A59A7FD6B401682A09483419462584731C0E0072E56B6FC281D7E"
				"8FF567D23A35207FEE2953F2B2C9EFED8E10CC7FA79BE932AB72F8866F261C9ED71CF13AF728CDE5775D45703C24F39E448C7721D2E1BCC5CC807DEC61E9073A"
				"EE164091230CE84062AF1F7767DA27FF2EAF6C27112CC10232FFEDCF189C66B99D8C5CC10708F9F875C6E8F17D1314761322B27AACA4814FA4985019DD65C283"
				"AA264EB0EB458975794BA8C5C4F6406CBA8D5100EB708315EBF3AFB1F86CA100DD8B1D4816EA1F1E35E567DB85AC354AEC9652A316B94FBDCFB7117FB1DA8E98"
				"0064D16FD220445D733D2E1B075C7B7671E8BC4A74A66EAD188D7F6B50D70EB3D958730F650F7F99F9FB046D942F985A112997DD4E60674F8E1C005D1C8AABB9"
				"3210090F18DE583B90C6F2B9724D165C9402EB43EC0EC20AF90D9C3D5E1CEC12D1339E5733B657A90046FFE7EADD7DE6C11AC16696D9084520075BF35FB55926"
				"7E6A37CFFEBE054C112433DF4408535F611A202D94E9C06ACCB34667647B7B5D035DDE5FC11FE98C8B089689C8F5222F3CA911802D6572E0C5B86482B899D920"
				"27B39AEFC3008CD2359931CDBECD71BD1A709B47AB75A70FD3C0BE2AA235FCD5B11574674D8A7484D8800B946DB7C973C316C66A5443E55FBE705A4869786AE6"
				"6A2A72AFA7E42B0C3C652CC41EDCB1B8FE449AD271F4B7384D7242C55689ADB91A9B9FAF193839D029EE9D471963B1F495A2206549B3A2024A6E7E87B1904DB8"
				"890F0050EBAB243A67C66503A67551904ED75F0C26A630257B0B1478C2B7D0497E2F9F78646776B0BD938CE20D3A1AF2F28C5FB04EF5E809A8F20E7FD024C0D6"
				"C2A38310CD94B69CF5FE1BCB95D99383496829370AC952169BCB738325FFA4C61E12B4016E596D65D5AE19A5877B45AB1A14C48BA24AF7B51B3D4C6E07710581"
				"57243B318FDF2273264C8E5A2B47B6D32F3738925E9F5E4CEFF0A027BFA26A6F38821F8A784E5D2EAF7F83D1C96670614E7A8E3686F11045E08D779694B95BF8"
				"88D468F371CDA7FE3AF0FEF2A9FFFBBF4085CD5D61679306B6BCDAA3D0DE60840EC11E53C184864B8D460AA5133BDD53CCFFFDF1382A71F93924CF36B93B027B"
				"93F24A94B19C847D722AACD24E42A087BC9127D953613184306E613799F5C845DF0FF49D893D29FCAE44EE61A33BCBC2D7E252FDFA355C116541958EB6373B4A"
				"BABF2256918EFC300C3BD73A5A4EE76BE49B864575CE79079E4675235927E1F2ECAADEA710B8858253B86F46BBA57BECAC63CB990B5310CEA42508DEC9ED45A6"
				"3C792F7850E24C584A62BF6B0D650FACF7E32AE106ECAACE3F8556A850B2ECCC74D41EB19735DA1BBBE2CE929AB92C138CC2AA05ACC3CE6E360E6867349E60CE"
				"5A62B13A2ED9B6"),
			std::string("7ABAA12EC2A7347674E444140AE0FB659D08E1C66DECD8D6EAE925FA451D65F3C0308E29446B8ED3"),
			// shake512 new implementation vectors
			std::string("9F2FCC7C90DE090D6B87CD7E9718C1EA6CB21118FC2D5DE9F97E5DB6AC1E9C109F2FCC7C90DE090D6B87CD7E9718C1EA6CB21118FC2D5DE9F97E5DB6"
				"AC1E9C10"),
			std::string("A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3"
				"A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3"
				"A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3"
				"A3A3A3A3A3A3A3A3"),
			std::string("104FEFE89F08D15D36A2233F42A7DEFA917C5AD2642E06CAC56D5CC51AD914ECFB7D984F4199B9CF5FA5A03BF69207B9A353A9681C9CF6437BEA0C49D9C3E3DB"
				"1F3FC76519C70C40CC1DFDD70A9C150943C272CF9EEB861F485F10100C8F4A3E259C6470501932782512225BA64D70B219CF9D5013A21D25D6D65062DCC6B3DE"
				"B49D58B90D18933F118DF70FF42C807CCC851233A34A221ECA56B38971EF858475488988794A975D3894633A19C1AE2F05E9B9C0756AFFD3CFE823CCF29228F6"
				"0FA7E025BC39A79943325126409460926B057A3FB28A1B098B938872883804FD2BC245D7FD6D29BCDA6CA6198F2EFF6EA7E03EF78133DE8BA65FC8C45A688160"
				"719FA1E7646D878EA44C4B5C2E16F48B"),
			std::string("E17D557607AE1B5BF061F3403EC424DF0E8D5BBE208EF460388A75BCC3485BEEBEE51A2DD46E5FFDC6AF98A51045B6E4CAFB31E0CC534D5F15629D396EE1C50E"
				"4A828334F180F1F3DD7A04F5648159F8987031C66C7BBA67180B9095BECA83704DF99B73A60A59A7FD6B401682A09483419462584731C0E0072E56B6FC281D7E"
				"8FF567D23A35207FEE2953F2B2C9EFED8E10CC7FA79BE932AB72F8866F261C9ED71CF13AF728CDE5775D45703C24F39E448C7721D2E1BCC5CC807DEC61E9073A"
				"EE164091230CE84062AF1F7767DA27FF2EAF6C27112CC10232FFEDCF189C66B99D8C5CC10708F9F875C6E8F17D1314761322B27AACA4814FA4985019DD65C283"
				"AA264EB0EB458975794BA8C5C4F6406CBA8D5100EB708315EBF3AFB1F86CA100DD8B1D4816EA1F1E35E567DB85AC354AEC9652A316B94FBDCFB7117FB1DA8E98"
				"0064D16FD220445D733D2E1B075C7B7671E8BC4A74A66EAD188D7F6B50D70EB3D958730F650F7F99F9FB046D942F985A112997DD4E60674F8E1C005D1C8AABB9"
				"3210090F18DE583B90C6F2B9724D165C9402EB43EC0EC20AF90D9C3D5E1CEC12D1339E5733B657A90046FFE7EADD7DE6C11AC16696D9084520075BF35FB55926"
				"7E6A37CFFEBE054C112433DF4408535F611A202D94E9C06ACCB34667647B7B5D035DDE5FC11FE98C8B089689C8F5222F3CA911802D6572E0C5B86482B899D920"
				"27B39AEFC3008CD2359931CDBECD71BD1A709B47AB75A70FD3C0BE2AA235FCD5B11574674D8A7484D8800B946DB7C973C316C66A5443E55FBE705A4869786AE6"
				"6A2A72AFA7E42B0C3C652CC41EDCB1B8FE449AD271F4B7384D7242C55689ADB91A9B9FAF193839D029EE9D471963B1F495A2206549B3A2024A6E7E87B1904DB8"
				"890F0050EBAB243A67C66503A67551904ED75F0C26A630257B0B1478C2B7D0497E2F9F78646776B0BD938CE20D3A1AF2F28C5FB04EF5E809A8F20E7FD024C0D6"
				"C2A38310CD94B69CF5FE1BCB95D99383496829370AC952169BCB738325FFA4C61E12B4016E596D65D5AE19A5877B45AB1A14C48BA24AF7B51B3D4C6E07710581"
				"57243B318FDF2273264C8E5A2B47B6D32F3738925E9F5E4CEFF0A027BFA26A6F38821F8A784E5D2EAF7F83D1C96670614E7A8E3686F11045E08D779694B95BF8"
				"88D468F371CDA7FE3AF0FEF2A9FFFBBF4085CD5D61679306B6BCDAA3D0DE60840EC11E53C184864B8D460AA5133BDD53CCFFFDF1382A71F93924CF36B93B027B"
				"93F24A94B19C847D722AACD24E42A087BC9127D953613184306E613799F5C845DF0FF49D893D29FCAE44EE61A33BCBC2D7E252FDFA355C116541958EB6373B4A"
				"BABF2256918EFC300C3BD73A5A4EE76BE49B864575CE79079E4675235927E1F2ECAADEA710B8858253B86F46BBA57BECAC63CB990B5310CEA42508DEC9ED45A6"
				"3C792F7850E24C584A62BF6B0D650FACF7E32AE106ECAACE3F8556A850B2ECCC74D41EB19735DA1BBBE2CE929AB92C138CC2AA05ACC3CE6E360E6867349E60CE"
				"5A62B13A2ED9B6"),
			std::string("7ABAA12EC2A7347674E444140AE0FB659D08E1C66DECD8D6EAE925FA451D65F3C0308E29446B8ED37ABAA12EC2A7347674E444140AE0FB659D08E1C66DECD8D6"
				"EAE925FA451D65F3C0308E29446B8ED3"),
			// shake1024 new implementation vectors
			std::string("9F2FCC7C90DE090D6B87CD7E9718C1EA6CB21118FC2D5DE9F97E5DB6AC1E9C109F2FCC7C90DE090D6B87CD7E9718C1EA6CB21118FC2D5DE9F97E5DB6AC1E9C10"
				"9F2FCC7C90DE090D6B87CD7E9718C1EA6CB21118FC2D5DE9F97E5DB6AC1E9C109F2FCC7C90DE090D6B87CD7E9718C1EA6CB21118FC2D5DE9F97E5DB6AC1E9C10"),
			std::string("A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3"
				"A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3"
				"A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3"
				"A3A3A3A3A3A3A3A3"),
			std::string("104FEFE89F08D15D36A2233F42A7DEFA917C5AD2642E06CAC56D5CC51AD914ECFB7D984F4199B9CF5FA5A03BF69207B9A353A9681C9CF6437BEA0C49D9C3E3DB"
				"1F3FC76519C70C40CC1DFDD70A9C150943C272CF9EEB861F485F10100C8F4A3E259C6470501932782512225BA64D70B219CF9D5013A21D25D6D65062DCC6B3DE"
				"B49D58B90D18933F118DF70FF42C807CCC851233A34A221ECA56B38971EF858475488988794A975D3894633A19C1AE2F05E9B9C0756AFFD3CFE823CCF29228F6"
				"0FA7E025BC39A79943325126409460926B057A3FB28A1B098B938872883804FD2BC245D7FD6D29BCDA6CA6198F2EFF6EA7E03EF78133DE8BA65FC8C45A688160"
				"719FA1E7646D878EA44C4B5C2E16F48B"),
			std::string("E17D557607AE1B5BF061F3403EC424DF0E8D5BBE208EF460388A75BCC3485BEEBEE51A2DD46E5FFDC6AF98A51045B6E4CAFB31E0CC534D5F15629D396EE1C50E"
				"4A828334F180F1F3DD7A04F5648159F8987031C66C7BBA67180B9095BECA83704DF99B73A60A59A7FD6B401682A09483419462584731C0E0072E56B6FC281D7E"
				"8FF567D23A35207FEE2953F2B2C9EFED8E10CC7FA79BE932AB72F8866F261C9ED71CF13AF728CDE5775D45703C24F39E448C7721D2E1BCC5CC807DEC61E9073A"
				"EE164091230CE84062AF1F7767DA27FF2EAF6C27112CC10232FFEDCF189C66B99D8C5CC10708F9F875C6E8F17D1314761322B27AACA4814FA4985019DD65C283"
				"AA264EB0EB458975794BA8C5C4F6406CBA8D5100EB708315EBF3AFB1F86CA100DD8B1D4816EA1F1E35E567DB85AC354AEC9652A316B94FBDCFB7117FB1DA8E98"
				"0064D16FD220445D733D2E1B075C7B7671E8BC4A74A66EAD188D7F6B50D70EB3D958730F650F7F99F9FB046D942F985A112997DD4E60674F8E1C005D1C8AABB9"
				"3210090F18DE583B90C6F2B9724D165C9402EB43EC0EC20AF90D9C3D5E1CEC12D1339E5733B657A90046FFE7EADD7DE6C11AC16696D9084520075BF35FB55926"
				"7E6A37CFFEBE054C112433DF4408535F611A202D94E9C06ACCB34667647B7B5D035DDE5FC11FE98C8B089689C8F5222F3CA911802D6572E0C5B86482B899D920"
				"27B39AEFC3008CD2359931CDBECD71BD1A709B47AB75A70FD3C0BE2AA235FCD5B11574674D8A7484D8800B946DB7C973C316C66A5443E55FBE705A4869786AE6"
				"6A2A72AFA7E42B0C3C652CC41EDCB1B8FE449AD271F4B7384D7242C55689ADB91A9B9FAF193839D029EE9D471963B1F495A2206549B3A2024A6E7E87B1904DB8"
				"890F0050EBAB243A67C66503A67551904ED75F0C26A630257B0B1478C2B7D0497E2F9F78646776B0BD938CE20D3A1AF2F28C5FB04EF5E809A8F20E7FD024C0D6"
				"C2A38310CD94B69CF5FE1BCB95D99383496829370AC952169BCB738325FFA4C61E12B4016E596D65D5AE19A5877B45AB1A14C48BA24AF7B51B3D4C6E07710581"
				"57243B318FDF2273264C8E5A2B47B6D32F3738925E9F5E4CEFF0A027BFA26A6F38821F8A784E5D2EAF7F83D1C96670614E7A8E3686F11045E08D779694B95BF8"
				"88D468F371CDA7FE3AF0FEF2A9FFFBBF4085CD5D61679306B6BCDAA3D0DE60840EC11E53C184864B8D460AA5133BDD53CCFFFDF1382A71F93924CF36B93B027B"
				"93F24A94B19C847D722AACD24E42A087BC9127D953613184306E613799F5C845DF0FF49D893D29FCAE44EE61A33BCBC2D7E252FDFA355C116541958EB6373B4A"
				"BABF2256918EFC300C3BD73A5A4EE76BE49B864575CE79079E4675235927E1F2ECAADEA710B8858253B86F46BBA57BECAC63CB990B5310CEA42508DEC9ED45A6"
				"3C792F7850E24C584A62BF6B0D650FACF7E32AE106ECAACE3F8556A850B2ECCC74D41EB19735DA1BBBE2CE929AB92C138CC2AA05ACC3CE6E360E6867349E60CE"
				"5A62B13A2ED9B6"),
			std::string("7ABAA12EC2A7347674E444140AE0FB659D08E1C66DECD8D6EAE925FA451D65F3C0308E29446B8ED37ABAA12EC2A7347674E444140AE0FB659D08E1C6"
				"6DECD8D6EAE925FA451D65F3C0308E29446B8ED37ABAA12EC2A7347674E444140AE0FB659D08E1C66DECD8D6EAE925FA451D65F3C0308E29446B8ED3"
				"7ABAA12EC2A7347674E444140AE0FB659D08E1C66DECD8D6EAE925FA451D65F3C0308E29446B8ED3"),
			// NIST cSHAKE KATs: <a href="https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Standards-and-Guidelines/documents/examples/cSHAKE_samples.pdf">
			std::string("000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F"
				"404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F"
				"808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF"
				"C0C1C2C3C4C5C6C7")
		};
		HexConverter::Decode(keys, 21, m_key);

		const std::vector<std::string> expected =
		{
			// shake128: official vectors
			std::string("3A0FACA70C9D2B81D1064D429EA3B05AD27366F64985379DDD75BC73D6A8381045C2AE2E9C723462EE09EFBB1C2A8ED7A0729D0D9B20F03BBCF55A86859ECBE8"
				"0C8CAB60BAB4C5D063DEA224E825E38642124EA705327E075B61D08E0B49DC184C5194292BB4A797CD24D924CC64816BF911FBF4985130A59D68FF0673CC8C4A"
				"390AD593BEBF16419FF464ECB3FC78C160B6DB9F755A5FAA7A9365B58CE7F90465AF960C48B771699E0EB227F5370387E6248E17EE192007128EE7AD3D94BB9A"
				"2193BBD4618AFB3A399CB2016ECD5F9E41AF10701FF1915A6E091F44F193B0F729CC4AF5FECF683B1C7DD2644D7458C45FFD635EEB85C79E241C1F4869CDA9E7"
				"7E80F7B878C24E9AF77D22D8C7C0C406C8AAF50F57BAB68FC6C3A20274B6BC353E6D60DA40E8369139B4508DAE96DBA12DCA9D80A19041A3798B252FD24BF2BE"
				"64035CDA6D95D6E570EA868EB8808193B3792897A2147396A47D27C81D40FF4BF9212AB239D7A789D8CDD545A98B447F6ABBFF4BF6FE631CF2483881E933C1E6"
				"2A21BEC503A6EA60F3B179F9CA6852DAABA4CED7ADE5E35E960463FA4C3A32F4C580F03CD2E45F10E32507FB2880827F56BFC5030A4CA94635EDB134580715A2"
				"3C87D755FD91B1566D1A471F310EDB2C12AA11F2D280683F43155D67E2EC04EC2CB2CEE53A4D00F77AA73DCD6CAD61D1AB7C30A627CC75F83D48BDF9A76AB456"),
			std::string("131AB8D2B594946B9C81333F9BB6E0CE75C3B93104FA3469D3917457385DA037CF232EF7164A6D1EB448C8908186AD852D3F85A5CF28DA1AB6FE343817197846"
				"7F1C05D58C7EF38C284C41F6C2221A76F12AB1C04082660250802294FB87180213FDEF5B0ECB7DF50CA1F8555BE14D32E10F6EDCDE892C09424B29F597AFC270"
				"C904556BFCB47A7D40778D390923642B3CBD0579E60908D5A000C1D08B98EF933F806445BF87F8B009BA9E94F7266122ED7AC24E5E266C42A82FA1BBEFB7B8DB"
				"0066E16A85E0493F07DF4809AEC084A593748AC3DDE5A6D7AAE1E8B6E5352B2D71EFBB47D4CAEED5E6D633805D2D323E6FD81B4684B93A2677D45E7421C2C6AE"
				"A259B855A698FD7D13477A1FE53E5A4A6197DBEC5CE95F505B520BCD9570C4A8265A7E01F89C0C002C59BFEC6CD4A5C109258953EE5EE70CD577EE217AF21FA7"
				"0178F0946C9BF6CA8751793479F6B537737E40B6ED28511D8A2D7E73EB75F8DAAC912FF906E0AB955B083BAC45A8E5E9B744C8506F37E9B4E749A184B30F43EB"
				"188D855F1B70D71FF3E50C537AC1B0F8974F0FE1A6AD295BA42F6AEC74D123A7ABEDDE6E2C0711CAB36BE5ACB1A5A11A4B1DB08BA6982EFCCD716929A7741CFC"
				"63AA4435E0B69A9063E880795C3DC5EF3272E11C497A91ACF699FEFEE206227A44C9FB359FD56AC0A9A75A743CFF6862F17D7259AB075216C0699511643B6439"),
			std::string("8599BD89F63A848C49CA593EC37A12C6"),
			std::string("3109D9472CA436E805C6B3DB2251A9BC"),
			std::string("D785D35331BD7821C8B4A7672E920B2C"),
			// shake256: official vectors
			std::string("BF7A4FFF6C7B53893BFBA9505594DFFF317A09278C3A59221B8DFBDBAFD08EE237FCC272ECB1C7672B41B8DEC7D54B988B4CCA65CF297E1D54DA65A176350AC4"
				"89947359E11E34AB3E4D6744EAD1775DF90BD5BE0712BD54EF46DC279587527976461D6B8F9D0C0FE14B10372550ECF74B3CB30C463F25090ABF7DB84D32F51E"
				"8AEE7298C49607E4D3DD79B9348E33F2E58A7D0D76394C0B1C79642CF2C3077CA0764F291FF48A8CD723C953276A829CC1E7B798BECA33E8B0FC0BD44224CAB8"
				"9BA334E52D6943A1ECAC72CA3BC825BD61DC4CAEE1A12E053EF31115456DA434747AA8D6DEFE56E35FE67D5E761881D681AD8EFD3AD5C69430FF75794FAEA555"
				"3FD91A4ECF7730EE8205AAAA0DB99AEDE2C52591696514AED17F7B8942026AE16D67588A943E5D13BF47F15F1A458F06ED83A48641941DAB491594DD02C68195"
				"0B84718CAEF0E6187F23C89FE46A40D5C22AE297A05E8B613B264D204334BE5922A6DEDFF5B978767233AC58925C672F4F4B0B77326A5B283CB1DF217BDDFDFB"
				"F12E4FEBA42E23C18675E0FBF0269E2D53A024B4286FA90685C2D8E67E3A60BE0D7072C3AD8BE9F4A389FBBAFE191CF06EFF95605A89C3C668BAAB7657A90F23"
				"B6B791421D214767736CB617BF1481CE103768E5A8A3384978EAA8F56A6F2E729D6307973ED19B270247867E5861172467821A22872E52657BA2FFDDF6052025"),
			std::string("CD8A920ED141AA0407A22D59288652E9D9F1A7EE0C1E7C1CA699424DA84A904D2D700CAAE7396ECE96604440577DA4F3AA22AEB8857F961C4CD8E06F0AE6610B"
				"1048A7F64E1074CD629E85AD7566048EFC4FB500B486A3309A8F26724C0ED628001A1099422468DE726F1061D99EB9E93604D5AA7467D4B1BD6484582A384317"
				"D7F47D750B8F5499512BB85A226C4243556E696F6BD072C5AA2D9B69730244B56853D16970AD817E213E470618178001C9FB56C54FEFA5FEE67D2DA524BB3B0B"
				"61EF0E9114A92CDBB6CCCB98615CFE76E3510DD88D1CC28FF99287512F24BFAFA1A76877B6F37198E3A641C68A7C42D45FA7ACC10DAE5F3CEFB7B735F12D4E58"
				"9F7A456E78C0F5E4C4471FFFA5E4FA0514AE974D8C2648513B5DB494CEA847156D277AD0E141C24C7839064CD08851BC2E7CA109FD4E251C35BB0A04FB05B364"
				"FF8C4D8B59BC303E25328C09A882E952518E1A8AE0FF265D61C465896973D7490499DC639FB8502B39456791B1B6EC5BCC5D9AC36A6DF622A070D43FED781F5F"
				"149F7B62675E7D1A4D6DEC48C1C7164586EAE06A51208C0B791244D307726505C3AD4B26B6822377257AA152037560A739714A3CA79BD605547C9B78DD1F596F"
				"2D4F1791BC689A0E9B799A37339C04275733740143EF5D2B58B96A363D4E08076A1A9D7846436E4DCA5728B6F760EEF0CA92BF0BE5615E96959D767197A0BEEB"),
			std::string("46293A63C235750D58A24EDCA5BA637B96CAE74325C6C8122C4155C0D15805E6"),
			std::string("3C4A422BB47DB5EF8E4E4029DD172D757258B1419444059799761138CE404944"),
			std::string("5EB982A2754FE46D19D8CBF86B4D594D14B421C8AB3AE44762447E9F789271F5A1175CA9B6C604FE8046A9A8C11A9FF9354BDC91BDF051AB6FA1F6A44D0E4297"
				"7897F5342958ADBCC1E612A49B46EE66420E34F2233E8AD857359EA92E3FBE3F84191127833D6BDFF88019BA5B6982F446326877B3D3662767C6E91B0A6F9D28"
				"88BEA239B25F1B6A248A6CDAC1775976958FA9624EDFA7DE3050CB73602D24D13763C2D67A016308BF4C53D9C7B4A95AB542549944B74A2EB30F688B1FC9138B"
				"57FB76AB320AC7BD48727CF4CE4BD34FC3B0C2EC0E95BDDD0EF0F5F70FD34C6C890982978613D2132FCCF37541042415FDDE4AF368A207D59251F50E14D7A531"
				"0BBBD378781DF611B425495FC69A2A6644FC6B29ACCFA9918EBE05436EE9E191946AF9CBF15011BB53CCED508C4CEC0BC4E156D0884347AA46A902F216ED6577"
				"E56129B441EFE731CF6C0EEAF378F5A29586F5A62D10BAB2778F106FC6C3EFBF2452C75045D578C38222E14247DB42FA60FA6D909E0AEC09EDFFF90CC41B32A9"
				"725714E41FFA9F350FF3C1008511534337DECE84A0F3D5DF085993BD3D5C755B95E6ED4B36FCEE70B68AF427C3C80386983920307878C1A01C5D782AF85C89C8"
				"BCBB0EDB2274BF7172DBF16AE9BA1CDD7A97D6B2BC2D06F20BD0431618115097621A36C41C9788DC68B95955EA5E097177D66B0897C7BFDAED8487A79E14DCDA"),
			// shake512: new vectors
			std::string("D6DEAAF94A391E987698B17E0AE2D8C6C96BEAC5DD2FFCB20F45665EFE39CFFE7ED119E38899BD3E8FD206A1A77B74F435D405BB837E61A62D97D5BAA203300A"
				"E689BA5F3B6659355964FED145065B3B0371C6CA4E466942B81BBD47CB2AE3738D630EFC00CBBBC0B11FF56C6AD16E1500980D94112F039003F9F36A3D05567B"
				"A3810BA76EC6E5893E3B2A0CBAFA9EEE123ED1BB64AA7AD4DD21A540EA14810D73611D6C1852A9726445199856CD52C054FBB92EE8A0BF83FB6BFCA5FA05C290"
				"AC2F58868140A07E23EE1634097E0414661352CAA4E4EDC88BF0D00AC6022C49A3AB60B1393C3FB56E668FD504C8D74F747E1C84DEB34C5560F5A421CB3F87CC"
				"741A380403378E7C7BE009724149FAB8F95BCBA485D7F45303E9DBF0B4596F60731FCF11DD90112670572964F2CFA72168212B41A640140253E55C09043CAEE3"
				"96C461B0B8C386329710BB0C562963D3C919A20A5BFA7310271319CB086C12F67F62C4F6BECB52F8953688CE215436D53A0516F31C994AF16C121297385B6D83"
				"94875A3FB64A5CD9BC2004F319D358C37302E2524736F32DAEE5F2F09D6DFCC11FCAE121536A1428D79F246E1FEFED8619E652BC1BA0CA8D840E624F5245E7CB"
				"F2A15CAA8880653B3746807CB83F52A6B2FBCFBA9E708702F5A8E68D79FCE865898CB646F40CC3CBAC51CC94729EDFD1754298B3AAEAE94D090240A7BBFE3FBA"),
			std::string("9701303D390F51968C25B6EEE54816D19AB149A1C06B0625940BB8E04A1CECCDD88010234F53ABBBAF181F49761A3ECEFAEE56DE7B59B5AAF0031E3C1552C9AC"
				"40DFAF6AAC934FD644DBC4A3D753E1F3845A5901F415DFF2A88440F6A8F5688FF26E68ECC6AD23ACF18E0A54BE745DB919FAB01F77A251D5F66B01E2426BF020"
				"BC27A6DFF274DC987313A42F1AC159F481A46F5BFB53914C7E79191F491C7808DE0EDF3BCA24FD7DFD713806C062326C16FFAC00D1F8E94BA2DA0DE06D5F1826"
				"A5AE881313AAD40FD0F260822ABB83ACC72E86006B1B04C28A0A30EAEB39040EBD0D4ADB76263BD1186464A5CBA30B4332C1ACC5328B989A998B5F5CA5184AE6"
				"DDAD039A3117C05C9CB2EA4DF5F8A2E8BD945EE42CE1789CE568D2BD7263DDF56520D040BB406AD2D10DE2E3714D049381737CEA1AE05062650AFCE1B1DE1F77"
				"B418C7F7C4B1A5C233EF78FFC1D67215BEFDDCFA8E4C1CA64FF547B21DE12E2011D8214D0BBAB6645ED240313C4D86646BEC8F9D58B788227B535BFCB8B75448"
				"94E4A4BCD6DA9BF182DCEDD60348BD62579C898DBA9A6B6AA9E87E9C29F5855F57F138ACA68EB7B89DBE7DD09B217E94C4E57974E96A28868202D643F08DF096"
				"21AE714C2B47365DC44F608B97B5C5E0791EBE3C245CCCC1B537030EEDAA096FEF24013B7D401C9C7470375D97A6A26066CFB7B88E72F6D6B635E9F09DB2C007"),
			std::string("8C054E08764D4C399A0FE3DCFB15E4AED084CFED9E9773FE7A3E4BA9C216F9C3485BAE26815758957BF455B538473068B245FA05F2B862E95EA95F97429DF06C"
				"4EFC93A6E9AF1C6F7F657ED8C7C12D0508F8DFD6CDEF3661B9A23C466AD723F4007376ED5A57626252BA38A1D90E08BD00DA70BAFE8546C4665BB1CA4CAB090C"
				"CD91D26FAC7772BD338318A974DA236787D8E190717845BB6B54CE147AD0244DADD1EC8088586BC82239047653ACD1C05FACA7E31C99A54747D29F7DE7988971"
				"07ACDE8026564250FC498186E39468D39C377B0620EEAB843317B618FA680E597D8AD2E2DC82B4B0EB859353E7DDB4B40F03E760610A1E5F34DD825919DC30D9"
				"31255411235DA1E511884330B6FC74D62BBF49A865E92CC336A4EFEF35A702F5F149B1B38F2AB2D6D587C2682CB4816DF19BBB7EF9BE08C883ABF68EF033FB84"
				"BF91F6234A6E7A27D96525629D46B64FFF944655DB8DDD86338812A368F770E4D3D7F5EC78A20C02C71199336EABCF5CD9EBECC8F6541B0EC129167F65213733"
				"B12041CD1A1F674D70DB373F1FF718D35BA6424619E66D68C279599B118B3A30DCE98E04990AC02FB72922E40E8D9A723944D15750688886E9B80A03618D52CB"
				"3B3FE870C7B53C492282DF0A0943BA6F9CB7A94C2768B512B6883BE501C0DE44E212442BBC575DD891F6376FFCAB7DC57588B9704557F54D5295E7640DAF0BBA"),
			std::string("164D892173766ADBAD32DD212564D450B28ABDDAEE8C1C3A505834343531F7F6855DF2034838C39F8E3BF724962C7472B2777D065590299429705AB95C3E7352"
				"04ECF8518E6FF3DA6265BF0E8D02978812CDF9EA0531F86441833A2508F5CA5DA7636642A44C8D14DE80BC3EAE1F8F7F4B40F7D500F5A84E512581A3087B6239"
				"1ECD6CE0207E73DC7D4A74A7CA6A9B22906134F20B1850CB550DE6C48AE81A3F54819259295E6A5DFC051DE880FA1F5E4672F68F3F3D74D012B5442B4D060AD5"
				"2A0D24D7296CADD5A53238C2354A860CA684AD7C05D3860CDC1476138C55036138BB39186B0F266106A02856156887D0527EF46F2DD616956BF7C1893373D2EE"
				"00CD6C7D6AC37A36FFE3ED82A1962B3FEE7681C115B135F50145A5BC7F85C266D02EFFEFF8CE2E879FF6076E2C38B72D8796386F824C530B89FE8A1CD5DC4E9C"
				"ADF767DD4F948693C5884FC3B755143F63880D6A9B5DB5E864A589EF9C33869F674EC75B05654E30B5F806E1EC67E99CC75F3ED8F2E9C67EB7C8DB7F5D283CC9"
				"7CFF103D5D39620D11DF721A3416E3048DEA5D851BB48042A594965E50B8F8C03132038EAEE753361ECC33B4353BFB7E49C5AE93BDFC28C4862F21F9A5C76215"
				"0AC99C190007A28DAA98B516F5ED7429E436B680EB46A733FBE8B944685677CCE174D6975DE5432C41C3188674FE9BC30342D9A5B4EAEF7126647A4EC9DCDB4D"),
			std::string("8D06030E6E35DEE6DF1B189C71CED33D09FCDA1E78E0DA71C6A5E283C2D16915C6037D22527AAE74A9EDF426A1F09D4C88A9BD054194D8D10D7B1483EA619764"
				"B329BC1B0A083AE6CCEBC96930802383195083D9029C02642D7C0C02E8D2A318D118C5142EA981DDEC2C0BEB19A47E429ACEAAD154208F941B5C537D07508845"
				"22FF428DC76054FF198EB816E24B6BCA21912B8C75807A680440970C0D5F978C9611043E504D6BA306277F24E6B74D093022F3A532C0381E0FCB5F3304D601ED"
				"9837BEC8294B6A41E39EC9F51A35195922362C526E93F79BA37FF58EEDF4F9B65426DB88EE0EAFE68A6E823B9088F28C7F5E4C3F5BC4D3A186456C205078F7AF"
				"E76E5E5DD4DAA098E9D2FACC84D20551A9E701B1E4E6D50B17C361E90291C0AF7A273D72478D9BFB264707E2CDE42B46444CD3E375EFB23D55FBC54741D15A27"
				"E841252CF23544E44D66EFB582B46F830AEDFACA068E7A9C7A0AC75E3251D4EAA399E56A1F2D4493536E54E71070FEAEE4829D22E53C327A19D14CDBAFB43A0E"
				"73297FA1DD64167D9DDD93799EE715FCF7AB6A4AF73D217C631A8F19AF723819974E408062919E9A9E60A70F41F00F944F5D937FDABCE0F8FFD5148E670D90F9"
				"9777C7824A8370A4B4F7750DAA96506EEFBC7049274204308B0632269C1273E0B54DE869775E82981436D77AC5EE95A08D9328174678738233A9421F44C07A81"),
			// shake1024: new vectors
			std::string("0F00FFFB3B0D5E4528FF4AD0532AC68C9CF81F12CF6E081E30610DB3E64EF5D27B02A3EF7377CD323CCE3BEA61B5653D56BBB3E80386470220BB391E65E1353C"
				"6FEBFE84F997F7C6721256362FA7AA30F121449AD4C5C20828D62E0F5B6E33A8480B00F1BCBB43F344EB603FAE37E8AB86CB18A4255237A24D6C934B062824ED"
				"E1D13971DD316D25FAF32BE6E6DB8F9A9BFFDCE8783998BD48E2110C4E8D139E04AFBD7BD76C9B753D829987FE03FDFA09924B52797C103643115EA1D7628616"
				"459BD3D8803B68FB493391990B3291652CE9CF60C5668BA888C389E471DF10EA75005B9DB4EAE75D135F3F7FBACFDBEA1851A45586D1838DBB65863DBD0EE1D1"
				"3832CE696DE375776DCA03B66F4AC7E70DFC309B02D48836A4B80584269212BB58FB6499CC73CBF0A4F67A23279F8EF04A73E81D92FE1382CBB52E2A998758B2"
				"4612852235626B92ED3DBDFCCF4A4BE0C2FBC0537935BD83C8EE8E655D2BA4CA4ADE793ADBF0CDEFF565D37559FB086F15F1822E57BEB3FE2B7E1FB99BE9F9F2"
				"D6E396B2F73A6AC0826744E21C0311E6E2469256B6AFD78ACF48E1C46D48B3192FD0668205C48B2883376A55154FE8C28DC01DDFD2380C4854E8EDE3FDF65A78"
				"9A5B857406B8A4C9FFB336389041F1A1D05ABE27B0951F499E6BFA79E2740054F1CB4822A6D31D6CC390E2ED5BDCC7576B784A53FFD6FFC801C17032AE12318F"),
			std::string("EDAE1B11DB8CF91DA2C824D7E1B3117B092008A8B96EC91131C8587057B2948F1180784908862315AB26F9FD0AE5A17E7791209D137D3F0D7E3C11DD286520C1"
				"6DD4547AB719C50F37515F0F5BB03644FBC79076299B8148D042180722AC99FD5027F5C7843399F6B0C9761F6F7636A961B647C93EB468B59D1CB2F6FDF49C1D"
				"768ECB98D4378416C1297CAF871498E9777C04E2D8CA8F8213A04C1A1E899FFDFBF320F56144018072ACF272AEE684B52E0EC6946CC7B4C697787CEDE6EDFAEC"
				"E7448D119961668FEAE6C1C4E6587FCD6681F771A736C2C473B569002170AA9CABA69E59B26166CE1C92C2C536B14F26FAA562C7C59F17A926DF389F79F00B70"
				"BE7135939A1B840324832A6F6CA86A0DFAF7FF9787AB10D6ACC09347B94FAC9CD40F03127534D86CD4EC640E1D6F2FEBFBE11E9E7A2AEA4F979CC7C5C013E646"
				"9564F829BB9E38DB450A9A7613FFB8DFE0522D223C65A1476E6988FEE03558BB49A2C8C9DBEA0BB962D3D1E06E18C33166F3C1859B110F5D41B93571115C28A3"
				"F9B40AE98FF738D8239BCB50EE12D40E3EFFA8804093775AB7824B4790169DB630170EF8ECD46B01AC65A2A8EDC521E6611C3AF69EC1A3F381C4576BBD0B0FB6"
				"0733EC355DF31C6D953B576A20D9341F50734E6FF6FE27E919312FE063827CF79D9434AAA9FC0CAA083CD852CC7B9F1A44B5F8DDF3A3C385730A2F2980419620"),
			std::string("1E6516ED81E3D0958FC38763DAE3B9EA2021BBC4ED348367C4BECBE890AFBADF7D0CACA8651D717C0CF2DB9979EBEE59C565D1823BE8F8499B16BEBD2A72B985"
				"41EF6522299DF495438829E0A6035744D2B110D98BFD7C8BBBFA15CA6FE2E144E2DAC484E8F36AFF0C1E6C6EC886D063AB9F538E07C9E4748291D6F597A98FDB"
				"55162B6696EC3CC1D82AF77F3920A161EB2DB473F1736569BDB98180CE68B52FB42D6049C2FAB5168279FE2527EEC73B3D63CF77B44A94E44C7D8305D394F032"
				"C14A4C2446C48406EF7AA2EC6317C7D983641741E4631D6A18FFA0E0AFD370E4DDA5A63E7B90E1C726B18DE642A938F5510613B3C08B6771766FDE4796B2F31D"
				"0B7ECCB0FA8B944DC0914812AA5E9B2EC7E5E542BB7CCDAA72862A0CA8CBE30DBD8C7C2E480CA53E5B8F179D265B417A4F0EE6302A901D3D4BB639C8926D8E0A"
				"94969FEC7C9008EAEE2DB8EF63D2F9E889BD74B0102F06FEC3223C9E347BF0A18691A2B239316EF31DFB914395D1D6BBE92E33C60840B94CD15424061AD3461F"
				"36342828CEFC9282004F7946B3CB37565959C3E84A6378A8B2B3A88EFC66C2334D3E69FAA2B5B33B8B5FA469E8C6F1CC55B0BC693768B4736DC7EEA2B25C6B7E"
				"63047116A5466469E7716BE6CB47C5D1C5FDFA31245A18D6A765D1C84B44507B8B33BE26ED1195DD0E2A487187F4D1E2FF7169D4101D580DC0CA57BE4AF76F46"),
			std::string("21790C78C5FEAB58B0013B58362415A2125EDA7DCEE31790BE45426C2EA94FAAF8707AD9EB5C881F4379B2C97E42F45F5BBACD9BDC62F89B7D3CDB09FCB0BDAD"
				"430C3C02E8E99F6FE04571CBB5809D30C7F9D70EB8F37001C0CABD646975C649B01C0CC4DE65F337A1291504B60CD1D3FE1E8C8F44027CFF48D26253D3EB7F76"
				"7FEF997EC542B54F4E3D4587175019346FDE362732753156270185367BCF17A5E456174C563239566C7C917C1D13906B69BC7D53C065AD6C5A009A2A6DD8E339"
				"C1AC773DCE1552CA7F4F7CF09DC59029061681F4DE9F4CD038E7DDE69D177845413401A3771A730C74C101770C00343175962F300520104DD11C10A5CF317937"
				"628C5332CD742714787040D58AD747487A8ADE6EB3BFF6ECC15D3825B1ADF06E346686ABA2DE2C6E16CB67FE6911B20002284B7791187E78EF69791A2CD3786D"
				"213B4FCA4903C93EF60B06EA48545F62DA4E24A1EC50E7300E56F7C76E4B5614000300E2102DDF39A35C757AFE37D8E88B113976B9BA275DE090D4492E0D5AB6"
				"8A095B3D5918FD9F49A0CDDFFC21670ED0E1899F85A0A914ABFE373EC30C227940A52AD0259BC4F02F658EB4F425783685684B20BE4C22BD15673428382D6507"
				"850F9F9BE8C0DF733848DC9EDEA9A41EF84413C44D69D7FEF28C0F71570CBE8816CB20E8C8EB8C884662ABF2F11952E4B626CB38FB07AEF90D272020D2034318"),
			std::string("C9BFD729A0BCB2789C065866E1A141FD9C2AA0E682D001FE7BCE17FC639A593F2512170019BA4CC469B096D0F621A7AE0934706D03B89917CADD58C0B2C8DF0E"
				"E33E79B4FB8B01B41AC451575C4412ABD0FBA8BB3507FC06A99E7532E3F102C8A6B381EE5A4599836C5327D10BFF7C7AB01FBAA2050D7F6F8146AD5F0AAF96E9"
				"1E1B0A46C927F7818FBD203DB21D26D9CB7F11476D210545E5DE395B6620AE61A795EAB54B1877E3B9E8CBCFF80CC6D5A29ECEE4C419FE2A220039A52A1FB138"
				"8DE03FD494B53C74D10D84FCF5B093AEBC3040C6B084B5D0DFD9F974BE8728117F16A6443F39EC9B31ED860DCA62F8CA6CCEDA6B4FDC7015E31B83B77284C0A0"
				"E8F6D8FE43AE79E665FC929370332BEA3EFCE107177B414996172D6147111665B0E4104829B56D897C876AC08BDD07E4E908D0005368B41FFE54145420A66B9E"
				"92B688B31ABB13951A1A36551814F7A6FC5E033895C4C208056E460D841F52CF5A216594B79A35E97CD291F39E80F5EF295D8239864C9DD6300CA499D315EBB7"
				"0F5B37B7A5C6E236223F05CC1A3C929EC8447302F2656ECCD2C3D8F1FEC57A9B7F7F185DA5B6C348A3CD480862004EB2F33E3BE490A441C15514DBAABE4BDE54"
				"9B6C8C6B9A74869A0DC85441FA8D837087F2AF5E3BC6014D05BCD31B7B0F613011E52A249E9D29153C884322250B9A2EFE7FDD8B2E2CD9191812B0282501F821"),
				// cshake output
				std::string("87912E7FD5E6231274296A134E6CD0D2C513B99EFEC18C328F4736380135EEFF"),
				std::string("C5221D50E4F822D96A2E8881A961420F294B7B24FE3D2094BAED2C6524CC166B"),
				std::string("A56A87D8B4BB54CED17679F12D3D9B1D7A83D90D2415EC4DB91B0950F7444BB9A2BA9DFB7B034543E5ACB305D6954CE0FCB197CCF1D8B1F786A6946C7FB67068"),
				std::string("07DC27B11E51FBAC75BC7B3C1D983E8B4B85FB1DEFAF218912AC86430273091727F42B17ED1DF63E8EC118F04B23633C1DFB1574C8FB55CB45DA8E25AFB092BB"),
				// cshake512 new implementation vector
				std::string("EF4BDC1F2B91B44C51048C81F5499DAC46F38C6E9CD81CEA3CB85E3A1913F8C454CFE40F05370F7DE24E50FC49BBD188F42D2439F25DC2B3DB7CA2E38DC7E4A6"),
				// shake1024 new implementation vector
				std::string("5D84F9A90149A31AF10F948C9283ACAB853D289D82737FDD51DF72ECFD7708FD5FF4D64F992962E31766B77FDFEFA1D3E0130091142477E8482593FD5CE807C3"
					"331F81D42C161B0BBC58A46025F60742FAD9A8CBB0BE16E86CD037EB83445A6A36CF2B303945D335E815AD41A3E5575593419F048B66BA25C75792D43010F58B")
		};
		HexConverter::Decode(expected, 26, m_expected);
		/*lint -restore */
	}

	void SHAKETest::OnProgress(const std::string &Data)
	{
		m_progressEvent(Data);
	}

	void SHAKETest::Params(IKdf* Generator)
	{
		SymmetricKeySize ks = Generator->LegalKeySizes()[0];
		std::vector<uint8_t> otp1;
		std::vector<uint8_t> otp2;
		std::vector<uint8_t> key(ks.KeySize());
		SecureRandom rnd;
		size_t i;

		otp1.reserve(MAXM_ALLOC);
		otp2.reserve(MAXM_ALLOC);

		for (i = 0; i < TEST_CYCLES; ++i)
		{
			const size_t OTPLEN = static_cast<size_t>(rnd.NextUInt32(MAXM_ALLOC, MINM_ALLOC));
			otp1.resize(OTPLEN);
			otp2.resize(OTPLEN);
			rnd.Generate(key, 0, key.size());

			// generate with the kdf
			SymmetricKey kp(key);
			Generator->Initialize(kp);
			Generator->Generate(otp1, 0, OTPLEN);
			Generator->Reset();
			Generator->Initialize(kp);
			Generator->Generate(otp2, 0, OTPLEN);

			if (otp1 != otp2)
			{
				throw TestException(std::string("Params"), Generator->Name(), std::string("Returns a different array after reset! -HR1"));
			}
		}
	}

	void SHAKETest::Stress(IKdf* Generator)
	{
		SymmetricKeySize ks = Generator->LegalKeySizes()[0];
		std::vector<uint8_t> key(ks.KeySize());
		std::vector<uint8_t> otp;
		SecureRandom rnd;
		size_t i;

		otp.reserve(MAXM_ALLOC);

		for (i = 0; i < TEST_CYCLES; ++i)
		{
			try
			{
				const size_t OTPLEN = static_cast<size_t>(rnd.NextUInt32(MAXM_ALLOC, MINM_ALLOC));
				otp.resize(OTPLEN);
				rnd.Generate(key, 0, key.size());

				// generate with the kdf
				SymmetricKey kp(key);
				Generator->Initialize(kp);
				Generator->Generate(otp, 0, OTPLEN);
				Generator->Reset();
			}
			catch (CryptoException&)
			{
				throw;
			}
			catch (const std::exception&)
			{
				throw TestException(std::string("Stress"), Generator->Name(), std::string("The generator has thrown an exception! -HS1"));
			}
		}
	}
}
