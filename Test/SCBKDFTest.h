#ifndef CEXTEST_SCBKDFTEST_H
#define CEXTEST_SCBKDFTEST_H

#include "ITest.h"
#include "../CEX/ShakeModes.h"
#include "../CEX/IKdf.h"

namespace Test
{
	using Kdf::IKdf;
	using CEX::Enumeration::ShakeModes;

	/// <summary>
	/// cSCBKDF and SCBKDF XOF function tests.
	/// <para>SCBKDF256 from the official KATs: https://raw.githubusercontent.com/gvanas/KeccakCodePackage/master/TestVectors/ShortMsgKAT_SCBKDF256.txt
	/// Parameters for SCBKDF128 from the official KATs: https://raw.githubusercontent.com/gvanas/KeccakCodePackage/master/TestVectors/ShortMsgKAT_SCBKDF128.txt
	/// Original SCBKDF512 and SCBKDF1024 KAT vectors generated by the CEX implementations.</para>
	/// <para>cSCBKDF tested using the official NIST references contained in:
	/// NIST cSCBKDF KATs: <a href="https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Standards-and-Guidelines/documents/examples/cSCBKDF_samples.pdf">cSCBKDF example values</a>
	/// SP800-185: <a href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-185.pdf">SHA-3 Derived Functions</a></para>
	/// </summary>
	class SCBKDFTest final : public ITest
	{
	private:

		static const std::string CLASSNAME;
		static const std::string DESCRIPTION;
		static const std::string SUCCESS;
		static const size_t MAXM_ALLOC = 64 * 255;
		static const size_t MINM_ALLOC = 1024;
		static const size_t TEST_CYCLES = 10;

		std::vector<uint8_t> m_custom;
		std::vector<std::vector<uint8_t>> m_key;
		std::vector<std::vector<uint8_t>> m_expected;
		TestEventHandler m_progressEvent;

	public:

		/// <summary>
		/// Compares known answer SCBKDF vectors for equality
		/// </summary>
		SCBKDFTest();

		/// <summary>
		/// Destructor
		/// </summary>
		~SCBKDFTest();

		/// <summary>
		/// Get: The test description
		/// </summary>
		const std::string Description() override;

		/// <summary>
		/// Progress return event callback
		/// </summary>
		TestEventHandler &Progress() override;

		/// <summary>
		/// Start the tests
		/// </summary>
		std::string Run() override;

		/// <summary>
		/// Test exception handlers for correct execution
		/// </summary>
		void Exception();

		/// <summary>
		/// Compare known answer test vectors to kdf output
		/// </summary>
		/// 
		/// <param name="Generator">The kdf generator instance</param>
		/// <param name="Key">The input key</param>
		/// <param name="Expected">The expected output</param>
		void Kat(IKdf* Generator, std::vector<uint8_t> &Key, std::vector<uint8_t> &Expected);

		/// <summary>
		/// Test the different constructor initialization options
		/// </summary>
		void Params(IKdf* Generator);

		/// <summary>
		/// Test behavior parallel and sequential processing in a looping [TEST_CYCLES] stress-test using randomly sized input and data
		/// </summary>
		void Stress(IKdf* Generator);

	private:

		void Initialize();
		void OnProgress(const std::string &Data);
	};
}

#endif
