       NOTE: Most of the tests in DIEHARD return a p-value, which               
       should be uniform on [0,1) if the input file contains truly              
       independent random bits.   Those p-values are obtained by                
       p=F(X), where F is the assumed distribution of the sample                
       random variable X---often normal. But that assumed F is just             
       an asymptotic approximation, for which the fit will be worst             
       in the tails. Thus you should not be surprised with                      
       occasional p-values near 0 or 1, such as .0012 or .9983.                 
       When a bit stream really FAILS BIG, you will get p's of 0 or             
       1 to six or more places.  By all means, do not, as a                     
       Statistician might, think that a p < .025 or p> .975 means               
       that the RNG has "failed the test at the .05 level".  Such               
       p's happen among the hundreds that DIEHARD produces, even                
       with good RNG's.  So keep in mind that " p happens".                     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     ::            This is the BIRTHDAY SPACINGS TEST                 ::        
     :: Choose m birthdays in a year of n days.  List the spacings    ::        
     :: between the birthdays.  If j is the number of values that     ::        
     :: occur more than once in that list, then j is asymptotically   ::        
     :: Poisson distributed with mean m^3/(4n).  Experience shows n   ::        
     :: must be quite large, say n>=2^18, for comparing the results   ::        
     :: to the Poisson distribution with that mean.  This test uses   ::        
     :: n=2^24 and m=2^9,  so that the underlying distribution for j  ::        
     :: is taken to be Poisson with lambda=2^27/(2^26)=2.  A sample   ::        
     :: of 500 j's is taken, and a chi-square goodness of fit test    ::        
     :: provides a p value.  The first test uses bits 1-24 (counting  ::        
     :: from the left) from integers in the specified file.           ::        
     ::   Then the file is closed and reopened. Next, bits 2-25 are   ::        
     :: used to provide birthdays, then 3-26 and so on to bits 9-32.  ::        
     :: Each set of bits provides a p-value, and the nine p-values    ::        
     :: provide a sample for a KSTEST.                                ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
 BIRTHDAY SPACINGS TEST, M= 512 N=2**24 LAMBDA=  2.0000
           Results for csg_10mb.txt   
                   For a sample of size 500:     mean   
           csg_10mb.txt    using bits  1 to 24   1.994
  duplicate       number       number 
  spacings       observed     expected
        0          65.       67.668
        1         128.      135.335
        2         155.      135.335
        3          88.       90.224
        4          38.       45.112
        5          15.       18.045
  6 to INF         11.        8.282
 Chisquare with  6 d.o.f. =     5.94 p-value=  .570273
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
           csg_10mb.txt    using bits  2 to 25   2.122
  duplicate       number       number 
  spacings       observed     expected
        0          61.       67.668
        1         123.      135.335
        2         132.      135.335
        3         102.       90.224
        4          55.       45.112
        5          17.       18.045
  6 to INF         10.        8.282
 Chisquare with  6 d.o.f. =     5.99 p-value=  .575131
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
           csg_10mb.txt    using bits  3 to 26   1.970
  duplicate       number       number 
  spacings       observed     expected
        0          53.       67.668
        1         146.      135.335
        2         153.      135.335
        3          89.       90.224
        4          37.       45.112
        5          16.       18.045
  6 to INF          6.        8.282
 Chisquare with  6 d.o.f. =     8.66 p-value=  .806443
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
           csg_10mb.txt    using bits  4 to 27   2.042
  duplicate       number       number 
  spacings       observed     expected
        0          65.       67.668
        1         141.      135.335
        2         125.      135.335
        3          89.       90.224
        4          53.       45.112
        5          16.       18.045
  6 to INF         11.        8.282
 Chisquare with  6 d.o.f. =     3.65 p-value=  .276260
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
           csg_10mb.txt    using bits  5 to 28   1.926
  duplicate       number       number 
  spacings       observed     expected
        0          74.       67.668
        1         144.      135.335
        2         133.      135.335
        3          81.       90.224
        4          40.       45.112
        5          20.       18.045
  6 to INF          8.        8.282
 Chisquare with  6 d.o.f. =     2.93 p-value=  .182574
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
           csg_10mb.txt    using bits  6 to 29   2.094
  duplicate       number       number 
  spacings       observed     expected
        0          61.       67.668
        1         128.      135.335
        2         141.      135.335
        3          92.       90.224
        4          45.       45.112
        5          20.       18.045
  6 to INF         13.        8.282
 Chisquare with  6 d.o.f. =     4.23 p-value=  .353984
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
           csg_10mb.txt    using bits  7 to 30   2.014
  duplicate       number       number 
  spacings       observed     expected
        0          55.       67.668
        1         152.      135.335
        2         134.      135.335
        3          85.       90.224
        4          49.       45.112
        5          17.       18.045
  6 to INF          8.        8.282
 Chisquare with  6 d.o.f. =     5.14 p-value=  .474552
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
           csg_10mb.txt    using bits  8 to 31   2.056
  duplicate       number       number 
  spacings       observed     expected
        0          62.       67.668
        1         136.      135.335
        2         136.      135.335
        3          90.       90.224
        4          44.       45.112
        5          24.       18.045
  6 to INF          8.        8.282
 Chisquare with  6 d.o.f. =     2.48 p-value=  .129769
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
           csg_10mb.txt    using bits  9 to 32   2.066
  duplicate       number       number 
  spacings       observed     expected
        0          73.       67.668
        1         124.      135.335
        2         128.      135.335
        3          94.       90.224
        4          46.       45.112
        5          25.       18.045
  6 to INF         10.        8.282
 Chisquare with  6 d.o.f. =     4.98 p-value=  .453635
  :::::::::::::::::::::::::::::::::::::::::
   The 9 p-values were
        .570273   .575131   .806443   .276260   .182574
        .353984   .474552   .129769   .453635
  A KSTEST for the 9 p-values yields  .518138

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     ::            THE OVERLAPPING 5-PERMUTATION TEST                 ::        
     :: This is the OPERM5 test.  It looks at a sequence of one mill- ::        
     :: ion 32-bit random integers.  Each set of five consecutive     ::        
     :: integers can be in one of 120 states, for the 5! possible or- ::        
     :: derings of five numbers.  Thus the 5th, 6th, 7th,...numbers   ::        
     :: each provide a state. As many thousands of state transitions  ::        
     :: are observed,  cumulative counts are made of the number of    ::        
     :: occurences of each state.  Then the quadratic form in the     ::        
     :: weak inverse of the 120x120 covariance matrix yields a test   ::        
     :: equivalent to the likelihood ratio test that the 120 cell     ::        
     :: counts came from the specified (asymptotically) normal dis-   ::        
     :: tribution with the specified 120x120 covariance matrix (with  ::        
     :: rank 99).  This version uses 1,000,000 integers, twice.       ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
           OPERM5 test for file csg_10mb.txt   
     For a sample of 1,000,000 consecutive 5-tuples,
 chisquare for 99 degrees of freedom=114.816; p-value= .867854
           OPERM5 test for file csg_10mb.txt   
     For a sample of 1,000,000 consecutive 5-tuples,
 chisquare for 99 degrees of freedom= 74.710; p-value= .032660
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     :: This is the BINARY RANK TEST for 31x31 matrices. The leftmost ::        
     :: 31 bits of 31 random integers from the test sequence are used ::        
     :: to form a 31x31 binary matrix over the field {0,1}. The rank  ::        
     :: is determined. That rank can be from 0 to 31, but ranks< 28   ::        
     :: are rare, and their counts are pooled with those for rank 28. ::        
     :: Ranks are found for 40,000 such random matrices and a chisqua-::        
     :: re test is performed on counts for ranks 31,30,29 and <=28.   ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
    Binary rank test for csg_10mb.txt   
         Rank test for 31x31 binary matrices:
        rows from leftmost 31 bits of each 32-bit integer
      rank   observed  expected (o-e)^2/e  sum
        28       214     211.4   .031533     .032
        29      5188    5134.0   .567761     .599
        30     23203   23103.0   .432438    1.032
        31     11395   11551.5  2.120923    3.153
  chisquare= 3.153 for 3 d. of f.; p-value= .669220
--------------------------------------------------------------
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     :: This is the BINARY RANK TEST for 32x32 matrices. A random 32x ::        
     :: 32 binary matrix is formed, each row a 32-bit random integer. ::        
     :: The rank is determined. That rank can be from 0 to 32, ranks  ::        
     :: less than 29 are rare, and their counts are pooled with those ::        
     :: for rank 29.  Ranks are found for 40,000 such random matrices ::        
     :: and a chisquare test is performed on counts for ranks  32,31, ::        
     :: 30 and <=29.                                                  ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
    Binary rank test for csg_10mb.txt   
         Rank test for 32x32 binary matrices:
        rows from leftmost 32 bits of each 32-bit integer
      rank   observed  expected (o-e)^2/e  sum
        29       206     211.4   .138848     .139
        30      5141    5134.0   .009516     .148
        31     23126   23103.0   .022804     .171
        32     11527   11551.5   .052066     .223
  chisquare=  .223 for 3 d. of f.; p-value= .344539
--------------------------------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     :: This is the BINARY RANK TEST for 6x8 matrices.  From each of  ::        
     :: six random 32-bit integers from the generator under test, a   ::        
     :: specified byte is chosen, and the resulting six bytes form a  ::        
     :: 6x8 binary matrix whose rank is determined.  That rank can be ::        
     :: from 0 to 6, but ranks 0,1,2,3 are rare; their counts are     ::        
     :: pooled with those for rank 4. Ranks are found for 100,000     ::        
     :: random matrices, and a chi-square test is performed on        ::        
     :: counts for ranks 6,5 and <=4.                                 ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
         Binary Rank Test for csg_10mb.txt   
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG csg_10mb.txt   
     b-rank test for bits  1 to  8
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          929       944.3        .248        .248
          r =5        21767     21743.9        .025        .272
          r =6        77304     77311.8        .001        .273
                        p=1-exp(-SUM/2)= .12771
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG csg_10mb.txt   
     b-rank test for bits  2 to  9
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          934       944.3        .112        .112
          r =5        21815     21743.9        .232        .345
          r =6        77251     77311.8        .048        .393
                        p=1-exp(-SUM/2)= .17827
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG csg_10mb.txt   
     b-rank test for bits  3 to 10
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          956       944.3        .145        .145
          r =5        21549     21743.9       1.747       1.892
          r =6        77495     77311.8        .434       2.326
                        p=1-exp(-SUM/2)= .68745
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG csg_10mb.txt   
     b-rank test for bits  4 to 11
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          915       944.3        .909        .909
          r =5        21730     21743.9        .009        .918
          r =6        77355     77311.8        .024        .942
                        p=1-exp(-SUM/2)= .37569
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG csg_10mb.txt   
     b-rank test for bits  5 to 12
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          947       944.3        .008        .008
          r =5        21787     21743.9        .085        .093
          r =6        77266     77311.8        .027        .120
                        p=1-exp(-SUM/2)= .05837
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG csg_10mb.txt   
     b-rank test for bits  6 to 13
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          950       944.3        .034        .034
          r =5        21790     21743.9        .098        .132
          r =6        77260     77311.8        .035        .167
                        p=1-exp(-SUM/2)= .08004
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG csg_10mb.txt   
     b-rank test for bits  7 to 14
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          943       944.3        .002        .002
          r =5        21669     21743.9        .258        .260
          r =6        77388     77311.8        .075        .335
                        p=1-exp(-SUM/2)= .15418
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG csg_10mb.txt   
     b-rank test for bits  8 to 15
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          946       944.3        .003        .003
          r =5        21893     21743.9       1.022       1.025
          r =6        77161     77311.8        .294       1.320
                        p=1-exp(-SUM/2)= .48305
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG csg_10mb.txt   
     b-rank test for bits  9 to 16
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          915       944.3        .909        .909
          r =5        21718     21743.9        .031        .940
          r =6        77367     77311.8        .039        .979
                        p=1-exp(-SUM/2)= .38721
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG csg_10mb.txt   
     b-rank test for bits 10 to 17
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          989       944.3       2.116       2.116
          r =5        21680     21743.9        .188       2.304
          r =6        77331     77311.8        .005       2.308
                        p=1-exp(-SUM/2)= .68469
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG csg_10mb.txt   
     b-rank test for bits 11 to 18
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          965       944.3        .454        .454
          r =5        21721     21743.9        .024        .478
          r =6        77314     77311.8        .000        .478
                        p=1-exp(-SUM/2)= .21254
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG csg_10mb.txt   
     b-rank test for bits 12 to 19
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          974       944.3        .934        .934
          r =5        21964     21743.9       2.228       3.162
          r =6        77062     77311.8        .807       3.969
                        p=1-exp(-SUM/2)= .86256
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG csg_10mb.txt   
     b-rank test for bits 13 to 20
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4         1007       944.3       4.163       4.163
          r =5        21735     21743.9        .004       4.167
          r =6        77258     77311.8        .037       4.204
                        p=1-exp(-SUM/2)= .87779
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG csg_10mb.txt   
     b-rank test for bits 14 to 21
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          935       944.3        .092        .092
          r =5        21720     21743.9        .026        .118
          r =6        77345     77311.8        .014        .132
                        p=1-exp(-SUM/2)= .06393
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG csg_10mb.txt   
     b-rank test for bits 15 to 22
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          918       944.3        .733        .733
          r =5        21739     21743.9        .001        .734
          r =6        77343     77311.8        .013        .746
                        p=1-exp(-SUM/2)= .31142
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG csg_10mb.txt   
     b-rank test for bits 16 to 23
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          914       944.3        .972        .972
          r =5        21874     21743.9        .778       1.751
          r =6        77212     77311.8        .129       1.880
                        p=1-exp(-SUM/2)= .60929
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG csg_10mb.txt   
     b-rank test for bits 17 to 24
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4         1007       944.3       4.163       4.163
          r =5        21610     21743.9        .825       4.988
          r =6        77383     77311.8        .066       5.053
                        p=1-exp(-SUM/2)= .92007
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG csg_10mb.txt   
     b-rank test for bits 18 to 25
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          937       944.3        .056        .056
          r =5        21747     21743.9        .000        .057
          r =6        77316     77311.8        .000        .057
                        p=1-exp(-SUM/2)= .02816
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG csg_10mb.txt   
     b-rank test for bits 19 to 26
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          930       944.3        .217        .217
          r =5        21812     21743.9        .213        .430
          r =6        77258     77311.8        .037        .467
                        p=1-exp(-SUM/2)= .20837
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG csg_10mb.txt   
     b-rank test for bits 20 to 27
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          922       944.3        .527        .527
          r =5        21870     21743.9        .731       1.258
          r =6        77208     77311.8        .139       1.397
                        p=1-exp(-SUM/2)= .50276
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG csg_10mb.txt   
     b-rank test for bits 21 to 28
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          925       944.3        .395        .395
          r =5        21648     21743.9        .423        .817
          r =6        77427     77311.8        .172        .989
                        p=1-exp(-SUM/2)= .39016
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG csg_10mb.txt   
     b-rank test for bits 22 to 29
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          904       944.3       1.720       1.720
          r =5        21639     21743.9        .506       2.226
          r =6        77457     77311.8        .273       2.499
                        p=1-exp(-SUM/2)= .71332
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG csg_10mb.txt   
     b-rank test for bits 23 to 30
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          961       944.3        .295        .295
          r =5        21723     21743.9        .020        .315
          r =6        77316     77311.8        .000        .316
                        p=1-exp(-SUM/2)= .14598
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG csg_10mb.txt   
     b-rank test for bits 24 to 31
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          991       944.3       2.309       2.309
          r =5        21771     21743.9        .034       2.343
          r =6        77238     77311.8        .070       2.414
                        p=1-exp(-SUM/2)= .70085
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG csg_10mb.txt   
     b-rank test for bits 25 to 32
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          975       944.3        .998        .998
          r =5        21709     21743.9        .056       1.054
          r =6        77316     77311.8        .000       1.054
                        p=1-exp(-SUM/2)= .40970
   TEST SUMMARY, 25 tests on 100,000 random 6x8 matrices
 These should be 25 uniform [0,1] random variables:
     .127710     .178269     .687454     .375693     .058367
     .080036     .154179     .483046     .387209     .684687
     .212541     .862559     .877794     .063935     .311421
     .609291     .920067     .028157     .208367     .502756
     .390160     .713317     .145985     .700852     .409699
   brank test summary for csg_10mb.txt   
       The KS test for those 25 supposed UNI's yields
                    KS p-value= .821753

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     ::                   THE BITSTREAM TEST                          ::        
     :: The file under test is viewed as a stream of bits. Call them  ::        
     :: b1,b2,... .  Consider an alphabet with two "letters", 0 and 1 ::        
     :: and think of the stream of bits as a succession of 20-letter  ::        
     :: "words", overlapping.  Thus the first word is b1b2...b20, the ::        
     :: second is b2b3...b21, and so on.  The bitstream test counts   ::        
     :: the number of missing 20-letter (20-bit) words in a string of ::        
     :: 2^21 overlapping 20-letter words.  There are 2^20 possible 20 ::        
     :: letter words.  For a truly random string of 2^21+19 bits, the ::        
     :: number of missing words j should be (very close to) normally  ::        
     :: distributed with mean 141,909 and sigma 428.  Thus            ::        
     ::  (j-141909)/428 should be a standard normal variate (z score) ::        
     :: that leads to a uniform [0,1) p value.  The test is repeated  ::        
     :: twenty times.                                                 ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
 THE OVERLAPPING 20-tuples BITSTREAM  TEST, 20 BITS PER WORD, N words
   This test uses N=2^21 and samples the bitstream 20 times.
  No. missing words should average  141909. with sigma=428.
---------------------------------------------------------
 tst no  1:  142072 missing words,     .38 sigmas from mean, p-value= .64805
 tst no  2:  142122 missing words,     .50 sigmas from mean, p-value= .69037
 tst no  3:  142693 missing words,    1.83 sigmas from mean, p-value= .96645
 tst no  4:  142155 missing words,     .57 sigmas from mean, p-value= .71702
 tst no  5:  141719 missing words,    -.44 sigmas from mean, p-value= .32827
 tst no  6:  142224 missing words,     .74 sigmas from mean, p-value= .76890
 tst no  7:  142395 missing words,    1.13 sigmas from mean, p-value= .87176
 tst no  8:  141730 missing words,    -.42 sigmas from mean, p-value= .33761
 tst no  9:  142452 missing words,    1.27 sigmas from mean, p-value= .89759
 tst no 10:  141484 missing words,    -.99 sigmas from mean, p-value= .16017
 tst no 11:  142711 missing words,    1.87 sigmas from mean, p-value= .96947
 tst no 12:  142025 missing words,     .27 sigmas from mean, p-value= .60652
 tst no 13:  141623 missing words,    -.67 sigmas from mean, p-value= .25175
 tst no 14:  142265 missing words,     .83 sigmas from mean, p-value= .79702
 tst no 15:  142586 missing words,    1.58 sigmas from mean, p-value= .94306
 tst no 16:  141571 missing words,    -.79 sigmas from mean, p-value= .21462
 tst no 17:  141634 missing words,    -.64 sigmas from mean, p-value= .26002
 tst no 18:  141804 missing words,    -.25 sigmas from mean, p-value= .40280
 tst no 19:  141393 missing words,   -1.21 sigmas from mean, p-value= .11384
 tst no 20:  141971 missing words,     .14 sigmas from mean, p-value= .55729

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     ::             The tests OPSO, OQSO and DNA                      ::        
     ::         OPSO means Overlapping-Pairs-Sparse-Occupancy         ::        
     :: The OPSO test considers 2-letter words from an alphabet of    ::        
     :: 1024 letters.  Each letter is determined by a specified ten   ::        
     :: bits from a 32-bit integer in the sequence to be tested. OPSO ::        
     :: generates  2^21 (overlapping) 2-letter words  (from 2^21+1    ::        
     :: "keystrokes")  and counts the number of missing words---that  ::        
     :: is 2-letter words which do not appear in the entire sequence. ::        
     :: That count should be very close to normally distributed with  ::        
     :: mean 141,909, sigma 290. Thus (missingwrds-141909)/290 should ::        
     :: be a standard normal variable. The OPSO test takes 32 bits at ::        
     :: a time from the test file and uses a designated set of ten    ::        
     :: consecutive bits. It then restarts the file for the next de-  ::        
     :: signated 10 bits, and so on.                                  ::        
     ::                                                               ::        
     ::     OQSO means Overlapping-Quadruples-Sparse-Occupancy        ::        
     ::   The test OQSO is similar, except that it considers 4-letter ::        
     :: words from an alphabet of 32 letters, each letter determined  ::        
     :: by a designated string of 5 consecutive bits from the test    ::        
     :: file, elements of which are assumed 32-bit random integers.   ::        
     :: The mean number of missing words in a sequence of 2^21 four-  ::        
     :: letter words,  (2^21+3 "keystrokes"), is again 141909, with   ::        
     :: sigma = 295.  The mean is based on theory; sigma comes from   ::        
     :: extensive simulation.                                         ::        
     ::                                                               ::        
     ::    The DNA test considers an alphabet of 4 letters::  C,G,A,T,::        
     :: determined by two designated bits in the sequence of random   ::        
     :: integers being tested.  It considers 10-letter words, so that ::        
     :: as in OPSO and OQSO, there are 2^20 possible words, and the   ::        
     :: mean number of missing words from a string of 2^21  (over-    ::        
     :: lapping)  10-letter  words (2^21+9 "keystrokes") is 141909.   ::        
     :: The standard deviation sigma=339 was determined as for OQSO   ::        
     :: by simulation.  (Sigma for OPSO, 290, is the true value (to   ::        
     :: three places), not determined by simulation.                  ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
 OPSO test for generator csg_10mb.txt   
  Output: No. missing words (mw), equiv normal variate (z), p-value (p)
                                                           mw     z     p
    OPSO for csg_10mb.txt    using bits 23 to 32        142153   .840  .7996
    OPSO for csg_10mb.txt    using bits 22 to 31        141851  -.201  .4203
    OPSO for csg_10mb.txt    using bits 21 to 30        141901  -.029  .4885
    OPSO for csg_10mb.txt    using bits 20 to 29        141931   .075  .5298
    OPSO for csg_10mb.txt    using bits 19 to 28        141822  -.301  .3817
    OPSO for csg_10mb.txt    using bits 18 to 27        141974   .223  .5882
    OPSO for csg_10mb.txt    using bits 17 to 26        141241 -2.305  .0106
    OPSO for csg_10mb.txt    using bits 16 to 25        141738  -.591  .2773
    OPSO for csg_10mb.txt    using bits 15 to 24        141783  -.436  .3316
    OPSO for csg_10mb.txt    using bits 14 to 23        141594 -1.087  .1384
    OPSO for csg_10mb.txt    using bits 13 to 22        142760  2.933  .9983
    OPSO for csg_10mb.txt    using bits 12 to 21        141920   .037  .5147
    OPSO for csg_10mb.txt    using bits 11 to 20        142129   .757  .7756
    OPSO for csg_10mb.txt    using bits 10 to 19        141190 -2.480  .0066
    OPSO for csg_10mb.txt    using bits  9 to 18        141255 -2.256  .0120
    OPSO for csg_10mb.txt    using bits  8 to 17        141534 -1.294  .0978
    OPSO for csg_10mb.txt    using bits  7 to 16        141652  -.887  .1874
    OPSO for csg_10mb.txt    using bits  6 to 15        142080   .589  .7219
    OPSO for csg_10mb.txt    using bits  5 to 14        141924   .051  .5202
    OPSO for csg_10mb.txt    using bits  4 to 13        142033   .426  .6651
    OPSO for csg_10mb.txt    using bits  3 to 12        142711  2.764  .9971
    OPSO for csg_10mb.txt    using bits  2 to 11        142114   .706  .7598
    OPSO for csg_10mb.txt    using bits  1 to 10        141921   .040  .5161
 OQSO test for generator csg_10mb.txt   
  Output: No. missing words (mw), equiv normal variate (z), p-value (p)
                                                           mw     z     p
    OQSO for csg_10mb.txt    using bits 28 to 32        142009   .338  .6323
    OQSO for csg_10mb.txt    using bits 27 to 31        141563 -1.174  .1202
    OQSO for csg_10mb.txt    using bits 26 to 30        142253  1.165  .8780
    OQSO for csg_10mb.txt    using bits 25 to 29        141382 -1.788  .0369
    OQSO for csg_10mb.txt    using bits 24 to 28        142045   .460  .6772
    OQSO for csg_10mb.txt    using bits 23 to 27        141197 -2.415  .0079
    OQSO for csg_10mb.txt    using bits 22 to 26        141509 -1.357  .0874
    OQSO for csg_10mb.txt    using bits 21 to 25        142139   .779  .7819
    OQSO for csg_10mb.txt    using bits 20 to 24        141674  -.798  .2125
    OQSO for csg_10mb.txt    using bits 19 to 23        141930   .070  .5279
    OQSO for csg_10mb.txt    using bits 18 to 22        141548 -1.225  .1103
    OQSO for csg_10mb.txt    using bits 17 to 21        141887  -.076  .4698
    OQSO for csg_10mb.txt    using bits 16 to 20        141755  -.523  .3004
    OQSO for csg_10mb.txt    using bits 15 to 19        141747  -.550  .2911
    OQSO for csg_10mb.txt    using bits 14 to 18        141318 -2.005  .0225
    OQSO for csg_10mb.txt    using bits 13 to 17        142153   .826  .7956
    OQSO for csg_10mb.txt    using bits 12 to 16        142073   .555  .7105
    OQSO for csg_10mb.txt    using bits 11 to 15        141788  -.411  .3404
    OQSO for csg_10mb.txt    using bits 10 to 14        141323 -1.988  .0234
    OQSO for csg_10mb.txt    using bits  9 to 13        141776  -.452  .3256
    OQSO for csg_10mb.txt    using bits  8 to 12        141905  -.015  .4941
    OQSO for csg_10mb.txt    using bits  7 to 11        141427 -1.635  .0510
    OQSO for csg_10mb.txt    using bits  6 to 10        141933   .080  .5320
    OQSO for csg_10mb.txt    using bits  5 to  9        142500  2.002  .9774
    OQSO for csg_10mb.txt    using bits  4 to  8        142317  1.382  .9165
    OQSO for csg_10mb.txt    using bits  3 to  7        142342  1.467  .9288
    OQSO for csg_10mb.txt    using bits  2 to  6        141857  -.177  .4296
    OQSO for csg_10mb.txt    using bits  1 to  5        142006   .328  .6284
  DNA test for generator csg_10mb.txt   
  Output: No. missing words (mw), equiv normal variate (z), p-value (p)
                                                           mw     z     p
     DNA for csg_10mb.txt    using bits 31 to 32        142153   .719  .7639
     DNA for csg_10mb.txt    using bits 30 to 31        141567 -1.010  .1563
     DNA for csg_10mb.txt    using bits 29 to 30        141489 -1.240  .1075
     DNA for csg_10mb.txt    using bits 28 to 29        141847  -.184  .4271
     DNA for csg_10mb.txt    using bits 27 to 28        142482  1.689  .9544
     DNA for csg_10mb.txt    using bits 26 to 27        141583  -.963  .1679
     DNA for csg_10mb.txt    using bits 25 to 26        141353 -1.641  .0504
     DNA for csg_10mb.txt    using bits 24 to 25        141572  -.995  .1599
     DNA for csg_10mb.txt    using bits 23 to 24        142226   .934  .8249
     DNA for csg_10mb.txt    using bits 22 to 23        141629  -.827  .2041
     DNA for csg_10mb.txt    using bits 21 to 22        141817  -.272  .3927
     DNA for csg_10mb.txt    using bits 20 to 21        141500 -1.207  .1136
     DNA for csg_10mb.txt    using bits 19 to 20        141978   .203  .5803
     DNA for csg_10mb.txt    using bits 18 to 19        141834  -.222  .4121
     DNA for csg_10mb.txt    using bits 17 to 18        141751  -.467  .3202
     DNA for csg_10mb.txt    using bits 16 to 17        142165   .754  .7746
     DNA for csg_10mb.txt    using bits 15 to 16        142128   .645  .7406
     DNA for csg_10mb.txt    using bits 14 to 15        142396  1.436  .9244
     DNA for csg_10mb.txt    using bits 13 to 14        142315  1.197  .8843
     DNA for csg_10mb.txt    using bits 12 to 13        141705  -.603  .2733
     DNA for csg_10mb.txt    using bits 11 to 12        142414  1.489  .9317
     DNA for csg_10mb.txt    using bits 10 to 11        142194   .840  .7995
     DNA for csg_10mb.txt    using bits  9 to 10        141158 -2.216  .0133
     DNA for csg_10mb.txt    using bits  8 to  9        142487  1.704  .9558
     DNA for csg_10mb.txt    using bits  7 to  8        142088   .527  .7009
     DNA for csg_10mb.txt    using bits  6 to  7        141788  -.358  .3602
     DNA for csg_10mb.txt    using bits  5 to  6        141685  -.662  .2541
     DNA for csg_10mb.txt    using bits  4 to  5        142293  1.132  .8711
     DNA for csg_10mb.txt    using bits  3 to  4        142058   .439  .6695
     DNA for csg_10mb.txt    using bits  2 to  3        141469 -1.299  .0970
     DNA for csg_10mb.txt    using bits  1 to  2        141866  -.128  .4491

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     ::     This is the COUNT-THE-1's TEST on a stream of bytes.      ::        
     :: Consider the file under test as a stream of bytes (four per   ::        
     :: 32 bit integer).  Each byte can contain from 0 to 8 1's,      ::        
     :: with probabilities 1,8,28,56,70,56,28,8,1 over 256.  Now let  ::        
     :: the stream of bytes provide a string of overlapping  5-letter ::        
     :: words, each "letter" taking values A,B,C,D,E. The letters are ::        
     :: determined by the number of 1's in a byte::  0,1,or 2 yield A,::        
     :: 3 yields B, 4 yields C, 5 yields D and 6,7 or 8 yield E. Thus ::        
     :: we have a monkey at a typewriter hitting five keys with vari- ::        
     :: ous probabilities (37,56,70,56,37 over 256).  There are 5^5   ::        
     :: possible 5-letter words, and from a string of 256,000 (over-  ::        
     :: lapping) 5-letter words, counts are made on the frequencies   ::        
     :: for each word.   The quadratic form in the weak inverse of    ::        
     :: the covariance matrix of the cell counts provides a chisquare ::        
     :: test::  Q5-Q4, the difference of the naive Pearson sums of    ::        
     :: (OBS-EXP)^2/EXP on counts for 5- and 4-letter cell counts.    ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
   Test results for csg_10mb.txt   
 Chi-square with 5^5-5^4=2500 d.of f. for sample size:2560000
                               chisquare  equiv normal  p-value
  Results fo COUNT-THE-1's in successive bytes:
 byte stream for csg_10mb.txt     2551.31       .726      .765984
 byte stream for csg_10mb.txt     2427.75     -1.022      .153435

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     ::     This is the COUNT-THE-1's TEST for specific bytes.        ::        
     :: Consider the file under test as a stream of 32-bit integers.  ::        
     :: From each integer, a specific byte is chosen , say the left-  ::        
     :: most::  bits 1 to 8. Each byte can contain from 0 to 8 1's,   ::        
     :: with probabilitie 1,8,28,56,70,56,28,8,1 over 256.  Now let   ::        
     :: the specified bytes from successive integers provide a string ::        
     :: of (overlapping) 5-letter words, each "letter" taking values  ::        
     :: A,B,C,D,E. The letters are determined  by the number of 1's,  ::        
     :: in that byte::  0,1,or 2 ---> A, 3 ---> B, 4 ---> C, 5 ---> D,::        
     :: and  6,7 or 8 ---> E.  Thus we have a monkey at a typewriter  ::        
     :: hitting five keys with with various probabilities::  37,56,70,::        
     :: 56,37 over 256. There are 5^5 possible 5-letter words, and    ::        
     :: from a string of 256,000 (overlapping) 5-letter words, counts ::        
     :: are made on the frequencies for each word. The quadratic form ::        
     :: in the weak inverse of the covariance matrix of the cell      ::        
     :: counts provides a chisquare test::  Q5-Q4, the difference of  ::        
     :: the naive Pearson  sums of (OBS-EXP)^2/EXP on counts for 5-   ::        
     :: and 4-letter cell counts.                                     ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
 Chi-square with 5^5-5^4=2500 d.of f. for sample size: 256000
                      chisquare  equiv normal  p value
  Results for COUNT-THE-1's in specified bytes:
           bits  1 to  8  2431.23      -.973      .165399
           bits  2 to  9  2535.34       .500      .691400
           bits  3 to 10  2508.60       .122      .548421
           bits  4 to 11  2493.08      -.098      .461016
           bits  5 to 12  2494.16      -.083      .467068
           bits  6 to 13  2551.66       .731      .767465
           bits  7 to 14  2446.22      -.761      .223465
           bits  8 to 15  2543.32       .613      .729922
           bits  9 to 16  2557.49       .813      .791913
           bits 10 to 17  2486.59      -.190      .424818
           bits 11 to 18  2458.71      -.584      .279655
           bits 12 to 19  2452.22      -.676      .249602
           bits 13 to 20  2497.16      -.040      .483985
           bits 14 to 21  2541.75       .590      .722555
           bits 15 to 22  2547.92       .678      .751019
           bits 16 to 23  2406.89     -1.317      .093958
           bits 17 to 24  2531.30       .443      .670966
           bits 18 to 25  2387.19     -1.595      .055312
           bits 19 to 26  2490.63      -.133      .447285
           bits 20 to 27  2533.37       .472      .681503
           bits 21 to 28  2558.99       .834      .797942
           bits 22 to 29  2387.92     -1.585      .056485
           bits 23 to 30  2568.08       .963      .832185
           bits 24 to 31  2429.14     -1.002      .158161
           bits 25 to 32  2423.25     -1.085      .138858

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     ::               THIS IS A PARKING LOT TEST                      ::        
     :: In a square of side 100, randomly "park" a car---a circle of  ::        
     :: radius 1.   Then try to park a 2nd, a 3rd, and so on, each    ::        
     :: time parking "by ear".  That is, if an attempt to park a car  ::        
     :: causes a crash with one already parked, try again at a new    ::        
     :: random location. (To avoid path problems, consider parking    ::        
     :: helicopters rather than cars.)   Each attempt leads to either ::        
     :: a crash or a success, the latter followed by an increment to  ::        
     :: the list of cars already parked. If we plot n:  the number of ::        
     :: attempts, versus k::  the number successfully parked, we get a::        
     :: curve that should be similar to those provided by a perfect   ::        
     :: random number generator.  Theory for the behavior of such a   ::        
     :: random curve seems beyond reach, and as graphics displays are ::        
     :: not available for this battery of tests, a simple characteriz ::        
     :: ation of the random experiment is used: k, the number of cars ::        
     :: successfully parked after n=12,000 attempts. Simulation shows ::        
     :: that k should average 3523 with sigma 21.9 and is very close  ::        
     :: to normally distributed.  Thus (k-3523)/21.9 should be a st-  ::        
     :: andard normal variable, which, converted to a uniform varia-  ::        
     :: ble, provides input to a KSTEST based on a sample of 10.      ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
           CDPARK: result of ten tests on file csg_10mb.txt   
            Of 12,000 tries, the average no. of successes
                 should be 3523 with sigma=21.9
            Successes: 3510    z-score:  -.594 p-value: .276387
            Successes: 3517    z-score:  -.274 p-value: .392053
            Successes: 3549    z-score:  1.187 p-value: .882429
            Successes: 3508    z-score:  -.685 p-value: .246694
            Successes: 3509    z-score:  -.639 p-value: .261324
            Successes: 3524    z-score:   .046 p-value: .518210
            Successes: 3515    z-score:  -.365 p-value: .357445
            Successes: 3511    z-score:  -.548 p-value: .291865
            Successes: 3545    z-score:  1.005 p-value: .842447
            Successes: 3531    z-score:   .365 p-value: .642555
 
           square size   avg. no.  parked   sample sigma
             100.            3521.900       14.297
            KSTEST for the above 10: p=  .493966

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     ::               THE MINIMUM DISTANCE TEST                       ::        
     :: It does this 100 times::   choose n=8000 random points in a   ::        
     :: square of side 10000.  Find d, the minimum distance between   ::        
     :: the (n^2-n)/2 pairs of points.  If the points are truly inde- ::        
     :: pendent uniform, then d^2, the square of the minimum distance ::        
     :: should be (very close to) exponentially distributed with mean ::        
     :: .995 .  Thus 1-exp(-d^2/.995) should be uniform on [0,1) and  ::        
     :: a KSTEST on the resulting 100 values serves as a test of uni- ::        
     :: formity for random points in the square. Test numbers=0 mod 5 ::        
     :: are printed but the KSTEST is based on the full set of 100    ::        
     :: random choices of 8000 points in the 10000x10000 square.      ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
               This is the MINIMUM DISTANCE test
              for random integers in the file csg_10mb.txt   
     Sample no.    d^2     avg     equiv uni            
           5    1.3086   1.1465     .731582
          10     .3242    .9990     .278037
          15     .4154   1.0512     .341296
          20     .1622   1.2922     .150451
          25    2.0874   1.2881     .877286
          30     .7056   1.1970     .507939
          35    2.3724   1.1774     .907851
          40     .0712   1.1120     .069082
          45    5.2213   1.1724     .994739
          50    1.9912   1.1717     .864822
          55    2.1889   1.1659     .889189
          60     .2473   1.1638     .220033
          65     .5689   1.1711     .435447
          70    2.0847   1.1620     .876947
          75     .4003   1.1339     .331217
          80    2.1820   1.1059     .888411
          85     .8123   1.0785     .557969
          90     .1029   1.1046     .098282
          95     .0389   1.0942     .038332
         100     .3536   1.1021     .299057
     MINIMUM DISTANCE TEST for csg_10mb.txt   
          Result of KS test on 20 transformed mindist^2's:
                                  p-value= .600330

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ 

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     ::              THE 3DSPHERES TEST                               ::        
     :: Choose  4000 random points in a cube of edge 1000.  At each   ::        
     :: point, center a sphere large enough to reach the next closest ::        
     :: point. Then the volume of the smallest such sphere is (very   ::        
     :: close to) exponentially distributed with mean 120pi/3.  Thus  ::        
     :: the radius cubed is exponential with mean 30. (The mean is    ::        
     :: obtained by extensive simulation).  The 3DSPHERES test gener- ::        
     :: ates 4000 such spheres 20 times.  Each min radius cubed leads ::        
     :: to a uniform variable by means of 1-exp(-r^3/30.), then a     ::        
     ::  KSTEST is done on the 20 p-values.                           ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
               The 3DSPHERES test for file csg_10mb.txt   
 sample no:  1     r^3=  31.806     p-value= .65361
 sample no:  2     r^3=  56.056     p-value= .84565
 sample no:  3     r^3= 105.428     p-value= .97023
 sample no:  4     r^3=  40.707     p-value= .74254
 sample no:  5     r^3=   9.919     p-value= .28154
 sample no:  6     r^3=  16.828     p-value= .42932
 sample no:  7     r^3=  18.427     p-value= .45894
 sample no:  8     r^3=   7.452     p-value= .21995
 sample no:  9     r^3=  27.896     p-value= .60539
 sample no: 10     r^3=  44.300     p-value= .77160
 sample no: 11     r^3=   2.281     p-value= .07321
 sample no: 12     r^3=  15.065     p-value= .39477
 sample no: 13     r^3=  60.498     p-value= .86689
 sample no: 14     r^3=  41.343     p-value= .74794
 sample no: 15     r^3=  65.095     p-value= .88580
 sample no: 16     r^3=  74.137     p-value= .91552
 sample no: 17     r^3=  29.418     p-value= .62491
 sample no: 18     r^3=  32.132     p-value= .65736
 sample no: 19     r^3=  70.152     p-value= .90352
 sample no: 20     r^3=  21.021     p-value= .50376
  A KS test is applied to those 20 p-values.
---------------------------------------------------------
       3DSPHERES test for file csg_10mb.txt         p-value= .919908
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     ::      This is the SQEEZE test                                  ::        
     ::  Random integers are floated to get uniforms on [0,1). Start- ::        
     ::  ing with k=2^31=2147483647, the test finds j, the number of  ::        
     ::  iterations necessary to reduce k to 1, using the reduction   ::        
     ::  k=ceiling(k*U), with U provided by floating integers from    ::        
     ::  the file being tested.  Such j's are found 100,000 times,    ::        
     ::  then counts for the number of times j was <=6,7,...,47,>=48  ::        
     ::  are used to provide a chi-square test for cell frequencies.  ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
            RESULTS OF SQUEEZE TEST FOR csg_10mb.txt   
         Table of standardized frequency counts
     ( (obs-exp)/sqrt(exp) )^2
        for j taking values <=6,7,8,...,47,>=48:
     -.8    -2.0     -.4    -1.3     1.6     -.9
      .4      .7      .1     -.8     1.2    -1.2
      .8     -.9     1.2     -.2     1.1     -.1
     -.3     -.1     -.5     -.4    -1.2    -1.4
     -.8      .5      .2     2.3      .8      .4
     1.0      .3     1.3     1.0     -.1      .6
     -.5     1.5     1.7     -.7     -.6    -1.0
    -1.1
           Chi-square with 42 degrees of freedom: 41.254
              z-score=  -.081  p-value= .496335
______________________________________________________________

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     ::             The  OVERLAPPING SUMS test                        ::        
     :: Integers are floated to get a sequence U(1),U(2),... of uni-  ::        
     :: form [0,1) variables.  Then overlapping sums,                 ::        
     ::   S(1)=U(1)+...+U(100), S2=U(2)+...+U(101),... are formed.    ::        
     :: The S's are virtually normal with a certain covariance mat-   ::        
     :: rix.  A linear transformation of the S's converts them to a   ::        
     :: sequence of independent standard normals, which are converted ::        
     :: to uniform variables for a KSTEST. The  p-values from ten     ::        
     :: KSTESTs are given still another KSTEST.                       ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
                Test no.  1      p-value  .667793
                Test no.  2      p-value  .963327
                Test no.  3      p-value  .586151
                Test no.  4      p-value  .122023
                Test no.  5      p-value  .868854
                Test no.  6      p-value  .638795
                Test no.  7      p-value  .161165
                Test no.  8      p-value  .177704
                Test no.  9      p-value  .138000
                Test no. 10      p-value  .051665
   Results of the OSUM test for csg_10mb.txt   
        KSTEST on the above 10 p-values:  .534914

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     ::     This is the RUNS test.  It counts runs up, and runs down, ::        
     :: in a sequence of uniform [0,1) variables, obtained by float-  ::        
     :: ing the 32-bit integers in the specified file. This example   ::        
     :: shows how runs are counted:  .123,.357,.789,.425,.224,.416,.95::        
     :: contains an up-run of length 3, a down-run of length 2 and an ::        
     :: up-run of (at least) 2, depending on the next values.  The    ::        
     :: covariance matrices for the runs-up and runs-down are well    ::        
     :: known, leading to chisquare tests for quadratic forms in the  ::        
     :: weak inverses of the covariance matrices.  Runs are counted   ::        
     :: for sequences of length 10,000.  This is done ten times. Then ::        
     :: repeated.                                                     ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
           The RUNS test for file csg_10mb.txt   
     Up and down runs in a sample of 10000
_________________________________________________ 
                 Run test for csg_10mb.txt   :
       runs up; ks test for 10 p's: .959513
     runs down; ks test for 10 p's: .297879
                 Run test for csg_10mb.txt   :
       runs up; ks test for 10 p's: .217947
     runs down; ks test for 10 p's: .125894

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     :: This is the CRAPS TEST. It plays 200,000 games of craps, finds::        
     :: the number of wins and the number of throws necessary to end  ::        
     :: each game.  The number of wins should be (very close to) a    ::        
     :: normal with mean 200000p and variance 200000p(1-p), with      ::        
     :: p=244/495.  Throws necessary to complete the game can vary    ::        
     :: from 1 to infinity, but counts for all>21 are lumped with 21. ::        
     :: A chi-square test is made on the no.-of-throws cell counts.   ::        
     :: Each 32-bit integer from the test file provides the value for ::        
     :: the throw of a die, by floating to [0,1), multiplying by 6    ::        
     :: and taking 1 plus the integer part of the result.             ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
                Results of craps test for csg_10mb.txt   
  No. of wins:  Observed Expected
                                98588    98585.86
                  98588= No. of wins, z-score=  .010 pvalue= .50382
   Analysis of Throws-per-Game:
 Chisq=  18.83 for 20 degrees of freedom, p=  .46697
               Throws Observed Expected  Chisq     Sum
                  1    66843    66666.7    .466     .466
                  2    37480    37654.3    .807    1.273
                  3    27115    26954.7    .953    2.226
                  4    19358    19313.5    .103    2.329
                  5    13907    13851.4    .223    2.552
                  6     9834     9943.5   1.207    3.759
                  7     7170     7145.0    .087    3.846
                  8     5135     5139.1    .003    3.849
                  9     3703     3699.9    .003    3.852
                 10     2677     2666.3    .043    3.895
                 11     1873     1923.3   1.317    5.212
                 12     1343     1388.7   1.507    6.719
                 13      984     1003.7    .387    7.106
                 14      719      726.1    .070    7.176
                 15      495      525.8   1.808    8.984
                 16      369      381.2    .387    9.372
                 17      261      276.5    .873   10.245
                 18      171      200.8   4.431   14.675
                 19      135      146.0    .826   15.502
                 20      111      106.2    .216   15.718
                 21      317      287.1   3.111   18.828
            SUMMARY  FOR csg_10mb.txt   
                p-value for no. of wins: .503819
                p-value for throws/game: .466972

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

 Results of DIEHARD battery of tests sent to file rescsg.txt     
