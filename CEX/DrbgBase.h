#ifndef CEX_DRBGBASE_H
#define CEX_DRBGBASE_H

#include "IDrbg.h"

NAMESPACE_DRBG

/// <summary>
/// The KDF base class; this is not an operable class
/// </summary>
class DrbgBase : public IDrbg
{
private:

	bool m_cyclicReseed;
	Drbgs m_drbgEnumeral;
	std::string m_drbgName;
	std::vector<SymmetricKeySize> m_legalKeySizes;
	uint64_t m_maxOutput;
	size_t m_maxRequest;
	size_t m_maxReseed;

public:

	//~~~Constructor~~~//

	/// <summary>
	/// Copy constructor: copy is restricted, this function has been deleted
	/// </summary>
	DrbgBase(const DrbgBase&) = delete;

	/// <summary>
	/// Copy operator: copy is restricted, this function has been deleted
	/// </summary>
	DrbgBase& operator=(const DrbgBase&) = delete;

	/// <summary>
	/// Default constructor: the default constructor is restricted, this function has been deleted
	/// </summary>
	DrbgBase() = delete;

	/// <summary>
	/// Constructor: instantiate this class (private member)
	/// </summary>
	///
	/// <param name="Enumeral">The DRBGs enumeration name</param>
	/// <param name="Name">The DRBGs formal class name</param>
	/// <param name="KeySizes">A vector of legal SymmetricKeySize used by the DRBG</param>
	/// <param name="MaxOutput">The maximum allowed bytes generated with the same key</param>
	/// <param name="MaxRequest">The maximum number of bytes that can be generated by a single request</param>
	/// <param name="MaxReseed">The maximum number of times the generator can be reseeded before the instance is invalid</param>
	DrbgBase(Drbgs Enumeral, std::string Name, std::vector<SymmetricKeySize> KeySizes, uint64_t MaxOutput, size_t MaxRequest, size_t MaxReseed);

	/// <summary>
	/// Destructor: finalize this class
	/// </summary>
	~DrbgBase();

	//~~~Accessors~~~//

	/// <summary>
	/// Read/Write: If the random provider is specified, reseeds the generator after each generation call.
	/// </summary>
	const bool &CyclicReseed() override;

	/// <summary>
	/// Read Only: The prngs type name
	/// </summary>
	const Drbgs Enumeral() override;

	/// <summary>
	/// Read Only: Available KDF Key Sizes in SymmetricKeySize containers
	/// </summary>
	const std::vector<SymmetricKeySize> LegalKeySizes() override;

	/// <summary>
	/// Read Only: The maximum number of bytes that can be generated with a generator instance
	/// </summary>
	const uint64_t MaxOutputSize() override;

	/// <summary>
	/// Read Only: The maximum number of bytes that can be generated in a single request
	/// </summary>
	const size_t MaxRequestSize() override;

	/// <summary>
	/// Read Only: The maximum number of times the generator can be reseeded
	/// </summary>
	const size_t MaxReseedCount() override;

	/// <summary>
	/// Read Only: The DRBGs formal class name
	/// </summary>
	const std::string Name() override;
};

NAMESPACE_DRBGEND
#endif
