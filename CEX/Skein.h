// The GPL version 3 License (GPLv3)
// 
// Copyright (c) 2023 QSCS.ca
// This file is part of the CEX Cryptographic library.
// 
// This program is free software : you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

#ifndef CEX_SKEIN_H
#define CEX_SKEIN_H

#include "CexDomain.h"
#include "IntegerTools.h"

#if defined(CEX_HAS_AVX2)
#	include "Intrinsics.h"
#endif

NAMESPACE_DIGEST

using Tools::IntegerTools;

/// <summary>
/// Contains the Skein 256, 512, and 1024bit permutation functions.
/// <para>The function names are in the format; Permute-rounds-bits-suffix, ex. PemuteR72P256C, 72 rounds, permutes 256 bits, using the compact form of the function. \n
/// The compact forms of the permutations have the suffix C, and are optimized for performance and low memory consumption 
/// (enabled in the hash function by adding the CEX_DIGEST_COMPACT to the CexConfig file). \n
/// The Unrolled forms are optimized for speed and timing neutrality (suffix U), and the vertically vectorized functions have the V suffix.</para>
/// </summary>
class Skein
{
public:

	static const size_t SKEIN256_DIGEST_SIZE = 32;
	static const size_t SKEIN512_DIGEST_SIZE = 64;
	static const size_t SKEIN1024_DIGEST_SIZE = 128;
	static const size_t SKEIN256_RATE_SIZE = 32;
	static const size_t SKEIN512_RATE_SIZE = 64;
	static const size_t SKEIN1024_RATE_SIZE = 128;

	//~~~Skein-256~~~//

	/// <summary>
	/// The compact form of the Skein-256 variable rounds permutation function.
	/// <para>This function has been optimized for a small memory consumption.
	/// To enable this function, add the CEX_DIGEST_COMPACT directive to the CexConfig file.</para>
	/// </summary>
	/// 
	/// <param name="Input">The input message array</param>
	/// <param name="Tweak">The cipher tweak array</param>
	/// <param name="State">The permutations state array</param>
	/// <param name="Rounds">The number of mixing rounds; the default is 72</param>
	template<typename ArrayU64x2, typename ArrayU64x4>
	static void PemuteP256C(const ArrayU64x4 &Input, const ArrayU64x2 &Tweak, ArrayU64x4 &State, size_t Rounds)
	{
		std::array<uint64_t, 4> B;
		std::array<uint64_t, 5> K;
		std::array<uint64_t, 3> T;
		size_t i;
		size_t r;
		size_t x;
		size_t y;

		MemoryTools::Copy(Input, 0, B, 0, 4 * sizeof(uint64_t));
		MemoryTools::Copy(State, 0, K, 0, 4 * sizeof(uint64_t));
		MemoryTools::Copy(Tweak, 0, T, 0, 2 * sizeof(uint64_t));

		r = Rounds / 8;
		x = 1;
		y = 0;
		K[4] = K[0] ^ K[1] ^ K[2] ^ K[3] ^ 0x1BD11BDAA9FC1A22ULL;
		T[2] = T[0] ^ T[1];

		for (i = 0; i < r; ++i)
		{
			// round n+8, inject k
			B[1] += K[x] + T[y];
			x != 0 ? x -= 1 : x += 4;
			B[0] += B[1] + K[x];
			B[1] = IntegerTools::RotL64(B[1], 14) ^ B[0];
			// mix
			x > 1 ? x -= 2 : x += 3;
			B[3] += K[x] + (i * 2);
			x > 0 ? x -= 1 : x += 4;
			y != 2 ? y += 1 : y -= 2;
			B[2] += B[3] + K[x] + T[y];
			B[3] = IntegerTools::RotL64(B[3], 16) ^ B[2];
			B[0] += B[3];
			B[3] = IntegerTools::RotL64(B[3], 52) ^ B[0];
			B[2] += B[1];
			B[1] = IntegerTools::RotL64(B[1], 57) ^ B[2];
			B[0] += B[1];
			B[1] = IntegerTools::RotL64(B[1], 23) ^ B[0];
			B[2] += B[3];
			B[3] = IntegerTools::RotL64(B[3], 40) ^ B[2];
			B[0] += B[3];
			B[3] = IntegerTools::RotL64(B[3], 5) ^ B[0];
			B[2] += B[1];
			B[1] = IntegerTools::RotL64(B[1], 37) ^ B[2];
			// inject
			B[1] += K[x] + T[y];
			x != 0 ? x -= 1 : x += 4;
			B[0] += B[1] + K[x];
			B[1] = IntegerTools::RotL64(B[1], 25) ^ B[0];
			// mix
			x > 1 ? x -= 2 : x += 3;
			B[3] += K[x] + (i * 2) + 1;
			x != 0 ? x -= 1 : x += 4;
			y != 2 ? y += 1 : y -= 2;
			B[2] += B[3] + K[x] + T[y];
			B[3] = IntegerTools::RotL64(B[3], 33) ^ B[2];
			B[0] += B[3];
			B[3] = IntegerTools::RotL64(B[3], 46) ^ B[0];
			B[2] += B[1];
			B[1] = IntegerTools::RotL64(B[1], 12) ^ B[2];
			B[0] += B[1];
			B[1] = IntegerTools::RotL64(B[1], 58) ^ B[0];
			B[2] += B[3];
			B[3] = IntegerTools::RotL64(B[3], 22) ^ B[2];
			B[0] += B[3];
			B[3] = IntegerTools::RotL64(B[3], 32) ^ B[0];
			B[2] += B[1];
			B[1] = IntegerTools::RotL64(B[1], 32) ^ B[2];
		}

		B[0] += K[3];
		B[1] += K[4] + T[0];
		B[2] += K[0] + T[1];
		B[3] += K[1] + (Rounds / 4);

		MemoryTools::Copy(B, 0, State, 0, 4 * sizeof(uint64_t));
	}

	/// <summary>
	/// The unrolled form of the Skein-256 72 round permutation function.
	/// <para>This function (the default) has been optimized for speed, and timing neutrality.
	/// To enable this function, remove the CEX_DIGEST_COMPACT directive from the CexConfig file.</para>
	/// </summary>
	/// 
	/// <param name="Input">The input message array</param>
	/// <param name="Tweak">The cipher tweak array</param>
	/// <param name="State">The permutations state array</param>
	template<typename ArrayU64x2, typename ArrayU64x4>
	static void PemuteR72P256U(const ArrayU64x4 &Input, const ArrayU64x2 &Tweak, ArrayU64x4 &State)
	{
		uint64_t B0;
		uint64_t B1;
		uint64_t B2;
		uint64_t B3;
		uint64_t K0;
		uint64_t K1;
		uint64_t K2;
		uint64_t K3;
		uint64_t K4;
		uint64_t T0;
		uint64_t T1;
		uint64_t T2;

		B0 = Input[0];
		B1 = Input[1];
		B2 = Input[2];
		B3 = Input[3];
		K0 = State[0];
		K1 = State[1];
		K2 = State[2];
		K3 = State[3];
		K4 = K0 ^ K1 ^ K2 ^ K3 ^ 0x1BD11BDAA9FC1A22ULL;
		T0 = Tweak[0];
		T1 = Tweak[1];
		T2 = Tweak[0] ^ Tweak[1];

		// rounds 0-7, inject k
		B1 += K1 + T0;
		B0 += B1 + K0;
		B1 = IntegerTools::RotL64(B1, 14) ^ B0;
		// mix
		B3 += K3;
		B2 += B3 + K2 + T1;
		B3 = IntegerTools::RotL64(B3, 16) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 52) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 57) ^ B2;
		B0 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B0;
		B2 += B3;
		B3 = IntegerTools::RotL64(B3, 40) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 5) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 37) ^ B2;
		// inject
		B1 += K2 + T1;
		B0 += B1 + K1;
		B1 = IntegerTools::RotL64(B1, 25) ^ B0;
		// mix
		B3 += K4 + 1;
		B2 += B3 + K3 + T2;
		B3 = IntegerTools::RotL64(B3, 33) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 46) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 12) ^ B2;
		B0 += B1;
		B1 = IntegerTools::RotL64(B1, 58) ^ B0;
		B2 += B3;
		B3 = IntegerTools::RotL64(B3, 22) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 32) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 32) ^ B2;
		// rounds 8-15
		B1 += K3 + T2;
		B0 += B1 + K2;
		B1 = IntegerTools::RotL64(B1, 14) ^ B0;
		B3 += K0 + 2;
		B2 += B3 + K4 + T0;
		B3 = IntegerTools::RotL64(B3, 16) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 52) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 57) ^ B2;
		B0 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B0;
		B2 += B3;
		B3 = IntegerTools::RotL64(B3, 40) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 5) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 37) ^ B2;
		B1 += K4 + T0;
		B0 += B1 + K3;
		B1 = IntegerTools::RotL64(B1, 25) ^ B0;
		B3 += K1 + 3;
		B2 += B3 + K0 + T1;
		B3 = IntegerTools::RotL64(B3, 33) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 46) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 12) ^ B2;
		B0 += B1;
		B1 = IntegerTools::RotL64(B1, 58) ^ B0;
		B2 += B3;
		B3 = IntegerTools::RotL64(B3, 22) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 32) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 32) ^ B2;
		// rounds 16-23
		B1 += K0 + T1;
		B0 += B1 + K4;
		B1 = IntegerTools::RotL64(B1, 14) ^ B0;
		B3 += K2 + 4;
		B2 += B3 + K1 + T2;
		B3 = IntegerTools::RotL64(B3, 16) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 52) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 57) ^ B2;
		B0 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B0;
		B2 += B3;
		B3 = IntegerTools::RotL64(B3, 40) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 5) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 37) ^ B2;
		B1 += K1 + T2;
		B0 += B1 + K0;
		B1 = IntegerTools::RotL64(B1, 25) ^ B0;
		B3 += K3 + 5;
		B2 += B3 + K2 + T0;
		B3 = IntegerTools::RotL64(B3, 33) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 46) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 12) ^ B2;
		B0 += B1;
		B1 = IntegerTools::RotL64(B1, 58) ^ B0;
		B2 += B3;
		B3 = IntegerTools::RotL64(B3, 22) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 32) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 32) ^ B2;
		// rounds 24-31
		B1 += K2 + T0;
		B0 += B1 + K1;
		B1 = IntegerTools::RotL64(B1, 14) ^ B0;
		B3 += K4 + 6;
		B2 += B3 + K3 + T1;
		B3 = IntegerTools::RotL64(B3, 16) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 52) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 57) ^ B2;
		B0 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B0;
		B2 += B3;
		B3 = IntegerTools::RotL64(B3, 40) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 5) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 37) ^ B2;
		B1 += K3 + T1;
		B0 += B1 + K2;
		B1 = IntegerTools::RotL64(B1, 25) ^ B0;
		B3 += K0 + 7;
		B2 += B3 + K4 + T2;
		B3 = IntegerTools::RotL64(B3, 33) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 46) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 12) ^ B2;
		B0 += B1;
		B1 = IntegerTools::RotL64(B1, 58) ^ B0;
		B2 += B3;
		B3 = IntegerTools::RotL64(B3, 22) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 32) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 32) ^ B2;
		// rounds 32-39
		B1 += K4 + T2;
		B0 += B1 + K3;
		B1 = IntegerTools::RotL64(B1, 14) ^ B0;
		B3 += K1 + 8;
		B2 += B3 + K0 + T0;
		B3 = IntegerTools::RotL64(B3, 16) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 52) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 57) ^ B2;
		B0 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B0;
		B2 += B3;
		B3 = IntegerTools::RotL64(B3, 40) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 5) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 37) ^ B2;
		B1 += K0 + T0;
		B0 += B1 + K4;
		B1 = IntegerTools::RotL64(B1, 25) ^ B0;
		B3 += K2 + 9;
		B2 += B3 + K1 + T1;
		B3 = IntegerTools::RotL64(B3, 33) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 46) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 12) ^ B2;
		B0 += B1;
		B1 = IntegerTools::RotL64(B1, 58) ^ B0;
		B2 += B3;
		B3 = IntegerTools::RotL64(B3, 22) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 32) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 32) ^ B2;
		// rounds 40-47
		B1 += K1 + T1;
		B0 += B1 + K0;
		B1 = IntegerTools::RotL64(B1, 14) ^ B0;
		B3 += K3 + 10;
		B2 += B3 + K2 + T2;
		B3 = IntegerTools::RotL64(B3, 16) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 52) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 57) ^ B2;
		B0 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B0;
		B2 += B3;
		B3 = IntegerTools::RotL64(B3, 40) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 5) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 37) ^ B2;
		B1 += K2 + T2;
		B0 += B1 + K1;
		B1 = IntegerTools::RotL64(B1, 25) ^ B0;
		B3 += K4 + 11;
		B2 += B3 + K3 + T0;
		B3 = IntegerTools::RotL64(B3, 33) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 46) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 12) ^ B2;
		B0 += B1;
		B1 = IntegerTools::RotL64(B1, 58) ^ B0;
		B2 += B3;
		B3 = IntegerTools::RotL64(B3, 22) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 32) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 32) ^ B2;
		// rounds 48-55
		B1 += K3 + T0;
		B0 += B1 + K2;
		B1 = IntegerTools::RotL64(B1, 14) ^ B0;
		B3 += K0 + 12;
		B2 += B3 + K4 + T1;
		B3 = IntegerTools::RotL64(B3, 16) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 52) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 57) ^ B2;
		B0 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B0;
		B2 += B3;
		B3 = IntegerTools::RotL64(B3, 40) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 5) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 37) ^ B2;
		B1 += K4 + T1;
		B0 += B1 + K3;
		B1 = IntegerTools::RotL64(B1, 25) ^ B0;
		B3 += K1 + 13;
		B2 += B3 + K0 + T2;
		B3 = IntegerTools::RotL64(B3, 33) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 46) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 12) ^ B2;
		B0 += B1;
		B1 = IntegerTools::RotL64(B1, 58) ^ B0;
		B2 += B3;
		B3 = IntegerTools::RotL64(B3, 22) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 32) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 32) ^ B2;
		// rounds 56-63
		B1 += K0 + T2;
		B0 += B1 + K4;
		B1 = IntegerTools::RotL64(B1, 14) ^ B0;
		B3 += K2 + 14;
		B2 += B3 + K1 + T0;
		B3 = IntegerTools::RotL64(B3, 16) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 52) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 57) ^ B2;
		B0 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B0;
		B2 += B3;
		B3 = IntegerTools::RotL64(B3, 40) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 5) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 37) ^ B2;
		B1 += K1 + T0;
		B0 += B1 + K0;
		B1 = IntegerTools::RotL64(B1, 25) ^ B0;
		B3 += K3 + 15;
		B2 += B3 + K2 + T1;
		B3 = IntegerTools::RotL64(B3, 33) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 46) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 12) ^ B2;
		B0 += B1;
		B1 = IntegerTools::RotL64(B1, 58) ^ B0;
		B2 += B3;
		B3 = IntegerTools::RotL64(B3, 22) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 32) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 32) ^ B2;
		// rounds 64-71
		B1 += K2 + T1;
		B0 += B1 + K1;
		B1 = IntegerTools::RotL64(B1, 14) ^ B0;
		B3 += K4 + 16;
		B2 += B3 + K3 + T2;
		B3 = IntegerTools::RotL64(B3, 16) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 52) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 57) ^ B2;
		B0 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B0;
		B2 += B3;
		B3 = IntegerTools::RotL64(B3, 40) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 5) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 37) ^ B2;
		B1 += K3 + T2;
		B0 += B1 + K2;
		B1 = IntegerTools::RotL64(B1, 25) ^ B0;
		B3 += K0 + 17;
		B2 += B3 + K4 + T0;
		B3 = IntegerTools::RotL64(B3, 33) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 46) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 12) ^ B2;
		B0 += B1;
		B1 = IntegerTools::RotL64(B1, 58) ^ B0;
		B2 += B3;
		B3 = IntegerTools::RotL64(B3, 22) ^ B2;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 32) ^ B0;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 32) ^ B2;

		State[0] = B0 + K3;
		State[1] = B1 + K4 + T0;
		State[2] = B2 + K0 + T1;
		State[3] = B3 + K1 + 18;
	}

	//~~~Skein-512~~~//

	/// <summary>
	/// The compact form of the Skein-512 variable rounds permutation function.
	/// <para>This function has been optimized for a small memory consumption.
	/// To enable this function, add the CEX_DIGEST_COMPACT directive to the CexConfig file.</para>
	/// </summary>
	/// 
	/// <param name="Input">The input message array</param>
	/// <param name="Tweak">The cipher tweak array</param>
	/// <param name="State">The permutations state array</param>
	/// <param name="Rounds">The number of mixing rounds; the default is 72</param>
	template<typename ArrayU64x2, typename ArrayU64x8>
	static void PemuteP512C(const ArrayU64x8 &Input, const ArrayU64x2 &Tweak, ArrayU64x8 &State, size_t Rounds)
	{
		std::array<uint64_t, 8> B;
		std::array<uint64_t, 9> K;
		std::array<uint64_t, 3> T;
		size_t i;
		size_t r;
		size_t x;
		size_t y;

		MemoryTools::Copy(Input, 0, B, 0, 8 * sizeof(uint64_t));
		MemoryTools::Copy(State, 0, K, 0, 8 * sizeof(uint64_t));
		MemoryTools::Copy(Tweak, 0, T, 0, 2 * sizeof(uint64_t));

		r = Rounds / 8;
		x = 1;
		y = 0;
		K[8] = K[0] ^ K[1] ^ K[2] ^ K[3] ^ K[4] ^ K[5] ^ K[6] ^ K[7] ^ 0x1BD11BDAA9FC1A22ULL;
		T[2] = T[0] ^ T[1];

		for (i = 0; i < r; ++i)
		{
			// round n+8, inject k
			B[1] += K[x];
			x != 0 ? x -= 1 : x += 8;
			B[0] += B[1] + K[x];
			B[1] = IntegerTools::RotL64(B[1], 46) ^ B[0];
			x < 6 ? x += 3 : x -= 6;
			B[3] += K[x];
			x != 0 ? x -= 1 : x += 8;
			B[2] += B[3] + K[x];
			B[3] = IntegerTools::RotL64(B[3], 36) ^ B[2];
			x < 6 ? x += 3 : x -= 6;
			B[5] += K[x] + T[y];
			x != 0 ? x -= 1 : x += 8;
			B[4] += B[5] + K[x];
			B[5] = IntegerTools::RotL64(B[5], 19) ^ B[4];
			// mix
			x < 6 ? x += 3 : x -= 6;
			B[7] += K[x] + (i * 2);
			x != 0 ? x -= 1 : x += 8;
			y != 2 ? y += 1 : y -= 2;
			B[6] += B[7] + K[x] + T[y];
			B[7] = IntegerTools::RotL64(B[7], 37) ^ B[6];
			B[2] += B[1];
			B[1] = IntegerTools::RotL64(B[1], 33) ^ B[2];
			B[4] += B[7];
			B[7] = IntegerTools::RotL64(B[7], 27) ^ B[4];
			B[6] += B[5];
			B[5] = IntegerTools::RotL64(B[5], 14) ^ B[6];
			B[0] += B[3];
			B[3] = IntegerTools::RotL64(B[3], 42) ^ B[0];
			B[4] += B[1];
			B[1] = IntegerTools::RotL64(B[1], 17) ^ B[4];
			B[6] += B[3];
			B[3] = IntegerTools::RotL64(B[3], 49) ^ B[6];
			B[0] += B[5];
			B[5] = IntegerTools::RotL64(B[5], 36) ^ B[0];
			B[2] += B[7];
			B[7] = IntegerTools::RotL64(B[7], 39) ^ B[2];
			B[6] += B[1];
			B[1] = IntegerTools::RotL64(B[1], 44) ^ B[6];
			B[0] += B[7];
			B[7] = IntegerTools::RotL64(B[7], 9) ^ B[0];
			B[2] += B[5];
			B[5] = IntegerTools::RotL64(B[5], 54) ^ B[2];
			B[4] += B[3];
			B[3] = IntegerTools::RotL64(B[3], 56) ^ B[4];
			// inject
			x > 3 ? x -= 4 : x += 5;
			B[1] += K[x];
			x != 0 ? x -= 1 : x += 8;
			B[0] += B[1] + K[x];
			B[1] = IntegerTools::RotL64(B[1], 39) ^ B[0];
			x < 6 ? x += 3 : x -= 6;
			B[3] += K[x];
			x != 0 ? x -= 1 : x += 8;
			B[2] += B[3] + K[x];
			B[3] = IntegerTools::RotL64(B[3], 30) ^ B[2];
			x < 6 ? x += 3 : x -= 6;
			B[5] += K[x] + T[y];
			x != 0 ? x -= 1 : x += 8;
			B[4] += B[5] + K[x];
			B[5] = IntegerTools::RotL64(B[5], 34) ^ B[4];
			// mix
			x < 6 ? x += 3 : x -= 6;
			B[7] += K[x] + (i * 2) + 1;
			x != 0 ? x -= 1 : x += 8;
			y != 2 ? y += 1 : y -= 2;
			B[6] += B[7] + K[x] + T[y];
			B[7] = IntegerTools::RotL64(B[7], 24) ^ B[6];
			B[2] += B[1];
			B[1] = IntegerTools::RotL64(B[1], 13) ^ B[2];
			B[4] += B[7];
			B[7] = IntegerTools::RotL64(B[7], 50) ^ B[4];
			B[6] += B[5];
			B[5] = IntegerTools::RotL64(B[5], 10) ^ B[6];
			B[0] += B[3];
			B[3] = IntegerTools::RotL64(B[3], 17) ^ B[0];
			B[4] += B[1];
			B[1] = IntegerTools::RotL64(B[1], 25) ^ B[4];
			B[6] += B[3];
			B[3] = IntegerTools::RotL64(B[3], 29) ^ B[6];
			B[0] += B[5];
			B[5] = IntegerTools::RotL64(B[5], 39) ^ B[0];
			B[2] += B[7];
			B[7] = IntegerTools::RotL64(B[7], 43) ^ B[2];
			B[6] += B[1];
			B[1] = IntegerTools::RotL64(B[1], 8) ^ B[6];
			B[0] += B[7];
			B[7] = IntegerTools::RotL64(B[7], 35) ^ B[0];
			B[2] += B[5];
			B[5] = IntegerTools::RotL64(B[5], 56) ^ B[2];
			B[4] += B[3];
			B[3] = IntegerTools::RotL64(B[3], 22) ^ B[4];
			x > 3 ? x -= 4 : x += 5;
		}

		State[0] = B[0] + K[0];
		State[1] = B[1] + K[1];
		State[2] = B[2] + K[2];
		State[3] = B[3] + K[3];
		State[4] = B[4] + K[4];
		State[5] = B[5] + K[5] + T[0];
		State[6] = B[6] + K[6] + T[1];
		State[7] = B[7] + K[7] + (Rounds / 4);
	}

	/// <summary>
	/// The unrolled form of the Skein-512 72 round permutation function.
	/// <para>This function (the default) has been optimized for speed, and timing neutrality.
	/// To enable this function, remove the CEX_DIGEST_COMPACT directive from the CexConfig file.</para>
	/// </summary>
	/// 
	/// <param name="Input">The input message array</param>
	/// <param name="Tweak">The cipher tweak array</param>
	/// <param name="State">The permutations state array</param>
	template<typename ArrayU64x2, typename ArrayU64x8>
	static void PemuteR72P512U(const ArrayU64x8 &Input, const ArrayU64x2 &Tweak, ArrayU64x8 &State)
	{
		uint64_t B0;
		uint64_t B1;
		uint64_t B2;
		uint64_t B3;
		uint64_t B4;
		uint64_t B5;
		uint64_t B6;
		uint64_t B7;
		uint64_t K0;
		uint64_t K1;
		uint64_t K2;
		uint64_t K3;
		uint64_t K4;
		uint64_t K5;
		uint64_t K6;
		uint64_t K7;
		uint64_t K8;
		uint64_t T0;
		uint64_t T1;
		uint64_t T2;

		B0 = Input[0];
		B1 = Input[1];
		B2 = Input[2];
		B3 = Input[3];
		B4 = Input[4];
		B5 = Input[5];
		B6 = Input[6];
		B7 = Input[7];
		K0 = State[0];
		K1 = State[1];
		K2 = State[2];
		K3 = State[3];
		K4 = State[4];
		K5 = State[5];
		K6 = State[6];
		K7 = State[7];
		K8 = K0 ^ K1 ^ K2 ^ K3 ^ K4 ^ K5 ^ K6 ^ K7 ^ 0x1BD11BDAA9FC1A22ULL;
		T0 = Tweak[0];
		T1 = Tweak[1];
		T2 = Tweak[0] ^ Tweak[1];

		// rounds 0-7, inject k
		B1 += K1;
		B0 += B1 + K0;
		B1 = IntegerTools::RotL64(B1, 46) ^ B0;
		B3 += K3;
		B2 += B3 + K2;
		B3 = IntegerTools::RotL64(B3, 36) ^ B2;
		B5 += K5 + T0;
		B4 += B5 + K4;
		B5 = IntegerTools::RotL64(B5, 19) ^ B4;
		// mix 
		B7 += K7;
		B6 += B7 + K6 + T1;
		B7 = IntegerTools::RotL64(B7, 37) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 33) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 27) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 14) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 42) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 17) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 49) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 36) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 39) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 44) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 9) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 54) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 56) ^ B4;
		// inject
		B1 += K2;
		B0 += B1 + K1;
		B1 = IntegerTools::RotL64(B1, 39) ^ B0;
		B3 += K4;
		B2 += B3 + K3;
		B3 = IntegerTools::RotL64(B3, 30) ^ B2;
		B5 += K6 + T1;
		B4 += B5 + K5;
		B5 = IntegerTools::RotL64(B5, 34) ^ B4;
		// mix
		B7 += K8 + 1;
		B6 += B7 + K7 + T2;
		B7 = IntegerTools::RotL64(B7, 24) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 50) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 10) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 17) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 25) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 29) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 39) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 43) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 8) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 35) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 56) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 22) ^ B4;
		// rounds 8-15
		B1 += K3;
		B0 += B1 + K2;
		B1 = IntegerTools::RotL64(B1, 46) ^ B0;
		B3 += K5;
		B2 += B3 + K4;
		B3 = IntegerTools::RotL64(B3, 36) ^ B2;
		B5 += K7 + T2;
		B4 += B5 + K6;
		B5 = IntegerTools::RotL64(B5, 19) ^ B4;
		B7 += K0 + 2;
		B6 += B7 + K8 + T0;
		B7 = IntegerTools::RotL64(B7, 37) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 33) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 27) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 14) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 42) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 17) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 49) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 36) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 39) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 44) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 9) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 54) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 56) ^ B4;
		B1 += K4;
		B0 += B1 + K3;
		B1 = IntegerTools::RotL64(B1, 39) ^ B0;
		B3 += K6;
		B2 += B3 + K5;
		B3 = IntegerTools::RotL64(B3, 30) ^ B2;
		B5 += K8 + T0;
		B4 += B5 + K7;
		B5 = IntegerTools::RotL64(B5, 34) ^ B4;
		B7 += K1 + 3;
		B6 += B7 + K0 + T1;
		B7 = IntegerTools::RotL64(B7, 24) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 50) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 10) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 17) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 25) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 29) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 39) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 43) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 8) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 35) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 56) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 22) ^ B4;
		// rounds 16-23
		B1 += K5;
		B0 += B1 + K4;
		B1 = IntegerTools::RotL64(B1, 46) ^ B0;
		B3 += K7;
		B2 += B3 + K6;
		B3 = IntegerTools::RotL64(B3, 36) ^ B2;
		B5 += K0 + T1;
		B4 += B5 + K8;
		B5 = IntegerTools::RotL64(B5, 19) ^ B4;
		B7 += K2 + 4;
		B6 += B7 + K1 + T2;
		B7 = IntegerTools::RotL64(B7, 37) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 33) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 27) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 14) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 42) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 17) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 49) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 36) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 39) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 44) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 9) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 54) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 56) ^ B4;
		B1 += K6;
		B0 += B1 + K5;
		B1 = IntegerTools::RotL64(B1, 39) ^ B0;
		B3 += K8;
		B2 += B3 + K7;
		B3 = IntegerTools::RotL64(B3, 30) ^ B2;
		B5 += K1 + T2;
		B4 += B5 + K0;
		B5 = IntegerTools::RotL64(B5, 34) ^ B4;
		B7 += K3 + 5;
		B6 += B7 + K2 + T0;
		B7 = IntegerTools::RotL64(B7, 24) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 50) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 10) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 17) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 25) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 29) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 39) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 43) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 8) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 35) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 56) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 22) ^ B4;
		// rounds 24-31
		B1 += K7;
		B0 += B1 + K6;
		B1 = IntegerTools::RotL64(B1, 46) ^ B0;
		B3 += K0;
		B2 += B3 + K8;
		B3 = IntegerTools::RotL64(B3, 36) ^ B2;
		B5 += K2 + T0;
		B4 += B5 + K1;
		B5 = IntegerTools::RotL64(B5, 19) ^ B4;
		B7 += K4 + 6;
		B6 += B7 + K3 + T1;
		B7 = IntegerTools::RotL64(B7, 37) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 33) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 27) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 14) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 42) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 17) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 49) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 36) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 39) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 44) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 9) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 54) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 56) ^ B4;
		B1 += K8;
		B0 += B1 + K7;
		B1 = IntegerTools::RotL64(B1, 39) ^ B0;
		B3 += K1;
		B2 += B3 + K0;
		B3 = IntegerTools::RotL64(B3, 30) ^ B2;
		B5 += K3 + T1;
		B4 += B5 + K2;
		B5 = IntegerTools::RotL64(B5, 34) ^ B4;
		B7 += K5 + 7;
		B6 += B7 + K4 + T2;
		B7 = IntegerTools::RotL64(B7, 24) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 50) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 10) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 17) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 25) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 29) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 39) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 43) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 8) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 35) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 56) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 22) ^ B4;
		// rounds 32-39
		B1 += K0;
		B0 += B1 + K8;
		B1 = IntegerTools::RotL64(B1, 46) ^ B0;
		B3 += K2;
		B2 += B3 + K1;
		B3 = IntegerTools::RotL64(B3, 36) ^ B2;
		B5 += K4 + T2;
		B4 += B5 + K3;
		B5 = IntegerTools::RotL64(B5, 19) ^ B4;
		B7 += K6 + 8;
		B6 += B7 + K5 + T0;
		B7 = IntegerTools::RotL64(B7, 37) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 33) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 27) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 14) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 42) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 17) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 49) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 36) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 39) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 44) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 9) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 54) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 56) ^ B4;
		B1 += K1;
		B0 += B1 + K0;
		B1 = IntegerTools::RotL64(B1, 39) ^ B0;
		B3 += K3;
		B2 += B3 + K2;
		B3 = IntegerTools::RotL64(B3, 30) ^ B2;
		B5 += K5 + T0;
		B4 += B5 + K4;
		B5 = IntegerTools::RotL64(B5, 34) ^ B4;
		B7 += K7 + 9;
		B6 += B7 + K6 + T1;
		B7 = IntegerTools::RotL64(B7, 24) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 50) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 10) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 17) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 25) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 29) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 39) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 43) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 8) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 35) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 56) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 22) ^ B4;
		// rounds 40-47
		B1 += K2;
		B0 += B1 + K1;
		B1 = IntegerTools::RotL64(B1, 46) ^ B0;
		B3 += K4;
		B2 += B3 + K3;
		B3 = IntegerTools::RotL64(B3, 36) ^ B2;
		B5 += K6 + T1;
		B4 += B5 + K5;
		B5 = IntegerTools::RotL64(B5, 19) ^ B4;
		B7 += K8 + 10;
		B6 += B7 + K7 + T2;
		B7 = IntegerTools::RotL64(B7, 37) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 33) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 27) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 14) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 42) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 17) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 49) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 36) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 39) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 44) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 9) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 54) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 56) ^ B4;
		B1 += K3;
		B0 += B1 + K2;
		B1 = IntegerTools::RotL64(B1, 39) ^ B0;
		B3 += K5;
		B2 += B3 + K4;
		B3 = IntegerTools::RotL64(B3, 30) ^ B2;
		B5 += K7 + T2;
		B4 += B5 + K6;
		B5 = IntegerTools::RotL64(B5, 34) ^ B4;
		B7 += K0 + 11;
		B6 += B7 + K8 + T0;
		B7 = IntegerTools::RotL64(B7, 24) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 50) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 10) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 17) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 25) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 29) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 39) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 43) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 8) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 35) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 56) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 22) ^ B4;
		// rounds 48-55
		B1 += K4;
		B0 += B1 + K3;
		B1 = IntegerTools::RotL64(B1, 46) ^ B0;
		B3 += K6;
		B2 += B3 + K5;
		B3 = IntegerTools::RotL64(B3, 36) ^ B2;
		B5 += K8 + T0;
		B4 += B5 + K7;
		B5 = IntegerTools::RotL64(B5, 19) ^ B4;
		B7 += K1 + 12;
		B6 += B7 + K0 + T1;
		B7 = IntegerTools::RotL64(B7, 37) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 33) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 27) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 14) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 42) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 17) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 49) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 36) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 39) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 44) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 9) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 54) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 56) ^ B4;
		B1 += K5;
		B0 += B1 + K4;
		B1 = IntegerTools::RotL64(B1, 39) ^ B0;
		B3 += K7;
		B2 += B3 + K6;
		B3 = IntegerTools::RotL64(B3, 30) ^ B2;
		B5 += K0 + T1;
		B4 += B5 + K8;
		B5 = IntegerTools::RotL64(B5, 34) ^ B4;
		B7 += K2 + 13;
		B6 += B7 + K1 + T2;
		B7 = IntegerTools::RotL64(B7, 24) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 50) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 10) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 17) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 25) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 29) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 39) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 43) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 8) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 35) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 56) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 22) ^ B4;
		// rounds 56-63
		B1 += K6;
		B0 += B1 + K5;
		B1 = IntegerTools::RotL64(B1, 46) ^ B0;
		B3 += K8;
		B2 += B3 + K7;
		B3 = IntegerTools::RotL64(B3, 36) ^ B2;
		B5 += K1 + T2;
		B4 += B5 + K0;
		B5 = IntegerTools::RotL64(B5, 19) ^ B4;
		B7 += K3 + 14;
		B6 += B7 + K2 + T0;
		B7 = IntegerTools::RotL64(B7, 37) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 33) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 27) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 14) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 42) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 17) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 49) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 36) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 39) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 44) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 9) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 54) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 56) ^ B4;
		B1 += K7;
		B0 += B1 + K6;
		B1 = IntegerTools::RotL64(B1, 39) ^ B0;
		B3 += K0;
		B2 += B3 + K8;
		B3 = IntegerTools::RotL64(B3, 30) ^ B2;
		B5 += K2 + T0;
		B4 += B5 + K1;
		B5 = IntegerTools::RotL64(B5, 34) ^ B4;
		B7 += K4 + 15;
		B6 += B7 + K3 + T1;
		B7 = IntegerTools::RotL64(B7, 24) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 50) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 10) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 17) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 25) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 29) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 39) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 43) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 8) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 35) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 56) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 22) ^ B4;
		// rounds 64-71
		B1 += K8;
		B0 += B1 + K7;
		B1 = IntegerTools::RotL64(B1, 46) ^ B0;
		B3 += K1;
		B2 += B3 + K0;
		B3 = IntegerTools::RotL64(B3, 36) ^ B2;
		B5 += K3 + T1;
		B4 += B5 + K2;
		B5 = IntegerTools::RotL64(B5, 19) ^ B4;
		B7 += K5 + 16;
		B6 += B7 + K4 + T2;
		B7 = IntegerTools::RotL64(B7, 37) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 33) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 27) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 14) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 42) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 17) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 49) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 36) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 39) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 44) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 9) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 54) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 56) ^ B4;
		B1 += K0;
		B0 += B1 + K8;
		B1 = IntegerTools::RotL64(B1, 39) ^ B0;
		B3 += K2;
		B2 += B3 + K1;
		B3 = IntegerTools::RotL64(B3, 30) ^ B2;
		B5 += K4 + T2;
		B4 += B5 + K3;
		B5 = IntegerTools::RotL64(B5, 34) ^ B4;
		B7 += K6 + 17;
		B6 += B7 + K5 + T0;
		B7 = IntegerTools::RotL64(B7, 24) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 50) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 10) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 17) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 25) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 29) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 39) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 43) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 8) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 35) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 56) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 22) ^ B4;

		State[0] = B0 + K0;
		State[1] = B1 + K1;
		State[2] = B2 + K2;
		State[3] = B3 + K3;
		State[4] = B4 + K4;
		State[5] = B5 + K5 + T0;
		State[6] = B6 + K6 + T1;
		State[7] = B7 + K7 + 18;
	}

	/// <summary>
	/// The unrolled form of the Skein-512 96 round permutation function.
	/// <para>This function (the default) has been optimized for speed, and timing neutrality.
	/// To enable this function, remove the CEX_DIGEST_COMPACT directive from the CexConfig file.</para>
	/// </summary>
	/// 
	/// <param name="Input">The input message array</param>
	/// <param name="Tweak">The cipher tweak array</param>
	/// <param name="State">The permutations state array</param>
	template<typename ArrayU64x2, typename ArrayU64x8>
	static void PemuteR96P512U(const ArrayU64x8 &Input, const ArrayU64x2 &Tweak, ArrayU64x8 &State)
	{
		uint64_t B0;
		uint64_t B1;
		uint64_t B2;
		uint64_t B3;
		uint64_t B4;
		uint64_t B5;
		uint64_t B6;
		uint64_t B7;
		uint64_t K0;
		uint64_t K1;
		uint64_t K2;
		uint64_t K3;
		uint64_t K4;
		uint64_t K5;
		uint64_t K6;
		uint64_t K7;
		uint64_t K8;
		uint64_t T0;
		uint64_t T1;
		uint64_t T2;

		B0 = Input[0];
		B1 = Input[1];
		B2 = Input[2];
		B3 = Input[3];
		B4 = Input[4];
		B5 = Input[5];
		B6 = Input[6];
		B7 = Input[7];
		K0 = State[0];
		K1 = State[1];
		K2 = State[2];
		K3 = State[3];
		K4 = State[4];
		K5 = State[5];
		K6 = State[6];
		K7 = State[7];
		K8 = K0 ^ K1 ^ K2 ^ K3 ^ K4 ^ K5 ^ K6 ^ K7 ^ 0x1BD11BDAA9FC1A22ULL;
		T0 = Tweak[0];
		T1 = Tweak[1];
		T2 = Tweak[0] ^ Tweak[1];

		// rounds 0-7, inject k
		B1 += K1;
		B0 += B1 + K0;
		B1 = IntegerTools::RotL64(B1, 46) ^ B0;
		B3 += K3;
		B2 += B3 + K2;
		B3 = IntegerTools::RotL64(B3, 36) ^ B2;
		B5 += K5 + T0;
		B4 += B5 + K4;
		B5 = IntegerTools::RotL64(B5, 19) ^ B4;
		// mix 
		B7 += K7;
		B6 += B7 + K6 + T1;
		B7 = IntegerTools::RotL64(B7, 37) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 33) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 27) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 14) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 42) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 17) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 49) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 36) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 39) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 44) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 9) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 54) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 56) ^ B4;
		// inject
		B1 += K2;
		B0 += B1 + K1;
		B1 = IntegerTools::RotL64(B1, 39) ^ B0;
		B3 += K4;
		B2 += B3 + K3;
		B3 = IntegerTools::RotL64(B3, 30) ^ B2;
		B5 += K6 + T1;
		B4 += B5 + K5;
		B5 = IntegerTools::RotL64(B5, 34) ^ B4;
		// mix
		B7 += K8 + 1;
		B6 += B7 + K7 + T2;
		B7 = IntegerTools::RotL64(B7, 24) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 50) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 10) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 17) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 25) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 29) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 39) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 43) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 8) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 35) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 56) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 22) ^ B4;
		// rounds 8-15
		B1 += K3;
		B0 += B1 + K2;
		B1 = IntegerTools::RotL64(B1, 46) ^ B0;
		B3 += K5;
		B2 += B3 + K4;
		B3 = IntegerTools::RotL64(B3, 36) ^ B2;
		B5 += K7 + T2;
		B4 += B5 + K6;
		B5 = IntegerTools::RotL64(B5, 19) ^ B4;
		B7 += K0 + 2;
		B6 += B7 + K8 + T0;
		B7 = IntegerTools::RotL64(B7, 37) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 33) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 27) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 14) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 42) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 17) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 49) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 36) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 39) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 44) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 9) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 54) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 56) ^ B4;
		B1 += K4;
		B0 += B1 + K3;
		B1 = IntegerTools::RotL64(B1, 39) ^ B0;
		B3 += K6;
		B2 += B3 + K5;
		B3 = IntegerTools::RotL64(B3, 30) ^ B2;
		B5 += K8 + T0;
		B4 += B5 + K7;
		B5 = IntegerTools::RotL64(B5, 34) ^ B4;
		B7 += K1 + 3;
		B6 += B7 + K0 + T1;
		B7 = IntegerTools::RotL64(B7, 24) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 50) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 10) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 17) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 25) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 29) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 39) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 43) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 8) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 35) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 56) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 22) ^ B4;
		// rounds 16-23
		B1 += K5;
		B0 += B1 + K4;
		B1 = IntegerTools::RotL64(B1, 46) ^ B0;
		B3 += K7;
		B2 += B3 + K6;
		B3 = IntegerTools::RotL64(B3, 36) ^ B2;
		B5 += K0 + T1;
		B4 += B5 + K8;
		B5 = IntegerTools::RotL64(B5, 19) ^ B4;
		B7 += K2 + 4;
		B6 += B7 + K1 + T2;
		B7 = IntegerTools::RotL64(B7, 37) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 33) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 27) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 14) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 42) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 17) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 49) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 36) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 39) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 44) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 9) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 54) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 56) ^ B4;
		B1 += K6;
		B0 += B1 + K5;
		B1 = IntegerTools::RotL64(B1, 39) ^ B0;
		B3 += K8;
		B2 += B3 + K7;
		B3 = IntegerTools::RotL64(B3, 30) ^ B2;
		B5 += K1 + T2;
		B4 += B5 + K0;
		B5 = IntegerTools::RotL64(B5, 34) ^ B4;
		B7 += K3 + 5;
		B6 += B7 + K2 + T0;
		B7 = IntegerTools::RotL64(B7, 24) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 50) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 10) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 17) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 25) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 29) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 39) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 43) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 8) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 35) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 56) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 22) ^ B4;
		// rounds 24-31
		B1 += K7;
		B0 += B1 + K6;
		B1 = IntegerTools::RotL64(B1, 46) ^ B0;
		B3 += K0;
		B2 += B3 + K8;
		B3 = IntegerTools::RotL64(B3, 36) ^ B2;
		B5 += K2 + T0;
		B4 += B5 + K1;
		B5 = IntegerTools::RotL64(B5, 19) ^ B4;
		B7 += K4 + 6;
		B6 += B7 + K3 + T1;
		B7 = IntegerTools::RotL64(B7, 37) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 33) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 27) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 14) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 42) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 17) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 49) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 36) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 39) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 44) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 9) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 54) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 56) ^ B4;
		B1 += K8;
		B0 += B1 + K7;
		B1 = IntegerTools::RotL64(B1, 39) ^ B0;
		B3 += K1;
		B2 += B3 + K0;
		B3 = IntegerTools::RotL64(B3, 30) ^ B2;
		B5 += K3 + T1;
		B4 += B5 + K2;
		B5 = IntegerTools::RotL64(B5, 34) ^ B4;
		B7 += K5 + 7;
		B6 += B7 + K4 + T2;
		B7 = IntegerTools::RotL64(B7, 24) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 50) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 10) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 17) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 25) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 29) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 39) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 43) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 8) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 35) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 56) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 22) ^ B4;
		// rounds 32-39
		B1 += K0;
		B0 += B1 + K8;
		B1 = IntegerTools::RotL64(B1, 46) ^ B0;
		B3 += K2;
		B2 += B3 + K1;
		B3 = IntegerTools::RotL64(B3, 36) ^ B2;
		B5 += K4 + T2;
		B4 += B5 + K3;
		B5 = IntegerTools::RotL64(B5, 19) ^ B4;
		B7 += K6 + 8;
		B6 += B7 + K5 + T0;
		B7 = IntegerTools::RotL64(B7, 37) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 33) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 27) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 14) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 42) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 17) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 49) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 36) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 39) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 44) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 9) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 54) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 56) ^ B4;
		B1 += K1;
		B0 += B1 + K0;
		B1 = IntegerTools::RotL64(B1, 39) ^ B0;
		B3 += K3;
		B2 += B3 + K2;
		B3 = IntegerTools::RotL64(B3, 30) ^ B2;
		B5 += K5 + T0;
		B4 += B5 + K4;
		B5 = IntegerTools::RotL64(B5, 34) ^ B4;
		B7 += K7 + 9;
		B6 += B7 + K6 + T1;
		B7 = IntegerTools::RotL64(B7, 24) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 50) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 10) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 17) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 25) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 29) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 39) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 43) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 8) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 35) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 56) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 22) ^ B4;
		// rounds 40-47
		B1 += K2;
		B0 += B1 + K1;
		B1 = IntegerTools::RotL64(B1, 46) ^ B0;
		B3 += K4;
		B2 += B3 + K3;
		B3 = IntegerTools::RotL64(B3, 36) ^ B2;
		B5 += K6 + T1;
		B4 += B5 + K5;
		B5 = IntegerTools::RotL64(B5, 19) ^ B4;
		B7 += K8 + 10;
		B6 += B7 + K7 + T2;
		B7 = IntegerTools::RotL64(B7, 37) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 33) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 27) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 14) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 42) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 17) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 49) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 36) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 39) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 44) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 9) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 54) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 56) ^ B4;
		B1 += K3;
		B0 += B1 + K2;
		B1 = IntegerTools::RotL64(B1, 39) ^ B0;
		B3 += K5;
		B2 += B3 + K4;
		B3 = IntegerTools::RotL64(B3, 30) ^ B2;
		B5 += K7 + T2;
		B4 += B5 + K6;
		B5 = IntegerTools::RotL64(B5, 34) ^ B4;
		B7 += K0 + 11;
		B6 += B7 + K8 + T0;
		B7 = IntegerTools::RotL64(B7, 24) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 50) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 10) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 17) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 25) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 29) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 39) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 43) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 8) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 35) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 56) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 22) ^ B4;
		// rounds 48-55
		B1 += K4;
		B0 += B1 + K3;
		B1 = IntegerTools::RotL64(B1, 46) ^ B0;
		B3 += K6;
		B2 += B3 + K5;
		B3 = IntegerTools::RotL64(B3, 36) ^ B2;
		B5 += K8 + T0;
		B4 += B5 + K7;
		B5 = IntegerTools::RotL64(B5, 19) ^ B4;
		B7 += K1 + 12;
		B6 += B7 + K0 + T1;
		B7 = IntegerTools::RotL64(B7, 37) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 33) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 27) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 14) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 42) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 17) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 49) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 36) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 39) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 44) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 9) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 54) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 56) ^ B4;
		B1 += K5;
		B0 += B1 + K4;
		B1 = IntegerTools::RotL64(B1, 39) ^ B0;
		B3 += K7;
		B2 += B3 + K6;
		B3 = IntegerTools::RotL64(B3, 30) ^ B2;
		B5 += K0 + T1;
		B4 += B5 + K8;
		B5 = IntegerTools::RotL64(B5, 34) ^ B4;
		B7 += K2 + 13;
		B6 += B7 + K1 + T2;
		B7 = IntegerTools::RotL64(B7, 24) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 50) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 10) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 17) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 25) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 29) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 39) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 43) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 8) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 35) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 56) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 22) ^ B4;
		// rounds 56-63
		B1 += K6;
		B0 += B1 + K5;
		B1 = IntegerTools::RotL64(B1, 46) ^ B0;
		B3 += K8;
		B2 += B3 + K7;
		B3 = IntegerTools::RotL64(B3, 36) ^ B2;
		B5 += K1 + T2;
		B4 += B5 + K0;
		B5 = IntegerTools::RotL64(B5, 19) ^ B4;
		B7 += K3 + 14;
		B6 += B7 + K2 + T0;
		B7 = IntegerTools::RotL64(B7, 37) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 33) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 27) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 14) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 42) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 17) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 49) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 36) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 39) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 44) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 9) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 54) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 56) ^ B4;
		B1 += K7;
		B0 += B1 + K6;
		B1 = IntegerTools::RotL64(B1, 39) ^ B0;
		B3 += K0;
		B2 += B3 + K8;
		B3 = IntegerTools::RotL64(B3, 30) ^ B2;
		B5 += K2 + T0;
		B4 += B5 + K1;
		B5 = IntegerTools::RotL64(B5, 34) ^ B4;
		B7 += K4 + 15;
		B6 += B7 + K3 + T1;
		B7 = IntegerTools::RotL64(B7, 24) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 50) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 10) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 17) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 25) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 29) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 39) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 43) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 8) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 35) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 56) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 22) ^ B4;
		// rounds 64-71
		B1 += K8;
		B0 += B1 + K7;
		B1 = IntegerTools::RotL64(B1, 46) ^ B0;
		B3 += K1;
		B2 += B3 + K0;
		B3 = IntegerTools::RotL64(B3, 36) ^ B2;
		B5 += K3 + T1;
		B4 += B5 + K2;
		B5 = IntegerTools::RotL64(B5, 19) ^ B4;
		B7 += K5 + 16;
		B6 += B7 + K4 + T2;
		B7 = IntegerTools::RotL64(B7, 37) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 33) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 27) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 14) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 42) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 17) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 49) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 36) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 39) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 44) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 9) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 54) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 56) ^ B4;
		B1 += K0;
		B0 += B1 + K8;
		B1 = IntegerTools::RotL64(B1, 39) ^ B0;
		B3 += K2;
		B2 += B3 + K1;
		B3 = IntegerTools::RotL64(B3, 30) ^ B2;
		B5 += K4 + T2;
		B4 += B5 + K3;
		B5 = IntegerTools::RotL64(B5, 34) ^ B4;
		B7 += K6 + 17;
		B6 += B7 + K5 + T0;
		B7 = IntegerTools::RotL64(B7, 24) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 50) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 10) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 17) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 25) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 29) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 39) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 43) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 8) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 35) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 56) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 22) ^ B4;
		// rounds 72-79
		B1 += K1;
		B0 += B1 + K0;
		B1 = IntegerTools::RotL64(B1, 46) ^ B0;
		B3 += K3;
		B2 += B3 + K2;
		B3 = IntegerTools::RotL64(B3, 36) ^ B2;
		B5 += K5 + T0;
		B4 += B5 + K4;
		B5 = IntegerTools::RotL64(B5, 19) ^ B4;
		B7 += K7 + 18;
		B6 += B7 + K6 + T1;
		B7 = IntegerTools::RotL64(B7, 37) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 33) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 27) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 14) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 42) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 17) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 49) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 36) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 39) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 44) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 9) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 54) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 56) ^ B4;
		B1 += K2;
		B0 += B1 + K1;
		B1 = IntegerTools::RotL64(B1, 39) ^ B0;
		B3 += K4;
		B2 += B3 + K3;
		B3 = IntegerTools::RotL64(B3, 30) ^ B2;
		B5 += K6 + T1;
		B4 += B5 + K5;
		B5 = IntegerTools::RotL64(B5, 34) ^ B4;
		B7 += K8 + 19;
		B6 += B7 + K7 + T2;
		B7 = IntegerTools::RotL64(B7, 24) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 50) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 10) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 17) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 25) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 29) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 39) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 43) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 8) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 35) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 56) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 22) ^ B4;
		// rounds 80-87
		B1 += K3;
		B0 += B1 + K2;
		B1 = IntegerTools::RotL64(B1, 46) ^ B0;
		B3 += K5;
		B2 += B3 + K4;
		B3 = IntegerTools::RotL64(B3, 36) ^ B2;
		B5 += K7 + T2;
		B4 += B5 + K6;
		B5 = IntegerTools::RotL64(B5, 19) ^ B4;
		B7 += K0 + 20;
		B6 += B7 + K8 + T0;
		B7 = IntegerTools::RotL64(B7, 37) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 33) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 27) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 14) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 42) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 17) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 49) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 36) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 39) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 44) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 9) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 54) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 56) ^ B4;
		B1 += K4;
		B0 += B1 + K3;
		B1 = IntegerTools::RotL64(B1, 39) ^ B0;
		B3 += K6;
		B2 += B3 + K5;
		B3 = IntegerTools::RotL64(B3, 30) ^ B2;
		B5 += K8 + T0;
		B4 += B5 + K7;
		B5 = IntegerTools::RotL64(B5, 34) ^ B4;
		B7 += K1 + 21;
		B6 += B7 + K0 + T1;
		B7 = IntegerTools::RotL64(B7, 24) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 50) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 10) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 17) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 25) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 29) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 39) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 43) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 8) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 35) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 56) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 22) ^ B4;
		// rounds 88-95
		B1 += K5;
		B0 += B1 + K4;
		B1 = IntegerTools::RotL64(B1, 46) ^ B0;
		B3 += K7;
		B2 += B3 + K6;
		B3 = IntegerTools::RotL64(B3, 36) ^ B2;
		B5 += K0 + T1;
		B4 += B5 + K8;
		B5 = IntegerTools::RotL64(B5, 19) ^ B4;
		B7 += K2 + 22;
		B6 += B7 + K1 + T2;
		B7 = IntegerTools::RotL64(B7, 37) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 33) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 27) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 14) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 42) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 17) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 49) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 36) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 39) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 44) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 9) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 54) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 56) ^ B4;
		B1 += K6;
		B0 += B1 + K5;
		B1 = IntegerTools::RotL64(B1, 39) ^ B0;
		B3 += K8;
		B2 += B3 + K7;
		B3 = IntegerTools::RotL64(B3, 30) ^ B2;
		B5 += K1 + T2;
		B4 += B5 + K0;
		B5 = IntegerTools::RotL64(B5, 34) ^ B4;
		B7 += K3 + 23;
		B6 += B7 + K2 + T0;
		B7 = IntegerTools::RotL64(B7, 24) ^ B6;
		B2 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B2;
		B4 += B7;
		B7 = IntegerTools::RotL64(B7, 50) ^ B4;
		B6 += B5;
		B5 = IntegerTools::RotL64(B5, 10) ^ B6;
		B0 += B3;
		B3 = IntegerTools::RotL64(B3, 17) ^ B0;
		B4 += B1;
		B1 = IntegerTools::RotL64(B1, 25) ^ B4;
		B6 += B3;
		B3 = IntegerTools::RotL64(B3, 29) ^ B6;
		B0 += B5;
		B5 = IntegerTools::RotL64(B5, 39) ^ B0;
		B2 += B7;
		B7 = IntegerTools::RotL64(B7, 43) ^ B2;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 8) ^ B6;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 35) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 56) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 22) ^ B4;

		State[0] = B0 + K0;
		State[1] = B1 + K1;
		State[2] = B2 + K2;
		State[3] = B3 + K3;
		State[4] = B4 + K4;
		State[5] = B5 + K5 + T0;
		State[6] = B6 + K6 + T1;
		State[7] = B7 + K7 + 24;
	}

#if defined(CEX_HAS_AVX2)

	/// <summary>
	/// The vertically vectorized form of the Skein-512 72 round permutation function.
	/// </summary>
	/// 
	/// <param name="Input">The input message array</param>
	/// <param name="Tweak">The cipher tweak array</param>
	/// <param name="State">The permutations state array</param>
	template<typename ArrayU64x2, typename ArrayU64x8>
	static void PemuteR72P512V(const ArrayU64x8 &Input, const ArrayU64x2 &Tweak, ArrayU64x8 &State)
	{
		const __m256i R1 = _mm256_set_epi64x(37, 19, 36, 46);
		const __m256i R2 = _mm256_set_epi64x(42, 14, 27, 33);
		const __m256i R3 = _mm256_set_epi64x(39, 36, 49, 17);
		const __m256i R4 = _mm256_set_epi64x(56, 54, 9, 44);
		const __m256i R5 = _mm256_set_epi64x(24, 34, 30, 39);
		const __m256i R6 = _mm256_set_epi64x(17, 10, 50, 13);
		const __m256i R7 = _mm256_set_epi64x(43, 39, 29, 25);
		const __m256i R8 = _mm256_set_epi64x(22, 56, 35, 8);
		const __m256i RFN = _mm256_set_epi64x(1, 0, 0, 0);
		const uint64_t KS = State[0] ^ State[1] ^ State[2] ^ State[3] ^ State[4] ^ State[5] ^ State[6] ^ State[7] ^ 0x1BD11BDAA9FC1A22ULL;
		const __m256i K0 = _mm256_set_epi64x(State[6], State[4], State[2], State[0]);
		const __m256i K1 = _mm256_set_epi64x(State[7], State[5], State[3], State[1]);
		const __m256i K2 = _mm256_set_epi64x(KS, State[6], State[4], State[2]);
		const __m256i K3 = _mm256_set_epi64x(State[0], State[7], State[5], State[3]);
		const __m256i K4 = _mm256_set_epi64x(State[1], KS, State[6], State[4]);
		const __m256i K5 = _mm256_set_epi64x(State[2], State[0], State[7], State[5]);
		const __m256i K6 = _mm256_set_epi64x(State[3], State[1], KS, State[6]);
		const __m256i K7 = _mm256_set_epi64x(State[4], State[2], State[0], State[7]);
		const __m256i K8 = _mm256_set_epi64x(State[5], State[3], State[1], KS);
		const __m256i TS = _mm256_set_epi64x(Tweak[0], Tweak[1], Tweak[0] ^ Tweak[1], 0);

		__m256i R0 = _mm256_set_epi64x(0, 0, 0, 0);
		__m256i SHR;
		__m256i X0 = _mm256_set_epi64x(Input[6], Input[4], Input[2], Input[0]);
		__m256i X1 = _mm256_set_epi64x(Input[7], Input[5], Input[3], Input[1]);
		__m256i T0 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(2, 0, 0, 0));
		__m256i T1 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(0, 3, 0, 0));

		// rounds 0-7
		X0 = _mm256_add_epi64(X0, K0);
		X1 = _mm256_add_epi64(X1, K1);
		X1 = _mm256_add_epi64(X1, R0);
		X0 = _mm256_add_epi64(X0, T0);
		X1 = _mm256_add_epi64(X1, T1);
		R0 = _mm256_add_epi64(R0, RFN);
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R1);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R1), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R2);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R2), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R3);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R3), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R4);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R4), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		T0 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(1, 0, 0, 0));
		T1 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(0, 2, 0, 0));
		X0 = _mm256_add_epi64(X0, K1);
		X1 = _mm256_add_epi64(X1, K2);
		X1 = _mm256_add_epi64(X1, R0);
		X0 = _mm256_add_epi64(X0, T0);
		X1 = _mm256_add_epi64(X1, T1);
		R0 = _mm256_add_epi64(R0, RFN);
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R5);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R5), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R6);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R6), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R7);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R7), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R8);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R8), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		T0 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(3, 0, 0, 0));
		T1 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(0, 1, 0, 0));
		// rounds 8-15
		X0 = _mm256_add_epi64(X0, K2);
		X1 = _mm256_add_epi64(X1, K3);
		X1 = _mm256_add_epi64(X1, R0);
		X0 = _mm256_add_epi64(X0, T0);
		X1 = _mm256_add_epi64(X1, T1);
		R0 = _mm256_add_epi64(R0, RFN);
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R1);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R1), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R2);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R2), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R3);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R3), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R4);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R4), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		T0 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(2, 0, 0, 0));
		T1 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(0, 3, 0, 0));
		X0 = _mm256_add_epi64(X0, K3);
		X1 = _mm256_add_epi64(X1, K4);
		X1 = _mm256_add_epi64(X1, R0);
		X0 = _mm256_add_epi64(X0, T0);
		X1 = _mm256_add_epi64(X1, T1);
		R0 = _mm256_add_epi64(R0, RFN);
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R5);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R5), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R6);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R6), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R7);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R7), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R8);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R8), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		// rounds 16-23
		T0 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(1, 0, 0, 0));
		T1 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(0, 2, 0, 0));
		X0 = _mm256_add_epi64(X0, K4);
		X1 = _mm256_add_epi64(X1, K5);
		X1 = _mm256_add_epi64(X1, R0);
		X0 = _mm256_add_epi64(X0, T0);
		X1 = _mm256_add_epi64(X1, T1);
		R0 = _mm256_add_epi64(R0, RFN);
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R1);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R1), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R2);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R2), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R3);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R3), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R4);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R4), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		T0 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(3, 0, 0, 0));
		T1 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(0, 1, 0, 0));
		X0 = _mm256_add_epi64(X0, K5);
		X1 = _mm256_add_epi64(X1, K6);
		X1 = _mm256_add_epi64(X1, R0);
		X0 = _mm256_add_epi64(X0, T0);
		X1 = _mm256_add_epi64(X1, T1);
		R0 = _mm256_add_epi64(R0, RFN);
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R5);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R5), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R6);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R6), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R7);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R7), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R8);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R8), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		// rounds 24-31
		T0 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(2, 0, 0, 0));
		T1 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(0, 3, 0, 0));
		X0 = _mm256_add_epi64(X0, K6);
		X1 = _mm256_add_epi64(X1, K7);
		X1 = _mm256_add_epi64(X1, R0);
		X0 = _mm256_add_epi64(X0, T0);
		X1 = _mm256_add_epi64(X1, T1);
		R0 = _mm256_add_epi64(R0, RFN);
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R1);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R1), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R2);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R2), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R3);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R3), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R4);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R4), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		T0 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(1, 0, 0, 0));
		T1 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(0, 2, 0, 0));
		X0 = _mm256_add_epi64(X0, K7);
		X1 = _mm256_add_epi64(X1, K8);
		X1 = _mm256_add_epi64(X1, R0);
		X0 = _mm256_add_epi64(X0, T0);
		X1 = _mm256_add_epi64(X1, T1);
		R0 = _mm256_add_epi64(R0, RFN);
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R5);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R5), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R6);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R6), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R7);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R7), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R8);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R8), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		// rounds 32-39
		T0 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(3, 0, 0, 0));
		T1 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(0, 1, 0, 0));
		X0 = _mm256_add_epi64(X0, K8);
		X1 = _mm256_add_epi64(X1, K0);
		X1 = _mm256_add_epi64(X1, R0);
		X0 = _mm256_add_epi64(X0, T0);
		X1 = _mm256_add_epi64(X1, T1);
		R0 = _mm256_add_epi64(R0, RFN);
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R1);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R1), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R2);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R2), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R3);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R3), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R4);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R4), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		T0 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(2, 0, 0, 0));
		T1 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(0, 3, 0, 0));
		X0 = _mm256_add_epi64(X0, K0);
		X1 = _mm256_add_epi64(X1, K1);
		X1 = _mm256_add_epi64(X1, R0);
		X0 = _mm256_add_epi64(X0, T0);
		X1 = _mm256_add_epi64(X1, T1);
		R0 = _mm256_add_epi64(R0, RFN);
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R5);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R5), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R6);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R6), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R7);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R7), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R8);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R8), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		// rounds 40-47
		T0 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(1, 0, 0, 0));
		T1 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(0, 2, 0, 0));
		X0 = _mm256_add_epi64(X0, K1);
		X1 = _mm256_add_epi64(X1, K2);
		X1 = _mm256_add_epi64(X1, R0);
		X0 = _mm256_add_epi64(X0, T0);
		X1 = _mm256_add_epi64(X1, T1);
		R0 = _mm256_add_epi64(R0, RFN);
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R1);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R1), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R2);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R2), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R3);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R3), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R4);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R4), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		T0 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(3, 0, 0, 0));
		T1 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(0, 1, 0, 0));
		X0 = _mm256_add_epi64(X0, K2);
		X1 = _mm256_add_epi64(X1, K3);
		X1 = _mm256_add_epi64(X1, R0);
		X0 = _mm256_add_epi64(X0, T0);
		X1 = _mm256_add_epi64(X1, T1);
		R0 = _mm256_add_epi64(R0, RFN);
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R5);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R5), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R6);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R6), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R7);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R7), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R8);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R8), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		// rounds 48-55
		T0 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(2, 0, 0, 0));
		T1 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(0, 3, 0, 0));
		X0 = _mm256_add_epi64(X0, K3);
		X1 = _mm256_add_epi64(X1, K4);
		X1 = _mm256_add_epi64(X1, R0);
		X0 = _mm256_add_epi64(X0, T0);
		X1 = _mm256_add_epi64(X1, T1);
		R0 = _mm256_add_epi64(R0, RFN);
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R1);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R1), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R2);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R2), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R3);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R3), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R4);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R4), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		T0 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(1, 0, 0, 0));
		T1 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(0, 2, 0, 0));
		X0 = _mm256_add_epi64(X0, K4);
		X1 = _mm256_add_epi64(X1, K5);
		X1 = _mm256_add_epi64(X1, R0);
		X0 = _mm256_add_epi64(X0, T0);
		X1 = _mm256_add_epi64(X1, T1);
		R0 = _mm256_add_epi64(R0, RFN);
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R5);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R5), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R6);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R6), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R7);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R7), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R8);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R8), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		// rounds 56-63
		T0 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(3, 0, 0, 0));
		T1 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(0, 1, 0, 0));
		X0 = _mm256_add_epi64(X0, K5);
		X1 = _mm256_add_epi64(X1, K6);
		X1 = _mm256_add_epi64(X1, R0);
		X0 = _mm256_add_epi64(X0, T0);
		X1 = _mm256_add_epi64(X1, T1);
		R0 = _mm256_add_epi64(R0, RFN);
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R1);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R1), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R2);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R2), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R3);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R3), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R4);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R4), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		T0 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(2, 0, 0, 0));
		T1 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(0, 3, 0, 0));
		X0 = _mm256_add_epi64(X0, K6);
		X1 = _mm256_add_epi64(X1, K7);
		X1 = _mm256_add_epi64(X1, R0);
		X0 = _mm256_add_epi64(X0, T0);
		X1 = _mm256_add_epi64(X1, T1);
		R0 = _mm256_add_epi64(R0, RFN);
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R5);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R5), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R6);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R6), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R7);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R7), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R8);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R8), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		// rounds 64-71
		T0 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(1, 0, 0, 0));
		T1 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(0, 2, 0, 0));
		X0 = _mm256_add_epi64(X0, K7);
		X1 = _mm256_add_epi64(X1, K8);
		X1 = _mm256_add_epi64(X1, R0);
		X0 = _mm256_add_epi64(X0, T0);
		X1 = _mm256_add_epi64(X1, T1);
		R0 = _mm256_add_epi64(R0, RFN);
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R1);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R1), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R2);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R2), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R3);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R3), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R4);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R4), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		T0 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(3, 0, 0, 0));
		T1 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(0, 1, 0, 0));
		X0 = _mm256_add_epi64(X0, K8);
		X1 = _mm256_add_epi64(X1, K0);
		X1 = _mm256_add_epi64(X1, R0);
		X0 = _mm256_add_epi64(X0, T0);
		X1 = _mm256_add_epi64(X1, T1);
		R0 = _mm256_add_epi64(R0, RFN);
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R5);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R5), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R6);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R6), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R7);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R7), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));

		SHR = _mm256_sub_epi64(_mm256_set1_epi64x(64), R8);
		X0 = _mm256_add_epi64(X0, X1);
		X1 = _mm256_or_si256(_mm256_sllv_epi64(X1, R8), _mm256_srlv_epi64(X1, SHR));
		X1 = _mm256_xor_si256(X1, X0);
		X0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(0, 3, 2, 1));
		X1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(1, 2, 3, 0));
		T0 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(2, 0, 0, 0));
		T1 = _mm256_permute4x64_epi64(TS, _MM_SHUFFLE(0, 3, 0, 0));
		X0 = _mm256_add_epi64(X0, K0);
		X1 = _mm256_add_epi64(X1, K1);
		X1 = _mm256_add_epi64(X1, R0);
		X0 = _mm256_add_epi64(X0, T0);
		X1 = _mm256_add_epi64(X1, T1);
		R0 = _mm256_add_epi64(R0, RFN);
		T0 = _mm256_permute4x64_epi64(X0, _MM_SHUFFLE(3, 1, 2, 0));
		T1 = _mm256_permute4x64_epi64(X1, _MM_SHUFFLE(3, 1, 2, 0));
		X0 = _mm256_unpacklo_epi64(T0, T1);
		X1 = _mm256_unpackhi_epi64(T0, T1);

		_mm256_storeu_si256(reinterpret_cast<__m256i*>(&State[0]), X0);
		_mm256_storeu_si256(reinterpret_cast<__m256i*>(&State[4]), X1);
	}

#endif

	//~~~Skein-1024~~~//

	/// <summary>
	/// The compact form of the Skein-1024 variable rounds permutation function.
	/// <para>This function has been optimized for a small memory consumption.
	/// To enable this function, add the CEX_DIGEST_COMPACT directive to the CexConfig file.</para>
	/// </summary>
	/// 
	/// <param name="Input">The input message array</param>
	/// <param name="Tweak">The cipher tweak array</param>
	/// <param name="State">The permutations state array</param>
	/// <param name="Rounds">The number of mixing rounds; the default is 80</param>
	template<typename ArrayU64x2, typename ArrayU64x16>
	static void PemuteP1024C(const ArrayU64x16 &Input, const ArrayU64x2 &Tweak, ArrayU64x16 &State, size_t Rounds)
	{
		std::array<uint64_t, 16> B;
		std::array<uint64_t, 17> K;
		std::array<uint64_t, 3> T;
		size_t i;
		size_t r;
		size_t x;
		size_t y;

		MemoryTools::Copy(Input, 0, B, 0, 16 * sizeof(uint64_t));
		MemoryTools::Copy(State, 0, K, 0, 16 * sizeof(uint64_t));
		MemoryTools::Copy(Tweak, 0, T, 0, 2 * sizeof(uint64_t));

		r = Rounds / 8;
		x = 1;
		y = 0;
		K[16] = K[0] ^ K[1] ^ K[2] ^ K[3] ^ K[4] ^ K[5] ^ K[6] ^ K[7] ^ K[8] ^ K[9] ^ K[10] ^ K[11] ^ K[12] ^ K[13] ^ K[14] ^ K[15] ^ 0x1BD11BDAA9FC1A22ULL;
		T[2] = T[0] ^ T[1];

		for (i = 0; i < r; ++i)
		{
			// round n+8, inject k
			B[1] += K[x];
			x != 0 ? x -= 1 : x += 16;
			B[0] += B[1] + K[x];
			B[1] = IntegerTools::RotL64(B[1], 24) ^ B[0];
			x < 14 ? x += 3 : x -= 14;
			B[3] += K[x];
			x != 0 ? x -= 1 : x += 16;
			B[2] += B[3] + K[x];
			B[3] = IntegerTools::RotL64(B[3], 13) ^ B[2];
			x < 14 ? x += 3 : x -= 14;
			B[5] += K[x];
			x != 0 ? x -= 1 : x += 16;
			B[4] += B[5] + K[x];
			B[5] = IntegerTools::RotL64(B[5], 8) ^ B[4];
			x < 14 ? x += 3 : x -= 14;
			B[7] += K[x];
			x != 0 ? x -= 1 : x += 16;
			B[6] += B[7] + K[x];
			B[7] = IntegerTools::RotL64(B[7], 47) ^ B[6];
			x < 14 ? x += 3 : x -= 14;
			B[9] += K[x];
			x != 0 ? x -= 1 : x += 16;
			B[8] += B[9] + K[x];
			B[9] = IntegerTools::RotL64(B[9], 8) ^ B[8];
			x < 14 ? x += 3 : x -= 14;
			B[11] += K[x];
			x != 0 ? x -= 1 : x += 16;
			B[10] += B[11] + K[x];
			B[11] = IntegerTools::RotL64(B[11], 17) ^ B[10];
			x < 14 ? x += 3 : x -= 14;
			B[13] += K[x] + T[y];
			x != 0 ? x -= 1 : x += 16;
			B[12] += B[13] + K[x];
			B[13] = IntegerTools::RotL64(B[13], 22) ^ B[12];
			// mix
			x < 14 ? x += 3 : x -= 14;
			B[15] += K[x] + (i * 2);
			x != 0 ? x -= 1 : x += 16;
			y != 2 ? y += 1 : y -= 2;
			B[14] += B[15] + K[x] + T[y];
			B[15] = IntegerTools::RotL64(B[15], 37) ^ B[14];
			B[0] += B[9];
			B[9] = IntegerTools::RotL64(B[9], 38) ^ B[0];
			B[2] += B[13];
			B[13] = IntegerTools::RotL64(B[13], 19) ^ B[2];
			B[6] += B[11];
			B[11] = IntegerTools::RotL64(B[11], 10) ^ B[6];
			B[4] += B[15];
			B[15] = IntegerTools::RotL64(B[15], 55) ^ B[4];
			B[10] += B[7];
			B[7] = IntegerTools::RotL64(B[7], 49) ^ B[10];
			B[12] += B[3];
			B[3] = IntegerTools::RotL64(B[3], 18) ^ B[12];
			B[14] += B[5];
			B[5] = IntegerTools::RotL64(B[5], 23) ^ B[14];
			B[8] += B[1];
			B[1] = IntegerTools::RotL64(B[1], 52) ^ B[8];
			B[0] += B[7];
			B[7] = IntegerTools::RotL64(B[7], 33) ^ B[0];
			B[2] += B[5];
			B[5] = IntegerTools::RotL64(B[5], 4) ^ B[2];
			B[4] += B[3];
			B[3] = IntegerTools::RotL64(B[3], 51) ^ B[4];
			B[6] += B[1];
			B[1] = IntegerTools::RotL64(B[1], 13) ^ B[6];
			B[12] += B[15];
			B[15] = IntegerTools::RotL64(B[15], 34) ^ B[12];
			B[14] += B[13];
			B[13] = IntegerTools::RotL64(B[13], 41) ^ B[14];
			B[8] += B[11];
			B[11] = IntegerTools::RotL64(B[11], 59) ^ B[8];
			B[10] += B[9];
			B[9] = IntegerTools::RotL64(B[9], 17) ^ B[10];
			B[0] += B[15];
			B[15] = IntegerTools::RotL64(B[15], 5) ^ B[0];
			B[2] += B[11];
			B[11] = IntegerTools::RotL64(B[11], 20) ^ B[2];
			B[6] += B[13];
			B[13] = IntegerTools::RotL64(B[13], 48) ^ B[6];
			B[4] += B[9];
			B[9] = IntegerTools::RotL64(B[9], 41) ^ B[4];
			B[14] += B[1];
			B[1] = IntegerTools::RotL64(B[1], 47) ^ B[14];
			B[8] += B[5];
			B[5] = IntegerTools::RotL64(B[5], 28) ^ B[8];
			B[10] += B[3];
			B[3] = IntegerTools::RotL64(B[3], 16) ^ B[10];
			B[12] += B[7];
			B[7] = IntegerTools::RotL64(B[7], 25) ^ B[12];
			// inject
			x > 11 ? x -= 12 : x += 5;
			B[1] += K[x];
			x != 0 ? x -= 1 : x += 16;
			B[0] += B[1] + K[x];
			B[1] = IntegerTools::RotL64(B[1], 41) ^ B[0];
			x < 14 ? x += 3 : x -= 14;
			B[3] += K[x];
			x != 0 ? x -= 1 : x += 16;
			B[2] += B[3] + K[x];
			B[3] = IntegerTools::RotL64(B[3], 9) ^ B[2];
			x < 14 ? x += 3 : x -= 14;
			B[5] += K[x];
			x != 0 ? x -= 1 : x += 16;
			B[4] += B[5] + K[x];
			B[5] = IntegerTools::RotL64(B[5], 37) ^ B[4];
			x < 14 ? x += 3 : x -= 14;
			B[7] += K[x];
			x != 0 ? x -= 1 : x += 16;
			B[6] += B[7] + K[x];
			B[7] = IntegerTools::RotL64(B[7], 31) ^ B[6];
			x < 14 ? x += 3 : x -= 14;
			B[9] += K[x];
			x != 0 ? x -= 1 : x += 16;
			B[8] += B[9] + K[x];
			B[9] = IntegerTools::RotL64(B[9], 12) ^ B[8];
			x < 14 ? x += 3 : x -= 14;
			B[11] += K[x];
			x != 0 ? x -= 1 : x += 16;
			B[10] += B[11] + K[x];
			B[11] = IntegerTools::RotL64(B[11], 47) ^ B[10];
			x < 14 ? x += 3 : x -= 14;
			B[13] += K[x] + T[y];
			x != 0 ? x -= 1 : x += 16;
			B[12] += B[13] + K[x];
			B[13] = IntegerTools::RotL64(B[13], 44) ^ B[12];
			// mix
			x < 14 ? x += 3 : x -= 14;
			B[15] += K[x] + (i * 2) + 1;
			x != 0 ? x -= 1 : x += 16;
			y != 2 ? y += 1 : y -= 2;
			B[14] += B[15] + K[x] + T[y];
			B[15] = IntegerTools::RotL64(B[15], 30) ^ B[14];
			B[0] += B[9];
			B[9] = IntegerTools::RotL64(B[9], 16) ^ B[0];
			B[2] += B[13];
			B[13] = IntegerTools::RotL64(B[13], 34) ^ B[2];
			B[6] += B[11];
			B[11] = IntegerTools::RotL64(B[11], 56) ^ B[6];
			B[4] += B[15];
			B[15] = IntegerTools::RotL64(B[15], 51) ^ B[4];
			B[10] += B[7];
			B[7] = IntegerTools::RotL64(B[7], 4) ^ B[10];
			B[12] += B[3];
			B[3] = IntegerTools::RotL64(B[3], 53) ^ B[12];
			B[14] += B[5];
			B[5] = IntegerTools::RotL64(B[5], 42) ^ B[14];
			B[8] += B[1];
			B[1] = IntegerTools::RotL64(B[1], 41) ^ B[8];
			B[0] += B[7];
			B[7] = IntegerTools::RotL64(B[7], 31) ^ B[0];
			B[2] += B[5];
			B[5] = IntegerTools::RotL64(B[5], 44) ^ B[2];
			B[4] += B[3];
			B[3] = IntegerTools::RotL64(B[3], 47) ^ B[4];
			B[6] += B[1];
			B[1] = IntegerTools::RotL64(B[1], 46) ^ B[6];
			B[12] += B[15];
			B[15] = IntegerTools::RotL64(B[15], 19) ^ B[12];
			B[14] += B[13];
			B[13] = IntegerTools::RotL64(B[13], 42) ^ B[14];
			B[8] += B[11];
			B[11] = IntegerTools::RotL64(B[11], 44) ^ B[8];
			B[10] += B[9];
			B[9] = IntegerTools::RotL64(B[9], 25) ^ B[10];
			B[0] += B[15];
			B[15] = IntegerTools::RotL64(B[15], 9) ^ B[0];
			B[2] += B[11];
			B[11] = IntegerTools::RotL64(B[11], 48) ^ B[2];
			B[6] += B[13];
			B[13] = IntegerTools::RotL64(B[13], 35) ^ B[6];
			B[4] += B[9];
			B[9] = IntegerTools::RotL64(B[9], 52) ^ B[4];
			B[14] += B[1];
			B[1] = IntegerTools::RotL64(B[1], 23) ^ B[14];
			B[8] += B[5];
			B[5] = IntegerTools::RotL64(B[5], 31) ^ B[8];
			B[10] += B[3];
			B[3] = IntegerTools::RotL64(B[3], 37) ^ B[10];
			B[12] += B[7];
			B[7] = IntegerTools::RotL64(B[7], 20) ^ B[12];
			x > 11 ? x -= 12 : x += 5;
		}

		State[0] = B[0] + K[3];
		State[1] = B[1] + K[4];
		State[2] = B[2] + K[5];
		State[3] = B[3] + K[6];
		State[4] = B[4] + K[7];
		State[5] = B[5] + K[8];
		State[6] = B[6] + K[9];
		State[7] = B[7] + K[10];
		State[8] = B[8] + K[11];
		State[9] = B[9] + K[12];
		State[10] = B[10] + K[13];
		State[11] = B[11] + K[14];
		State[12] = B[12] + K[15];
		State[13] = B[13] + K[16] + T[2];
		State[14] = B[14] + K[0] + T[0];
		State[15] = B[15] + K[1] + (Rounds / 4);
	}

	/// <summary>
	/// The unrolled form of the Skein-1024 80 round permutation function.
	/// <para>This function (the default) has been optimized for speed, and timing neutrality.
	/// To enable this function, remove the CEX_DIGEST_COMPACT directive from the CexConfig file.</para>
	/// </summary>
	/// 
	/// <param name="Input">The input message array</param>
	/// <param name="Tweak">The cipher tweak array</param>
	/// <param name="State">The permutations state array</param>
	template<typename ArrayU64x2, typename ArrayU64x16>
	static void PemuteR80P1024U(const ArrayU64x16 &Input, const ArrayU64x2 &Tweak, ArrayU64x16 &State)
	{
		uint64_t B0;
		uint64_t B1;
		uint64_t B2;
		uint64_t B3;
		uint64_t B4;
		uint64_t B5;
		uint64_t B6;
		uint64_t B7;
		uint64_t B8;
		uint64_t B9;
		uint64_t B10;
		uint64_t B11;
		uint64_t B12;
		uint64_t B13;
		uint64_t B14;
		uint64_t B15;
		uint64_t K0;
		uint64_t K1;
		uint64_t K2;
		uint64_t K3;
		uint64_t K4;
		uint64_t K5;
		uint64_t K6;
		uint64_t K7;
		uint64_t K8;
		uint64_t K9;
		uint64_t K10;
		uint64_t K11;
		uint64_t K12;
		uint64_t K13;
		uint64_t K14;
		uint64_t K15;
		uint64_t K16;
		uint64_t T0;
		uint64_t T1;
		uint64_t T2;

		B0 = Input[0];
		B1 = Input[1];
		B2 = Input[2];
		B3 = Input[3];
		B4 = Input[4];
		B5 = Input[5];
		B6 = Input[6];
		B7 = Input[7];
		B8 = Input[8];
		B9 = Input[9];
		B10 = Input[10];
		B11 = Input[11];
		B12 = Input[12];
		B13 = Input[13];
		B14 = Input[14];
		B15 = Input[15];
		K0 = State[0];
		K1 = State[1];
		K2 = State[2];
		K3 = State[3];
		K4 = State[4];
		K5 = State[5];
		K6 = State[6];
		K7 = State[7];
		K8 = State[8];
		K9 = State[9];
		K10 = State[10];
		K11 = State[11];
		K12 = State[12];
		K13 = State[13];
		K14 = State[14];
		K15 = State[15];
		K16 = K0 ^ K1 ^ K2 ^ K3 ^ K4 ^ K5 ^ K6 ^ K7 ^ K8 ^ K9 ^ K10 ^ K11 ^ K12 ^ K13 ^ K14 ^ K15 ^ 0x1BD11BDAA9FC1A22ULL;
		T0 = Tweak[0];
		T1 = Tweak[1];
		T2 = Tweak[0] ^ Tweak[1];


		// rounds 0-7, inject k
		B1 += K1;
		B0 += B1 + K0;
		B1 = IntegerTools::RotL64(B1, 24) ^ B0;
		B3 += K3;
		B2 += B3 + K2;
		B3 = IntegerTools::RotL64(B3, 13) ^ B2;
		B5 += K5;
		B4 += B5 + K4;
		B5 = IntegerTools::RotL64(B5, 8) ^ B4;
		B7 += K7;
		B6 += B7 + K6;
		B7 = IntegerTools::RotL64(B7, 47) ^ B6;
		B9 += K9;
		B8 += B9 + K8;
		B9 = IntegerTools::RotL64(B9, 8) ^ B8;
		B11 += K11;
		B10 += B11 + K10;
		B11 = IntegerTools::RotL64(B11, 17) ^ B10;
		B13 += K13 + T0;
		B12 += B13 + K12;
		B13 = IntegerTools::RotL64(B13, 22) ^ B12;
		// mix
		B15 += K15;
		B14 += B15 + K14 + T1;
		B15 = IntegerTools::RotL64(B15, 37) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 38) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 19) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 10) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 55) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 49) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 18) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 23) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 52) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 33) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 4) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 51) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 34) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 41) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 59) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 17) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 5) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 20) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 48) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 41) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 47) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 28) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 16) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 25) ^ B12;
		// inject 
		B1 += K2;
		B0 += B1 + K1;
		B1 = IntegerTools::RotL64(B1, 41) ^ B0;
		B3 += K4;
		B2 += B3 + K3;
		B3 = IntegerTools::RotL64(B3, 9) ^ B2;
		B5 += K6;
		B4 += B5 + K5;
		B5 = IntegerTools::RotL64(B5, 37) ^ B4;
		B7 += K8;
		B6 += B7 + K7;
		B7 = IntegerTools::RotL64(B7, 31) ^ B6;
		B9 += K10;
		B8 += B9 + K9;
		B9 = IntegerTools::RotL64(B9, 12) ^ B8;
		B11 += K12;
		B10 += B11 + K11;
		B11 = IntegerTools::RotL64(B11, 47) ^ B10;
		B13 += K14 + T1;
		B12 += B13 + K13;
		B13 = IntegerTools::RotL64(B13, 44) ^ B12;
		// mix
		B15 += K16 + 1;
		B14 += B15 + K15 + T2;
		B15 = IntegerTools::RotL64(B15, 30) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 16) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 34) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 56) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 51) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 4) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 53) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 42) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 41) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 31) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 44) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 47) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 46) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 19) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 42) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 44) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 25) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 9) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 48) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 35) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 52) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 31) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 37) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 20) ^ B12;
		// rounds 8-15
		B1 += K3;
		B0 += B1 + K2;
		B1 = IntegerTools::RotL64(B1, 24) ^ B0;
		B3 += K5;
		B2 += B3 + K4;
		B3 = IntegerTools::RotL64(B3, 13) ^ B2;
		B5 += K7;
		B4 += B5 + K6;
		B5 = IntegerTools::RotL64(B5, 8) ^ B4;
		B7 += K9;
		B6 += B7 + K8;
		B7 = IntegerTools::RotL64(B7, 47) ^ B6;
		B9 += K11;
		B8 += B9 + K10;
		B9 = IntegerTools::RotL64(B9, 8) ^ B8;
		B11 += K13;
		B10 += B11 + K12;
		B11 = IntegerTools::RotL64(B11, 17) ^ B10;
		B13 += K15 + T2;
		B12 += B13 + K14;
		B13 = IntegerTools::RotL64(B13, 22) ^ B12;
		B15 += K0 + 2;
		B14 += B15 + K16 + T0;
		B15 = IntegerTools::RotL64(B15, 37) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 38) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 19) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 10) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 55) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 49) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 18) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 23) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 52) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 33) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 4) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 51) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 34) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 41) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 59) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 17) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 5) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 20) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 48) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 41) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 47) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 28) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 16) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 25) ^ B12;
		B1 += K4;
		B0 += B1 + K3;
		B1 = IntegerTools::RotL64(B1, 41) ^ B0;
		B3 += K6;
		B2 += B3 + K5;
		B3 = IntegerTools::RotL64(B3, 9) ^ B2;
		B5 += K8;
		B4 += B5 + K7;
		B5 = IntegerTools::RotL64(B5, 37) ^ B4;
		B7 += K10;
		B6 += B7 + K9;
		B7 = IntegerTools::RotL64(B7, 31) ^ B6;
		B9 += K12;
		B8 += B9 + K11;
		B9 = IntegerTools::RotL64(B9, 12) ^ B8;
		B11 += K14;
		B10 += B11 + K13;
		B11 = IntegerTools::RotL64(B11, 47) ^ B10;
		B13 += K16 + T0;
		B12 += B13 + K15;
		B13 = IntegerTools::RotL64(B13, 44) ^ B12;
		B15 += K1 + 3;
		B14 += B15 + K0 + T1;
		B15 = IntegerTools::RotL64(B15, 30) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 16) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 34) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 56) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 51) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 4) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 53) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 42) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 41) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 31) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 44) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 47) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 46) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 19) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 42) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 44) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 25) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 9) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 48) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 35) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 52) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 31) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 37) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 20) ^ B12;
		// rounds 16-23
		B1 += K5;
		B0 += B1 + K4;
		B1 = IntegerTools::RotL64(B1, 24) ^ B0;
		B3 += K7;
		B2 += B3 + K6;
		B3 = IntegerTools::RotL64(B3, 13) ^ B2;
		B5 += K9;
		B4 += B5 + K8;
		B5 = IntegerTools::RotL64(B5, 8) ^ B4;
		B7 += K11;
		B6 += B7 + K10;
		B7 = IntegerTools::RotL64(B7, 47) ^ B6;
		B9 += K13;
		B8 += B9 + K12;
		B9 = IntegerTools::RotL64(B9, 8) ^ B8;
		B11 += K15;
		B10 += B11 + K14;
		B11 = IntegerTools::RotL64(B11, 17) ^ B10;
		B13 += K0 + T1;
		B12 += B13 + K16;
		B13 = IntegerTools::RotL64(B13, 22) ^ B12;
		B15 += K2 + 4;
		B14 += B15 + K1 + T2;
		B15 = IntegerTools::RotL64(B15, 37) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 38) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 19) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 10) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 55) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 49) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 18) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 23) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 52) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 33) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 4) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 51) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 34) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 41) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 59) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 17) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 5) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 20) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 48) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 41) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 47) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 28) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 16) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 25) ^ B12;
		B1 += K6;
		B0 += B1 + K5;
		B1 = IntegerTools::RotL64(B1, 41) ^ B0;
		B3 += K8;
		B2 += B3 + K7;
		B3 = IntegerTools::RotL64(B3, 9) ^ B2;
		B5 += K10;
		B4 += B5 + K9;
		B5 = IntegerTools::RotL64(B5, 37) ^ B4;
		B7 += K12;
		B6 += B7 + K11;
		B7 = IntegerTools::RotL64(B7, 31) ^ B6;
		B9 += K14;
		B8 += B9 + K13;
		B9 = IntegerTools::RotL64(B9, 12) ^ B8;
		B11 += K16;
		B10 += B11 + K15;
		B11 = IntegerTools::RotL64(B11, 47) ^ B10;
		B13 += K1 + T2;
		B12 += B13 + K0;
		B13 = IntegerTools::RotL64(B13, 44) ^ B12;
		B15 += K3 + 5;
		B14 += B15 + K2 + T0;
		B15 = IntegerTools::RotL64(B15, 30) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 16) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 34) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 56) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 51) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 4) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 53) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 42) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 41) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 31) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 44) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 47) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 46) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 19) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 42) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 44) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 25) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 9) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 48) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 35) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 52) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 31) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 37) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 20) ^ B12;
		// rounds 24-31
		B1 += K7;
		B0 += B1 + K6;
		B1 = IntegerTools::RotL64(B1, 24) ^ B0;
		B3 += K9;
		B2 += B3 + K8;
		B3 = IntegerTools::RotL64(B3, 13) ^ B2;
		B5 += K11;
		B4 += B5 + K10;
		B5 = IntegerTools::RotL64(B5, 8) ^ B4;
		B7 += K13;
		B6 += B7 + K12;
		B7 = IntegerTools::RotL64(B7, 47) ^ B6;
		B9 += K15;
		B8 += B9 + K14;
		B9 = IntegerTools::RotL64(B9, 8) ^ B8;
		B11 += K0;
		B10 += B11 + K16;
		B11 = IntegerTools::RotL64(B11, 17) ^ B10;
		B13 += K2 + T0;
		B12 += B13 + K1;
		B13 = IntegerTools::RotL64(B13, 22) ^ B12;
		B15 += K4 + 6;
		B14 += B15 + K3 + T1;
		B15 = IntegerTools::RotL64(B15, 37) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 38) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 19) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 10) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 55) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 49) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 18) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 23) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 52) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 33) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 4) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 51) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 34) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 41) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 59) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 17) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 5) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 20) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 48) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 41) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 47) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 28) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 16) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 25) ^ B12;
		B1 += K8;
		B0 += B1 + K7;
		B1 = IntegerTools::RotL64(B1, 41) ^ B0;
		B3 += K10;
		B2 += B3 + K9;
		B3 = IntegerTools::RotL64(B3, 9) ^ B2;
		B5 += K12;
		B4 += B5 + K11;
		B5 = IntegerTools::RotL64(B5, 37) ^ B4;
		B7 += K14;
		B6 += B7 + K13;
		B7 = IntegerTools::RotL64(B7, 31) ^ B6;
		B9 += K16;
		B8 += B9 + K15;
		B9 = IntegerTools::RotL64(B9, 12) ^ B8;
		B11 += K1;
		B10 += B11 + K0;
		B11 = IntegerTools::RotL64(B11, 47) ^ B10;
		B13 += K3 + T1;
		B12 += B13 + K2;
		B13 = IntegerTools::RotL64(B13, 44) ^ B12;
		B15 += K5 + 7;
		B14 += B15 + K4 + T2;
		B15 = IntegerTools::RotL64(B15, 30) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 16) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 34) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 56) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 51) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 4) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 53) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 42) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 41) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 31) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 44) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 47) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 46) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 19) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 42) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 44) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 25) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 9) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 48) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 35) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 52) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 31) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 37) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 20) ^ B12;
		// rounds 32-39
		B1 += K9;
		B0 += B1 + K8;
		B1 = IntegerTools::RotL64(B1, 24) ^ B0;
		B3 += K11;
		B2 += B3 + K10;
		B3 = IntegerTools::RotL64(B3, 13) ^ B2;
		B5 += K13;
		B4 += B5 + K12;
		B5 = IntegerTools::RotL64(B5, 8) ^ B4;
		B7 += K15;
		B6 += B7 + K14;
		B7 = IntegerTools::RotL64(B7, 47) ^ B6;
		B9 += K0;
		B8 += B9 + K16;
		B9 = IntegerTools::RotL64(B9, 8) ^ B8;
		B11 += K2;
		B10 += B11 + K1;
		B11 = IntegerTools::RotL64(B11, 17) ^ B10;
		B13 += K4 + T2;
		B12 += B13 + K3;
		B13 = IntegerTools::RotL64(B13, 22) ^ B12;
		B15 += K6 + 8;
		B14 += B15 + K5 + T0;
		B15 = IntegerTools::RotL64(B15, 37) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 38) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 19) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 10) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 55) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 49) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 18) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 23) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 52) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 33) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 4) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 51) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 34) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 41) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 59) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 17) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 5) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 20) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 48) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 41) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 47) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 28) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 16) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 25) ^ B12;
		B1 += K10;
		B0 += B1 + K9;
		B1 = IntegerTools::RotL64(B1, 41) ^ B0;
		B3 += K12;
		B2 += B3 + K11;
		B3 = IntegerTools::RotL64(B3, 9) ^ B2;
		B5 += K14;
		B4 += B5 + K13;
		B5 = IntegerTools::RotL64(B5, 37) ^ B4;
		B7 += K16;
		B6 += B7 + K15;
		B7 = IntegerTools::RotL64(B7, 31) ^ B6;
		B9 += K1;
		B8 += B9 + K0;
		B9 = IntegerTools::RotL64(B9, 12) ^ B8;
		B11 += K3;
		B10 += B11 + K2;
		B11 = IntegerTools::RotL64(B11, 47) ^ B10;
		B13 += K5 + T0;
		B12 += B13 + K4;
		B13 = IntegerTools::RotL64(B13, 44) ^ B12;
		B15 += K7 + 9;
		B14 += B15 + K6 + T1;
		B15 = IntegerTools::RotL64(B15, 30) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 16) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 34) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 56) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 51) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 4) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 53) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 42) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 41) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 31) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 44) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 47) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 46) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 19) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 42) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 44) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 25) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 9) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 48) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 35) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 52) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 31) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 37) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 20) ^ B12;
		// rounds 40-47
		B1 += K11;
		B0 += B1 + K10;
		B1 = IntegerTools::RotL64(B1, 24) ^ B0;
		B3 += K13;
		B2 += B3 + K12;
		B3 = IntegerTools::RotL64(B3, 13) ^ B2;
		B5 += K15;
		B4 += B5 + K14;
		B5 = IntegerTools::RotL64(B5, 8) ^ B4;
		B7 += K0;
		B6 += B7 + K16;
		B7 = IntegerTools::RotL64(B7, 47) ^ B6;
		B9 += K2;
		B8 += B9 + K1;
		B9 = IntegerTools::RotL64(B9, 8) ^ B8;
		B11 += K4;
		B10 += B11 + K3;
		B11 = IntegerTools::RotL64(B11, 17) ^ B10;
		B13 += K6 + T1;
		B12 += B13 + K5;
		B13 = IntegerTools::RotL64(B13, 22) ^ B12;
		B15 += K8 + 10;
		B14 += B15 + K7 + T2;
		B15 = IntegerTools::RotL64(B15, 37) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 38) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 19) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 10) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 55) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 49) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 18) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 23) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 52) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 33) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 4) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 51) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 34) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 41) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 59) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 17) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 5) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 20) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 48) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 41) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 47) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 28) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 16) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 25) ^ B12;
		B1 += K12;
		B0 += B1 + K11;
		B1 = IntegerTools::RotL64(B1, 41) ^ B0;
		B3 += K14;
		B2 += B3 + K13;
		B3 = IntegerTools::RotL64(B3, 9) ^ B2;
		B5 += K16;
		B4 += B5 + K15;
		B5 = IntegerTools::RotL64(B5, 37) ^ B4;
		B7 += K1;
		B6 += B7 + K0;
		B7 = IntegerTools::RotL64(B7, 31) ^ B6;
		B9 += K3;
		B8 += B9 + K2;
		B9 = IntegerTools::RotL64(B9, 12) ^ B8;
		B11 += K5;
		B10 += B11 + K4;
		B11 = IntegerTools::RotL64(B11, 47) ^ B10;
		B13 += K7 + T2;
		B12 += B13 + K6;
		B13 = IntegerTools::RotL64(B13, 44) ^ B12;
		B15 += K9 + 11;
		B14 += B15 + K8 + T0;
		B15 = IntegerTools::RotL64(B15, 30) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 16) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 34) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 56) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 51) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 4) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 53) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 42) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 41) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 31) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 44) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 47) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 46) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 19) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 42) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 44) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 25) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 9) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 48) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 35) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 52) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 31) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 37) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 20) ^ B12;
		// rounds 48-55
		B1 += K13;
		B0 += B1 + K12;
		B1 = IntegerTools::RotL64(B1, 24) ^ B0;
		B3 += K15;
		B2 += B3 + K14;
		B3 = IntegerTools::RotL64(B3, 13) ^ B2;
		B5 += K0;
		B4 += B5 + K16;
		B5 = IntegerTools::RotL64(B5, 8) ^ B4;
		B7 += K2;
		B6 += B7 + K1;
		B7 = IntegerTools::RotL64(B7, 47) ^ B6;
		B9 += K4;
		B8 += B9 + K3;
		B9 = IntegerTools::RotL64(B9, 8) ^ B8;
		B11 += K6;
		B10 += B11 + K5;
		B11 = IntegerTools::RotL64(B11, 17) ^ B10;
		B13 += K8 + T0;
		B12 += B13 + K7;
		B13 = IntegerTools::RotL64(B13, 22) ^ B12;
		B15 += K10 + 12;
		B14 += B15 + K9 + T1;
		B15 = IntegerTools::RotL64(B15, 37) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 38) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 19) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 10) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 55) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 49) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 18) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 23) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 52) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 33) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 4) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 51) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 34) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 41) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 59) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 17) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 5) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 20) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 48) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 41) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 47) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 28) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 16) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 25) ^ B12;
		B1 += K14;
		B0 += B1 + K13;
		B1 = IntegerTools::RotL64(B1, 41) ^ B0;
		B3 += K16;
		B2 += B3 + K15;
		B3 = IntegerTools::RotL64(B3, 9) ^ B2;
		B5 += K1;
		B4 += B5 + K0;
		B5 = IntegerTools::RotL64(B5, 37) ^ B4;
		B7 += K3;
		B6 += B7 + K2;
		B7 = IntegerTools::RotL64(B7, 31) ^ B6;
		B9 += K5;
		B8 += B9 + K4;
		B9 = IntegerTools::RotL64(B9, 12) ^ B8;
		B11 += K7;
		B10 += B11 + K6;
		B11 = IntegerTools::RotL64(B11, 47) ^ B10;
		B13 += K9 + T1;
		B12 += B13 + K8;
		B13 = IntegerTools::RotL64(B13, 44) ^ B12;
		B15 += K11 + 13;
		B14 += B15 + K10 + T2;
		B15 = IntegerTools::RotL64(B15, 30) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 16) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 34) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 56) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 51) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 4) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 53) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 42) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 41) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 31) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 44) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 47) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 46) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 19) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 42) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 44) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 25) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 9) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 48) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 35) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 52) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 31) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 37) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 20) ^ B12;
		// rounds 56-63
		B1 += K15;
		B0 += B1 + K14;
		B1 = IntegerTools::RotL64(B1, 24) ^ B0;
		B3 += K0;
		B2 += B3 + K16;
		B3 = IntegerTools::RotL64(B3, 13) ^ B2;
		B5 += K2;
		B4 += B5 + K1;
		B5 = IntegerTools::RotL64(B5, 8) ^ B4;
		B7 += K4;
		B6 += B7 + K3;
		B7 = IntegerTools::RotL64(B7, 47) ^ B6;
		B9 += K6;
		B8 += B9 + K5;
		B9 = IntegerTools::RotL64(B9, 8) ^ B8;
		B11 += K8;
		B10 += B11 + K7;
		B11 = IntegerTools::RotL64(B11, 17) ^ B10;
		B13 += K10 + T2;
		B12 += B13 + K9;
		B13 = IntegerTools::RotL64(B13, 22) ^ B12;
		B15 += K12 + 14;
		B14 += B15 + K11 + T0;
		B15 = IntegerTools::RotL64(B15, 37) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 38) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 19) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 10) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 55) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 49) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 18) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 23) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 52) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 33) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 4) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 51) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 34) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 41) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 59) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 17) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 5) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 20) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 48) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 41) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 47) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 28) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 16) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 25) ^ B12;
		B1 += K16;
		B0 += B1 + K15;
		B1 = IntegerTools::RotL64(B1, 41) ^ B0;
		B3 += K1;
		B2 += B3 + K0;
		B3 = IntegerTools::RotL64(B3, 9) ^ B2;
		B5 += K3;
		B4 += B5 + K2;
		B5 = IntegerTools::RotL64(B5, 37) ^ B4;
		B7 += K5;
		B6 += B7 + K4;
		B7 = IntegerTools::RotL64(B7, 31) ^ B6;
		B9 += K7;
		B8 += B9 + K6;
		B9 = IntegerTools::RotL64(B9, 12) ^ B8;
		B11 += K9;
		B10 += B11 + K8;
		B11 = IntegerTools::RotL64(B11, 47) ^ B10;
		B13 += K11 + T0;
		B12 += B13 + K10;
		B13 = IntegerTools::RotL64(B13, 44) ^ B12;
		B15 += K13 + 15;
		B14 += B15 + K12 + T1;
		B15 = IntegerTools::RotL64(B15, 30) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 16) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 34) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 56) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 51) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 4) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 53) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 42) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 41) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 31) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 44) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 47) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 46) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 19) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 42) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 44) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 25) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 9) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 48) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 35) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 52) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 31) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 37) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 20) ^ B12;
		// rounds 64-71
		B1 += K0;
		B0 += B1 + K16;
		B1 = IntegerTools::RotL64(B1, 24) ^ B0;
		B3 += K2;
		B2 += B3 + K1;
		B3 = IntegerTools::RotL64(B3, 13) ^ B2;
		B5 += K4;
		B4 += B5 + K3;
		B5 = IntegerTools::RotL64(B5, 8) ^ B4;
		B7 += K6;
		B6 += B7 + K5;
		B7 = IntegerTools::RotL64(B7, 47) ^ B6;
		B9 += K8;
		B8 += B9 + K7;
		B9 = IntegerTools::RotL64(B9, 8) ^ B8;
		B11 += K10;
		B10 += B11 + K9;
		B11 = IntegerTools::RotL64(B11, 17) ^ B10;
		B13 += K12 + T1;
		B12 += B13 + K11;
		B13 = IntegerTools::RotL64(B13, 22) ^ B12;
		B15 += K14 + 16;
		B14 += B15 + K13 + T2;
		B15 = IntegerTools::RotL64(B15, 37) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 38) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 19) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 10) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 55) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 49) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 18) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 23) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 52) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 33) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 4) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 51) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 34) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 41) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 59) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 17) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 5) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 20) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 48) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 41) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 47) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 28) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 16) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 25) ^ B12;
		B1 += K1;
		B0 += B1 + K0;
		B1 = IntegerTools::RotL64(B1, 41) ^ B0;
		B3 += K3;
		B2 += B3 + K2;
		B3 = IntegerTools::RotL64(B3, 9) ^ B2;
		B5 += K5;
		B4 += B5 + K4;
		B5 = IntegerTools::RotL64(B5, 37) ^ B4;
		B7 += K7;
		B6 += B7 + K6;
		B7 = IntegerTools::RotL64(B7, 31) ^ B6;
		B9 += K9;
		B8 += B9 + K8;
		B9 = IntegerTools::RotL64(B9, 12) ^ B8;
		B11 += K11;
		B10 += B11 + K10;
		B11 = IntegerTools::RotL64(B11, 47) ^ B10;
		B13 += K13 + T2;
		B12 += B13 + K12;
		B13 = IntegerTools::RotL64(B13, 44) ^ B12;
		B15 += K15 + 17;
		B14 += B15 + K14 + T0;
		B15 = IntegerTools::RotL64(B15, 30) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 16) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 34) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 56) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 51) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 4) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 53) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 42) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 41) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 31) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 44) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 47) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 46) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 19) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 42) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 44) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 25) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 9) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 48) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 35) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 52) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 31) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 37) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 20) ^ B12;
		// rounds 72-79
		B1 += K2;
		B0 += B1 + K1;
		B1 = IntegerTools::RotL64(B1, 24) ^ B0;
		B3 += K4;
		B2 += B3 + K3;
		B3 = IntegerTools::RotL64(B3, 13) ^ B2;
		B5 += K6;
		B4 += B5 + K5;
		B5 = IntegerTools::RotL64(B5, 8) ^ B4;
		B7 += K8;
		B6 += B7 + K7;
		B7 = IntegerTools::RotL64(B7, 47) ^ B6;
		B9 += K10;
		B8 += B9 + K9;
		B9 = IntegerTools::RotL64(B9, 8) ^ B8;
		B11 += K12;
		B10 += B11 + K11;
		B11 = IntegerTools::RotL64(B11, 17) ^ B10;
		B13 += K14 + T0;
		B12 += B13 + K13;
		B13 = IntegerTools::RotL64(B13, 22) ^ B12;
		B15 += K16 + 18;
		B14 += B15 + K15 + T1;
		B15 = IntegerTools::RotL64(B15, 37) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 38) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 19) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 10) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 55) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 49) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 18) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 23) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 52) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 33) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 4) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 51) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 34) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 41) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 59) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 17) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 5) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 20) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 48) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 41) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 47) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 28) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 16) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 25) ^ B12;
		B1 += K3;
		B0 += B1 + K2;
		B1 = IntegerTools::RotL64(B1, 41) ^ B0;
		B3 += K5;
		B2 += B3 + K4;
		B3 = IntegerTools::RotL64(B3, 9) ^ B2;
		B5 += K7;
		B4 += B5 + K6;
		B5 = IntegerTools::RotL64(B5, 37) ^ B4;
		B7 += K9;
		B6 += B7 + K8;
		B7 = IntegerTools::RotL64(B7, 31) ^ B6;
		B9 += K11;
		B8 += B9 + K10;
		B9 = IntegerTools::RotL64(B9, 12) ^ B8;
		B11 += K13;
		B10 += B11 + K12;
		B11 = IntegerTools::RotL64(B11, 47) ^ B10;
		B13 += K15 + T1;
		B12 += B13 + K14;
		B13 = IntegerTools::RotL64(B13, 44) ^ B12;
		B15 += K0 + 19;
		B14 += B15 + K16 + T2;
		B15 = IntegerTools::RotL64(B15, 30) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 16) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 34) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 56) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 51) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 4) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 53) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 42) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 41) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 31) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 44) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 47) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 46) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 19) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 42) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 44) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 25) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 9) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 48) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 35) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 52) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 31) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 37) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 20) ^ B12;

		State[0] = B0 + K3;
		State[1] = B1 + K4;
		State[2] = B2 + K5;
		State[3] = B3 + K6;
		State[4] = B4 + K7;
		State[5] = B5 + K8;
		State[6] = B6 + K9;
		State[7] = B7 + K10;
		State[8] = B8 + K11;
		State[9] = B9 + K12;
		State[10] = B10 + K13;
		State[11] = B11 + K14;
		State[12] = B12 + K15;
		State[13] = B13 + K16 + T2;
		State[14] = B14 + K0 + T0;
		State[15] = B15 + K1 + 20;
	}

	/// <summary>
	/// The unrolled form of the Skein-1024 120 round permutation function.
	/// <para>This function (the default) has been optimized for speed, and timing neutrality.
	/// To enable this function, remove the CEX_DIGEST_COMPACT directive from the CexConfig file.</para>
	/// </summary>
	/// 
	/// <param name="Input">The input message array</param>
	/// <param name="Tweak">The cipher tweak array</param>
	/// <param name="State">The permutations state array</param>
	template<typename ArrayU64x2, typename ArrayU64x16>
	static void PemuteR120P1024U(const ArrayU64x16 &Input, const ArrayU64x2 &Tweak, ArrayU64x16 &State)
	{
		uint64_t B0;
		uint64_t B1;
		uint64_t B2;
		uint64_t B3;
		uint64_t B4;
		uint64_t B5;
		uint64_t B6;
		uint64_t B7;
		uint64_t B8;
		uint64_t B9;
		uint64_t B10;
		uint64_t B11;
		uint64_t B12;
		uint64_t B13;
		uint64_t B14;
		uint64_t B15;
		uint64_t K0;
		uint64_t K1;
		uint64_t K2;
		uint64_t K3;
		uint64_t K4;
		uint64_t K5;
		uint64_t K6;
		uint64_t K7;
		uint64_t K8;
		uint64_t K9;
		uint64_t K10;
		uint64_t K11;
		uint64_t K12;
		uint64_t K13;
		uint64_t K14;
		uint64_t K15;
		uint64_t K16;
		uint64_t T0;
		uint64_t T1;
		uint64_t T2;

		B0 = Input[0];
		B1 = Input[1];
		B2 = Input[2];
		B3 = Input[3];
		B4 = Input[4];
		B5 = Input[5];
		B6 = Input[6];
		B7 = Input[7];
		B8 = Input[8];
		B9 = Input[9];
		B10 = Input[10];
		B11 = Input[11];
		B12 = Input[12];
		B13 = Input[13];
		B14 = Input[14];
		B15 = Input[15];
		K0 = State[0];
		K1 = State[1];
		K2 = State[2];
		K3 = State[3];
		K4 = State[4];
		K5 = State[5];
		K6 = State[6];
		K7 = State[7];
		K8 = State[8];
		K9 = State[9];
		K10 = State[10];
		K11 = State[11];
		K12 = State[12];
		K13 = State[13];
		K14 = State[14];
		K15 = State[15];
		K16 = K0 ^ K1 ^ K2 ^ K3 ^ K4 ^ K5 ^ K6 ^ K7 ^ K8 ^ K9 ^ K10 ^ K11 ^ K12 ^ K13 ^ K14 ^ K15 ^ 0x1BD11BDAA9FC1A22ULL;
		T0 = Tweak[0];
		T1 = Tweak[1];
		T2 = Tweak[0] ^ Tweak[1];

		// rounds 0-7, inject k
		B1 += K1;
		B0 += B1 + K0;
		B1 = IntegerTools::RotL64(B1, 24) ^ B0;
		B3 += K3;
		B2 += B3 + K2;
		B3 = IntegerTools::RotL64(B3, 13) ^ B2;
		B5 += K5;
		B4 += B5 + K4;
		B5 = IntegerTools::RotL64(B5, 8) ^ B4;
		B7 += K7;
		B6 += B7 + K6;
		B7 = IntegerTools::RotL64(B7, 47) ^ B6;
		B9 += K9;
		B8 += B9 + K8;
		B9 = IntegerTools::RotL64(B9, 8) ^ B8;
		B11 += K11;
		B10 += B11 + K10;
		B11 = IntegerTools::RotL64(B11, 17) ^ B10;
		B13 += K13 + T0;
		B12 += B13 + K12;
		B13 = IntegerTools::RotL64(B13, 22) ^ B12;
		// mix
		B15 += K15;
		B14 += B15 + K14 + T1;
		B15 = IntegerTools::RotL64(B15, 37) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 38) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 19) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 10) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 55) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 49) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 18) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 23) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 52) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 33) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 4) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 51) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 34) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 41) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 59) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 17) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 5) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 20) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 48) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 41) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 47) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 28) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 16) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 25) ^ B12;
		// inject 
		B1 += K2;
		B0 += B1 + K1;
		B1 = IntegerTools::RotL64(B1, 41) ^ B0;
		B3 += K4;
		B2 += B3 + K3;
		B3 = IntegerTools::RotL64(B3, 9) ^ B2;
		B5 += K6;
		B4 += B5 + K5;
		B5 = IntegerTools::RotL64(B5, 37) ^ B4;
		B7 += K8;
		B6 += B7 + K7;
		B7 = IntegerTools::RotL64(B7, 31) ^ B6;
		B9 += K10;
		B8 += B9 + K9;
		B9 = IntegerTools::RotL64(B9, 12) ^ B8;
		B11 += K12;
		B10 += B11 + K11;
		B11 = IntegerTools::RotL64(B11, 47) ^ B10;
		B13 += K14 + T1;
		B12 += B13 + K13;
		B13 = IntegerTools::RotL64(B13, 44) ^ B12;
		// mix
		B15 += K16 + 1;
		B14 += B15 + K15 + T2;
		B15 = IntegerTools::RotL64(B15, 30) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 16) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 34) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 56) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 51) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 4) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 53) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 42) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 41) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 31) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 44) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 47) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 46) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 19) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 42) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 44) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 25) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 9) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 48) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 35) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 52) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 31) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 37) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 20) ^ B12;
		// rounds 8-15
		B1 += K3;
		B0 += B1 + K2;
		B1 = IntegerTools::RotL64(B1, 24) ^ B0;
		B3 += K5;
		B2 += B3 + K4;
		B3 = IntegerTools::RotL64(B3, 13) ^ B2;
		B5 += K7;
		B4 += B5 + K6;
		B5 = IntegerTools::RotL64(B5, 8) ^ B4;
		B7 += K9;
		B6 += B7 + K8;
		B7 = IntegerTools::RotL64(B7, 47) ^ B6;
		B9 += K11;
		B8 += B9 + K10;
		B9 = IntegerTools::RotL64(B9, 8) ^ B8;
		B11 += K13;
		B10 += B11 + K12;
		B11 = IntegerTools::RotL64(B11, 17) ^ B10;
		B13 += K15 + T2;
		B12 += B13 + K14;
		B13 = IntegerTools::RotL64(B13, 22) ^ B12;
		B15 += K0 + 2;
		B14 += B15 + K16 + T0;
		B15 = IntegerTools::RotL64(B15, 37) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 38) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 19) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 10) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 55) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 49) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 18) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 23) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 52) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 33) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 4) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 51) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 34) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 41) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 59) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 17) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 5) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 20) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 48) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 41) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 47) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 28) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 16) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 25) ^ B12;
		B1 += K4;
		B0 += B1 + K3;
		B1 = IntegerTools::RotL64(B1, 41) ^ B0;
		B3 += K6;
		B2 += B3 + K5;
		B3 = IntegerTools::RotL64(B3, 9) ^ B2;
		B5 += K8;
		B4 += B5 + K7;
		B5 = IntegerTools::RotL64(B5, 37) ^ B4;
		B7 += K10;
		B6 += B7 + K9;
		B7 = IntegerTools::RotL64(B7, 31) ^ B6;
		B9 += K12;
		B8 += B9 + K11;
		B9 = IntegerTools::RotL64(B9, 12) ^ B8;
		B11 += K14;
		B10 += B11 + K13;
		B11 = IntegerTools::RotL64(B11, 47) ^ B10;
		B13 += K16 + T0;
		B12 += B13 + K15;
		B13 = IntegerTools::RotL64(B13, 44) ^ B12;
		B15 += K1 + 3;
		B14 += B15 + K0 + T1;
		B15 = IntegerTools::RotL64(B15, 30) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 16) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 34) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 56) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 51) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 4) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 53) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 42) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 41) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 31) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 44) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 47) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 46) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 19) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 42) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 44) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 25) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 9) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 48) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 35) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 52) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 31) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 37) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 20) ^ B12;
		// rounds 16-23
		B1 += K5;
		B0 += B1 + K4;
		B1 = IntegerTools::RotL64(B1, 24) ^ B0;
		B3 += K7;
		B2 += B3 + K6;
		B3 = IntegerTools::RotL64(B3, 13) ^ B2;
		B5 += K9;
		B4 += B5 + K8;
		B5 = IntegerTools::RotL64(B5, 8) ^ B4;
		B7 += K11;
		B6 += B7 + K10;
		B7 = IntegerTools::RotL64(B7, 47) ^ B6;
		B9 += K13;
		B8 += B9 + K12;
		B9 = IntegerTools::RotL64(B9, 8) ^ B8;
		B11 += K15;
		B10 += B11 + K14;
		B11 = IntegerTools::RotL64(B11, 17) ^ B10;
		B13 += K0 + T1;
		B12 += B13 + K16;
		B13 = IntegerTools::RotL64(B13, 22) ^ B12;
		B15 += K2 + 4;
		B14 += B15 + K1 + T2;
		B15 = IntegerTools::RotL64(B15, 37) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 38) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 19) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 10) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 55) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 49) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 18) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 23) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 52) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 33) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 4) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 51) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 34) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 41) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 59) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 17) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 5) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 20) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 48) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 41) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 47) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 28) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 16) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 25) ^ B12;
		B1 += K6;
		B0 += B1 + K5;
		B1 = IntegerTools::RotL64(B1, 41) ^ B0;
		B3 += K8;
		B2 += B3 + K7;
		B3 = IntegerTools::RotL64(B3, 9) ^ B2;
		B5 += K10;
		B4 += B5 + K9;
		B5 = IntegerTools::RotL64(B5, 37) ^ B4;
		B7 += K12;
		B6 += B7 + K11;
		B7 = IntegerTools::RotL64(B7, 31) ^ B6;
		B9 += K14;
		B8 += B9 + K13;
		B9 = IntegerTools::RotL64(B9, 12) ^ B8;
		B11 += K16;
		B10 += B11 + K15;
		B11 = IntegerTools::RotL64(B11, 47) ^ B10;
		B13 += K1 + T2;
		B12 += B13 + K0;
		B13 = IntegerTools::RotL64(B13, 44) ^ B12;
		B15 += K3 + 5;
		B14 += B15 + K2 + T0;
		B15 = IntegerTools::RotL64(B15, 30) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 16) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 34) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 56) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 51) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 4) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 53) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 42) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 41) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 31) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 44) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 47) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 46) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 19) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 42) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 44) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 25) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 9) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 48) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 35) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 52) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 31) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 37) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 20) ^ B12;
		// rounds 24-31
		B1 += K7;
		B0 += B1 + K6;
		B1 = IntegerTools::RotL64(B1, 24) ^ B0;
		B3 += K9;
		B2 += B3 + K8;
		B3 = IntegerTools::RotL64(B3, 13) ^ B2;
		B5 += K11;
		B4 += B5 + K10;
		B5 = IntegerTools::RotL64(B5, 8) ^ B4;
		B7 += K13;
		B6 += B7 + K12;
		B7 = IntegerTools::RotL64(B7, 47) ^ B6;
		B9 += K15;
		B8 += B9 + K14;
		B9 = IntegerTools::RotL64(B9, 8) ^ B8;
		B11 += K0;
		B10 += B11 + K16;
		B11 = IntegerTools::RotL64(B11, 17) ^ B10;
		B13 += K2 + T0;
		B12 += B13 + K1;
		B13 = IntegerTools::RotL64(B13, 22) ^ B12;
		B15 += K4 + 6;
		B14 += B15 + K3 + T1;
		B15 = IntegerTools::RotL64(B15, 37) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 38) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 19) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 10) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 55) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 49) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 18) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 23) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 52) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 33) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 4) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 51) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 34) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 41) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 59) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 17) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 5) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 20) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 48) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 41) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 47) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 28) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 16) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 25) ^ B12;
		B1 += K8;
		B0 += B1 + K7;
		B1 = IntegerTools::RotL64(B1, 41) ^ B0;
		B3 += K10;
		B2 += B3 + K9;
		B3 = IntegerTools::RotL64(B3, 9) ^ B2;
		B5 += K12;
		B4 += B5 + K11;
		B5 = IntegerTools::RotL64(B5, 37) ^ B4;
		B7 += K14;
		B6 += B7 + K13;
		B7 = IntegerTools::RotL64(B7, 31) ^ B6;
		B9 += K16;
		B8 += B9 + K15;
		B9 = IntegerTools::RotL64(B9, 12) ^ B8;
		B11 += K1;
		B10 += B11 + K0;
		B11 = IntegerTools::RotL64(B11, 47) ^ B10;
		B13 += K3 + T1;
		B12 += B13 + K2;
		B13 = IntegerTools::RotL64(B13, 44) ^ B12;
		B15 += K5 + 7;
		B14 += B15 + K4 + T2;
		B15 = IntegerTools::RotL64(B15, 30) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 16) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 34) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 56) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 51) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 4) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 53) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 42) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 41) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 31) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 44) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 47) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 46) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 19) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 42) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 44) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 25) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 9) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 48) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 35) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 52) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 31) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 37) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 20) ^ B12;
		// rounds 32-39
		B1 += K9;
		B0 += B1 + K8;
		B1 = IntegerTools::RotL64(B1, 24) ^ B0;
		B3 += K11;
		B2 += B3 + K10;
		B3 = IntegerTools::RotL64(B3, 13) ^ B2;
		B5 += K13;
		B4 += B5 + K12;
		B5 = IntegerTools::RotL64(B5, 8) ^ B4;
		B7 += K15;
		B6 += B7 + K14;
		B7 = IntegerTools::RotL64(B7, 47) ^ B6;
		B9 += K0;
		B8 += B9 + K16;
		B9 = IntegerTools::RotL64(B9, 8) ^ B8;
		B11 += K2;
		B10 += B11 + K1;
		B11 = IntegerTools::RotL64(B11, 17) ^ B10;
		B13 += K4 + T2;
		B12 += B13 + K3;
		B13 = IntegerTools::RotL64(B13, 22) ^ B12;
		B15 += K6 + 8;
		B14 += B15 + K5 + T0;
		B15 = IntegerTools::RotL64(B15, 37) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 38) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 19) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 10) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 55) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 49) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 18) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 23) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 52) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 33) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 4) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 51) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 34) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 41) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 59) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 17) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 5) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 20) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 48) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 41) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 47) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 28) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 16) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 25) ^ B12;
		B1 += K10;
		B0 += B1 + K9;
		B1 = IntegerTools::RotL64(B1, 41) ^ B0;
		B3 += K12;
		B2 += B3 + K11;
		B3 = IntegerTools::RotL64(B3, 9) ^ B2;
		B5 += K14;
		B4 += B5 + K13;
		B5 = IntegerTools::RotL64(B5, 37) ^ B4;
		B7 += K16;
		B6 += B7 + K15;
		B7 = IntegerTools::RotL64(B7, 31) ^ B6;
		B9 += K1;
		B8 += B9 + K0;
		B9 = IntegerTools::RotL64(B9, 12) ^ B8;
		B11 += K3;
		B10 += B11 + K2;
		B11 = IntegerTools::RotL64(B11, 47) ^ B10;
		B13 += K5 + T0;
		B12 += B13 + K4;
		B13 = IntegerTools::RotL64(B13, 44) ^ B12;
		B15 += K7 + 9;
		B14 += B15 + K6 + T1;
		B15 = IntegerTools::RotL64(B15, 30) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 16) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 34) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 56) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 51) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 4) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 53) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 42) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 41) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 31) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 44) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 47) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 46) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 19) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 42) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 44) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 25) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 9) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 48) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 35) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 52) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 31) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 37) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 20) ^ B12;
		// rounds 40-47
		B1 += K11;
		B0 += B1 + K10;
		B1 = IntegerTools::RotL64(B1, 24) ^ B0;
		B3 += K13;
		B2 += B3 + K12;
		B3 = IntegerTools::RotL64(B3, 13) ^ B2;
		B5 += K15;
		B4 += B5 + K14;
		B5 = IntegerTools::RotL64(B5, 8) ^ B4;
		B7 += K0;
		B6 += B7 + K16;
		B7 = IntegerTools::RotL64(B7, 47) ^ B6;
		B9 += K2;
		B8 += B9 + K1;
		B9 = IntegerTools::RotL64(B9, 8) ^ B8;
		B11 += K4;
		B10 += B11 + K3;
		B11 = IntegerTools::RotL64(B11, 17) ^ B10;
		B13 += K6 + T1;
		B12 += B13 + K5;
		B13 = IntegerTools::RotL64(B13, 22) ^ B12;
		B15 += K8 + 10;
		B14 += B15 + K7 + T2;
		B15 = IntegerTools::RotL64(B15, 37) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 38) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 19) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 10) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 55) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 49) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 18) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 23) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 52) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 33) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 4) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 51) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 34) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 41) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 59) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 17) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 5) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 20) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 48) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 41) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 47) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 28) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 16) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 25) ^ B12;
		B1 += K12;
		B0 += B1 + K11;
		B1 = IntegerTools::RotL64(B1, 41) ^ B0;
		B3 += K14;
		B2 += B3 + K13;
		B3 = IntegerTools::RotL64(B3, 9) ^ B2;
		B5 += K16;
		B4 += B5 + K15;
		B5 = IntegerTools::RotL64(B5, 37) ^ B4;
		B7 += K1;
		B6 += B7 + K0;
		B7 = IntegerTools::RotL64(B7, 31) ^ B6;
		B9 += K3;
		B8 += B9 + K2;
		B9 = IntegerTools::RotL64(B9, 12) ^ B8;
		B11 += K5;
		B10 += B11 + K4;
		B11 = IntegerTools::RotL64(B11, 47) ^ B10;
		B13 += K7 + T2;
		B12 += B13 + K6;
		B13 = IntegerTools::RotL64(B13, 44) ^ B12;
		B15 += K9 + 11;
		B14 += B15 + K8 + T0;
		B15 = IntegerTools::RotL64(B15, 30) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 16) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 34) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 56) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 51) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 4) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 53) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 42) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 41) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 31) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 44) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 47) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 46) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 19) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 42) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 44) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 25) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 9) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 48) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 35) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 52) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 31) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 37) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 20) ^ B12;
		// rounds 48-55
		B1 += K13;
		B0 += B1 + K12;
		B1 = IntegerTools::RotL64(B1, 24) ^ B0;
		B3 += K15;
		B2 += B3 + K14;
		B3 = IntegerTools::RotL64(B3, 13) ^ B2;
		B5 += K0;
		B4 += B5 + K16;
		B5 = IntegerTools::RotL64(B5, 8) ^ B4;
		B7 += K2;
		B6 += B7 + K1;
		B7 = IntegerTools::RotL64(B7, 47) ^ B6;
		B9 += K4;
		B8 += B9 + K3;
		B9 = IntegerTools::RotL64(B9, 8) ^ B8;
		B11 += K6;
		B10 += B11 + K5;
		B11 = IntegerTools::RotL64(B11, 17) ^ B10;
		B13 += K8 + T0;
		B12 += B13 + K7;
		B13 = IntegerTools::RotL64(B13, 22) ^ B12;
		B15 += K10 + 12;
		B14 += B15 + K9 + T1;
		B15 = IntegerTools::RotL64(B15, 37) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 38) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 19) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 10) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 55) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 49) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 18) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 23) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 52) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 33) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 4) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 51) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 34) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 41) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 59) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 17) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 5) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 20) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 48) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 41) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 47) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 28) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 16) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 25) ^ B12;
		B1 += K14;
		B0 += B1 + K13;
		B1 = IntegerTools::RotL64(B1, 41) ^ B0;
		B3 += K16;
		B2 += B3 + K15;
		B3 = IntegerTools::RotL64(B3, 9) ^ B2;
		B5 += K1;
		B4 += B5 + K0;
		B5 = IntegerTools::RotL64(B5, 37) ^ B4;
		B7 += K3;
		B6 += B7 + K2;
		B7 = IntegerTools::RotL64(B7, 31) ^ B6;
		B9 += K5;
		B8 += B9 + K4;
		B9 = IntegerTools::RotL64(B9, 12) ^ B8;
		B11 += K7;
		B10 += B11 + K6;
		B11 = IntegerTools::RotL64(B11, 47) ^ B10;
		B13 += K9 + T1;
		B12 += B13 + K8;
		B13 = IntegerTools::RotL64(B13, 44) ^ B12;
		B15 += K11 + 13;
		B14 += B15 + K10 + T2;
		B15 = IntegerTools::RotL64(B15, 30) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 16) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 34) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 56) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 51) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 4) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 53) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 42) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 41) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 31) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 44) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 47) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 46) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 19) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 42) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 44) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 25) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 9) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 48) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 35) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 52) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 31) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 37) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 20) ^ B12;
		// rounds 56-63
		B1 += K15;
		B0 += B1 + K14;
		B1 = IntegerTools::RotL64(B1, 24) ^ B0;
		B3 += K0;
		B2 += B3 + K16;
		B3 = IntegerTools::RotL64(B3, 13) ^ B2;
		B5 += K2;
		B4 += B5 + K1;
		B5 = IntegerTools::RotL64(B5, 8) ^ B4;
		B7 += K4;
		B6 += B7 + K3;
		B7 = IntegerTools::RotL64(B7, 47) ^ B6;
		B9 += K6;
		B8 += B9 + K5;
		B9 = IntegerTools::RotL64(B9, 8) ^ B8;
		B11 += K8;
		B10 += B11 + K7;
		B11 = IntegerTools::RotL64(B11, 17) ^ B10;
		B13 += K10 + T2;
		B12 += B13 + K9;
		B13 = IntegerTools::RotL64(B13, 22) ^ B12;
		B15 += K12 + 14;
		B14 += B15 + K11 + T0;
		B15 = IntegerTools::RotL64(B15, 37) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 38) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 19) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 10) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 55) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 49) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 18) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 23) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 52) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 33) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 4) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 51) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 34) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 41) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 59) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 17) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 5) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 20) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 48) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 41) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 47) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 28) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 16) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 25) ^ B12;
		B1 += K16;
		B0 += B1 + K15;
		B1 = IntegerTools::RotL64(B1, 41) ^ B0;
		B3 += K1;
		B2 += B3 + K0;
		B3 = IntegerTools::RotL64(B3, 9) ^ B2;
		B5 += K3;
		B4 += B5 + K2;
		B5 = IntegerTools::RotL64(B5, 37) ^ B4;
		B7 += K5;
		B6 += B7 + K4;
		B7 = IntegerTools::RotL64(B7, 31) ^ B6;
		B9 += K7;
		B8 += B9 + K6;
		B9 = IntegerTools::RotL64(B9, 12) ^ B8;
		B11 += K9;
		B10 += B11 + K8;
		B11 = IntegerTools::RotL64(B11, 47) ^ B10;
		B13 += K11 + T0;
		B12 += B13 + K10;
		B13 = IntegerTools::RotL64(B13, 44) ^ B12;
		B15 += K13 + 15;
		B14 += B15 + K12 + T1;
		B15 = IntegerTools::RotL64(B15, 30) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 16) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 34) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 56) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 51) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 4) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 53) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 42) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 41) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 31) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 44) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 47) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 46) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 19) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 42) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 44) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 25) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 9) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 48) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 35) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 52) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 31) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 37) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 20) ^ B12;
		// rounds 64-71
		B1 += K0;
		B0 += B1 + K16;
		B1 = IntegerTools::RotL64(B1, 24) ^ B0;
		B3 += K2;
		B2 += B3 + K1;
		B3 = IntegerTools::RotL64(B3, 13) ^ B2;
		B5 += K4;
		B4 += B5 + K3;
		B5 = IntegerTools::RotL64(B5, 8) ^ B4;
		B7 += K6;
		B6 += B7 + K5;
		B7 = IntegerTools::RotL64(B7, 47) ^ B6;
		B9 += K8;
		B8 += B9 + K7;
		B9 = IntegerTools::RotL64(B9, 8) ^ B8;
		B11 += K10;
		B10 += B11 + K9;
		B11 = IntegerTools::RotL64(B11, 17) ^ B10;
		B13 += K12 + T1;
		B12 += B13 + K11;
		B13 = IntegerTools::RotL64(B13, 22) ^ B12;
		B15 += K14 + 16;
		B14 += B15 + K13 + T2;
		B15 = IntegerTools::RotL64(B15, 37) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 38) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 19) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 10) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 55) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 49) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 18) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 23) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 52) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 33) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 4) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 51) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 34) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 41) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 59) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 17) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 5) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 20) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 48) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 41) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 47) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 28) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 16) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 25) ^ B12;
		B1 += K1;
		B0 += B1 + K0;
		B1 = IntegerTools::RotL64(B1, 41) ^ B0;
		B3 += K3;
		B2 += B3 + K2;
		B3 = IntegerTools::RotL64(B3, 9) ^ B2;
		B5 += K5;
		B4 += B5 + K4;
		B5 = IntegerTools::RotL64(B5, 37) ^ B4;
		B7 += K7;
		B6 += B7 + K6;
		B7 = IntegerTools::RotL64(B7, 31) ^ B6;
		B9 += K9;
		B8 += B9 + K8;
		B9 = IntegerTools::RotL64(B9, 12) ^ B8;
		B11 += K11;
		B10 += B11 + K10;
		B11 = IntegerTools::RotL64(B11, 47) ^ B10;
		B13 += K13 + T2;
		B12 += B13 + K12;
		B13 = IntegerTools::RotL64(B13, 44) ^ B12;
		B15 += K15 + 17;
		B14 += B15 + K14 + T0;
		B15 = IntegerTools::RotL64(B15, 30) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 16) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 34) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 56) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 51) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 4) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 53) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 42) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 41) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 31) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 44) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 47) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 46) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 19) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 42) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 44) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 25) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 9) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 48) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 35) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 52) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 31) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 37) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 20) ^ B12;
		// rounds 72-79
		B1 += K2;
		B0 += B1 + K1;
		B1 = IntegerTools::RotL64(B1, 24) ^ B0;
		B3 += K4;
		B2 += B3 + K3;
		B3 = IntegerTools::RotL64(B3, 13) ^ B2;
		B5 += K6;
		B4 += B5 + K5;
		B5 = IntegerTools::RotL64(B5, 8) ^ B4;
		B7 += K8;
		B6 += B7 + K7;
		B7 = IntegerTools::RotL64(B7, 47) ^ B6;
		B9 += K10;
		B8 += B9 + K9;
		B9 = IntegerTools::RotL64(B9, 8) ^ B8;
		B11 += K12;
		B10 += B11 + K11;
		B11 = IntegerTools::RotL64(B11, 17) ^ B10;
		B13 += K14 + T0;
		B12 += B13 + K13;
		B13 = IntegerTools::RotL64(B13, 22) ^ B12;
		B15 += K16 + 18;
		B14 += B15 + K15 + T1;
		B15 = IntegerTools::RotL64(B15, 37) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 38) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 19) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 10) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 55) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 49) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 18) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 23) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 52) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 33) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 4) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 51) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 34) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 41) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 59) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 17) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 5) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 20) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 48) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 41) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 47) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 28) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 16) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 25) ^ B12;
		B1 += K3;
		B0 += B1 + K2;
		B1 = IntegerTools::RotL64(B1, 41) ^ B0;
		B3 += K5;
		B2 += B3 + K4;
		B3 = IntegerTools::RotL64(B3, 9) ^ B2;
		B5 += K7;
		B4 += B5 + K6;
		B5 = IntegerTools::RotL64(B5, 37) ^ B4;
		B7 += K9;
		B6 += B7 + K8;
		B7 = IntegerTools::RotL64(B7, 31) ^ B6;
		B9 += K11;
		B8 += B9 + K10;
		B9 = IntegerTools::RotL64(B9, 12) ^ B8;
		B11 += K13;
		B10 += B11 + K12;
		B11 = IntegerTools::RotL64(B11, 47) ^ B10;
		B13 += K15 + T1;
		B12 += B13 + K14;
		B13 = IntegerTools::RotL64(B13, 44) ^ B12;
		B15 += K0 + 19;
		B14 += B15 + K16 + T2;
		B15 = IntegerTools::RotL64(B15, 30) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 16) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 34) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 56) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 51) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 4) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 53) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 42) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 41) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 31) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 44) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 47) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 46) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 19) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 42) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 44) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 25) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 9) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 48) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 35) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 52) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 31) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 37) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 20) ^ B12;

		// rounds 80-87
		B1 += K4;
		B0 += B1 + K3;
		B1 = IntegerTools::RotL64(B1, 24) ^ B0;
		B3 += K6;
		B2 += B3 + K5;
		B3 = IntegerTools::RotL64(B3, 13) ^ B2;
		B5 += K8;
		B4 += B5 + K7;
		B5 = IntegerTools::RotL64(B5, 8) ^ B4;
		B7 += K10;
		B6 += B7 + K9;
		B7 = IntegerTools::RotL64(B7, 47) ^ B6;
		B9 += K12;
		B8 += B9 + K11;
		B9 = IntegerTools::RotL64(B9, 8) ^ B8;
		B11 += K14;
		B10 += B11 + K13;
		B11 = IntegerTools::RotL64(B11, 17) ^ B10;
		B13 += K16 + T2;
		B12 += B13 + K15;
		B13 = IntegerTools::RotL64(B13, 22) ^ B12;
		B15 += K1 + 20;
		B14 += B15 + K0 + T0;
		B15 = IntegerTools::RotL64(B15, 37) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 38) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 19) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 10) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 55) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 49) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 18) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 23) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 52) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 33) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 4) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 51) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 34) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 41) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 59) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 17) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 5) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 20) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 48) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 41) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 47) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 28) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 16) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 25) ^ B12;
		B1 += K5;
		B0 += B1 + K4;
		B1 = IntegerTools::RotL64(B1, 41) ^ B0;
		B3 += K7;
		B2 += B3 + K6;
		B3 = IntegerTools::RotL64(B3, 9) ^ B2;
		B5 += K9;
		B4 += B5 + K8;
		B5 = IntegerTools::RotL64(B5, 37) ^ B4;
		B7 += K11;
		B6 += B7 + K10;
		B7 = IntegerTools::RotL64(B7, 31) ^ B6;
		B9 += K13;
		B8 += B9 + K12;
		B9 = IntegerTools::RotL64(B9, 12) ^ B8;
		B11 += K15;
		B10 += B11 + K14;
		B11 = IntegerTools::RotL64(B11, 47) ^ B10;
		B13 += K0 + T0;
		B12 += B13 + K16;
		B13 = IntegerTools::RotL64(B13, 44) ^ B12;
		B15 += K2 + 21;
		B14 += B15 + K1 + T1;
		B15 = IntegerTools::RotL64(B15, 30) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 16) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 34) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 56) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 51) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 4) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 53) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 42) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 41) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 31) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 44) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 47) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 46) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 19) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 42) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 44) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 25) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 9) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 48) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 35) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 52) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 31) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 37) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 20) ^ B12;
		// rounds 88-95
		B1 += K6;
		B0 += B1 + K5;
		B1 = IntegerTools::RotL64(B1, 24) ^ B0;
		B3 += K8;
		B2 += B3 + K7;
		B3 = IntegerTools::RotL64(B3, 13) ^ B2;
		B5 += K10;
		B4 += B5 + K9;
		B5 = IntegerTools::RotL64(B5, 8) ^ B4;
		B7 += K12;
		B6 += B7 + K11;
		B7 = IntegerTools::RotL64(B7, 47) ^ B6;
		B9 += K14;
		B8 += B9 + K13;
		B9 = IntegerTools::RotL64(B9, 8) ^ B8;
		B11 += K16;
		B10 += B11 + K15;
		B11 = IntegerTools::RotL64(B11, 17) ^ B10;
		B13 += K1 + T1;
		B12 += B13 + K0;
		B13 = IntegerTools::RotL64(B13, 22) ^ B12;
		B15 += K3 + 22;
		B14 += B15 + K2 + T2;
		B15 = IntegerTools::RotL64(B15, 37) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 38) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 19) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 10) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 55) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 49) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 18) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 23) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 52) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 33) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 4) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 51) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 34) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 41) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 59) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 17) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 5) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 20) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 48) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 41) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 47) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 28) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 16) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 25) ^ B12;
		B1 += K7;
		B0 += B1 + K6;
		B1 = IntegerTools::RotL64(B1, 41) ^ B0;
		B3 += K9;
		B2 += B3 + K8;
		B3 = IntegerTools::RotL64(B3, 9) ^ B2;
		B5 += K11;
		B4 += B5 + K10;
		B5 = IntegerTools::RotL64(B5, 37) ^ B4;
		B7 += K13;
		B6 += B7 + K12;
		B7 = IntegerTools::RotL64(B7, 31) ^ B6;
		B9 += K15;
		B8 += B9 + K14;
		B9 = IntegerTools::RotL64(B9, 12) ^ B8;
		B11 += K0;
		B10 += B11 + K16;
		B11 = IntegerTools::RotL64(B11, 47) ^ B10;
		B13 += K2 + T2;
		B12 += B13 + K1;
		B13 = IntegerTools::RotL64(B13, 44) ^ B12;
		// mix
		B15 += K4 + 23;
		B14 += B15 + K3 + T0;
		B15 = IntegerTools::RotL64(B15, 30) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 16) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 34) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 56) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 51) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 4) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 53) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 42) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 41) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 31) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 44) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 47) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 46) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 19) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 42) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 44) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 25) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 9) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 48) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 35) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 52) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 31) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 37) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 20) ^ B12;
		// rounds 96-103
		B1 += K8;
		B0 += B1 + K7;
		B1 = IntegerTools::RotL64(B1, 24) ^ B0;
		B3 += K10;
		B2 += B3 + K9;
		B3 = IntegerTools::RotL64(B3, 13) ^ B2;
		B5 += K12;
		B4 += B5 + K11;
		B5 = IntegerTools::RotL64(B5, 8) ^ B4;
		B7 += K14;
		B6 += B7 + K13;
		B7 = IntegerTools::RotL64(B7, 47) ^ B6;
		B9 += K16;
		B8 += B9 + K15;
		B9 = IntegerTools::RotL64(B9, 8) ^ B8;
		B11 += K1;
		B10 += B11 + K0;
		B11 = IntegerTools::RotL64(B11, 17) ^ B10;
		B13 += K3 + T0;
		B12 += B13 + K2;
		B13 = IntegerTools::RotL64(B13, 22) ^ B12;
		B15 += K5 + 24;
		B14 += B15 + K4 + T1;
		B15 = IntegerTools::RotL64(B15, 37) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 38) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 19) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 10) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 55) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 49) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 18) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 23) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 52) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 33) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 4) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 51) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 34) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 41) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 59) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 17) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 5) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 20) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 48) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 41) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 47) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 28) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 16) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 25) ^ B12;
		B1 += K9;
		B0 += B1 + K8;
		B1 = IntegerTools::RotL64(B1, 41) ^ B0;
		B3 += K11;
		B2 += B3 + K10;
		B3 = IntegerTools::RotL64(B3, 9) ^ B2;
		B5 += K13;
		B4 += B5 + K12;
		B5 = IntegerTools::RotL64(B5, 37) ^ B4;
		B7 += K15;
		B6 += B7 + K14;
		B7 = IntegerTools::RotL64(B7, 31) ^ B6;
		B9 += K0;
		B8 += B9 + K16;
		B9 = IntegerTools::RotL64(B9, 12) ^ B8;
		B11 += K2;
		B10 += B11 + K1;
		B11 = IntegerTools::RotL64(B11, 47) ^ B10;
		B13 += K4 + T1;
		B12 += B13 + K3;
		B13 = IntegerTools::RotL64(B13, 44) ^ B12;
		B15 += K6 + 25;
		B14 += B15 + K5 + T2;
		B15 = IntegerTools::RotL64(B15, 30) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 16) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 34) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 56) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 51) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 4) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 53) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 42) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 41) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 31) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 44) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 47) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 46) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 19) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 42) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 44) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 25) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 9) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 48) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 35) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 52) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 31) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 37) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 20) ^ B12;
		// rounds 103-111
		B1 += K10;
		B0 += B1 + K9;
		B1 = IntegerTools::RotL64(B1, 24) ^ B0;
		B3 += K12;
		B2 += B3 + K11;
		B3 = IntegerTools::RotL64(B3, 13) ^ B2;
		B5 += K14;
		B4 += B5 + K13;
		B5 = IntegerTools::RotL64(B5, 8) ^ B4;
		B7 += K16;
		B6 += B7 + K15;
		B7 = IntegerTools::RotL64(B7, 47) ^ B6;
		B9 += K1;
		B8 += B9 + K0;
		B9 = IntegerTools::RotL64(B9, 8) ^ B8;
		B11 += K3;
		B10 += B11 + K2;
		B11 = IntegerTools::RotL64(B11, 17) ^ B10;
		B13 += K5 + T2;
		B12 += B13 + K4;
		B13 = IntegerTools::RotL64(B13, 22) ^ B12;
		B15 += K7 + 26;
		B14 += B15 + K6 + T0;
		B15 = IntegerTools::RotL64(B15, 37) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 38) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 19) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 10) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 55) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 49) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 18) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 23) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 52) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 33) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 4) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 51) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 34) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 41) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 59) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 17) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 5) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 20) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 48) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 41) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 47) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 28) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 16) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 25) ^ B12;
		B1 += K11;
		B0 += B1 + K10;
		B1 = IntegerTools::RotL64(B1, 41) ^ B0;
		B3 += K13;
		B2 += B3 + K12;
		B3 = IntegerTools::RotL64(B3, 9) ^ B2;
		B5 += K15;
		B4 += B5 + K14;
		B5 = IntegerTools::RotL64(B5, 37) ^ B4;
		B7 += K0;
		B6 += B7 + K16;
		B7 = IntegerTools::RotL64(B7, 31) ^ B6;
		B9 += K2;
		B8 += B9 + K1;
		B9 = IntegerTools::RotL64(B9, 12) ^ B8;
		B11 += K4;
		B10 += B11 + K3;
		B11 = IntegerTools::RotL64(B11, 47) ^ B10;
		B13 += K6 + T0;
		B12 += B13 + K5;
		B13 = IntegerTools::RotL64(B13, 44) ^ B12;
		B15 += K8 + 27;
		B14 += B15 + K7 + T1;
		B15 = IntegerTools::RotL64(B15, 30) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 16) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 34) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 56) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 51) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 4) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 53) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 42) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 41) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 31) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 44) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 47) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 46) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 19) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 42) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 44) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 25) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 9) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 48) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 35) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 52) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 31) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 37) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 20) ^ B12;
		// rounds 112-119
		B1 += K12;
		B0 += B1 + K11;
		B1 = IntegerTools::RotL64(B1, 24) ^ B0;
		B3 += K14;
		B2 += B3 + K13;
		B3 = IntegerTools::RotL64(B3, 13) ^ B2;
		B5 += K16;
		B4 += B5 + K15;
		B5 = IntegerTools::RotL64(B5, 8) ^ B4;
		B7 += K1;
		B6 += B7 + K0;
		B7 = IntegerTools::RotL64(B7, 47) ^ B6;
		B9 += K3;
		B8 += B9 + K2;
		B9 = IntegerTools::RotL64(B9, 8) ^ B8;
		B11 += K5;
		B10 += B11 + K4;
		B11 = IntegerTools::RotL64(B11, 17) ^ B10;
		B13 += K7 + T1;
		B12 += B13 + K6;
		B13 = IntegerTools::RotL64(B13, 22) ^ B12;
		B15 += K9 + 28;
		B14 += B15 + K8 + T2;
		B15 = IntegerTools::RotL64(B15, 37) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 38) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 19) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 10) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 55) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 49) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 18) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 23) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 52) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 33) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 4) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 51) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 13) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 34) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 41) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 59) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 17) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 5) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 20) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 48) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 41) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 47) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 28) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 16) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 25) ^ B12;
		B1 += K13;
		B0 += B1 + K12;
		B1 = IntegerTools::RotL64(B1, 41) ^ B0;
		B3 += K15;
		B2 += B3 + K14;
		B3 = IntegerTools::RotL64(B3, 9) ^ B2;
		B5 += K0;
		B4 += B5 + K16;
		B5 = IntegerTools::RotL64(B5, 37) ^ B4;
		B7 += K2;
		B6 += B7 + K1;
		B7 = IntegerTools::RotL64(B7, 31) ^ B6;
		B9 += K4;
		B8 += B9 + K3;
		B9 = IntegerTools::RotL64(B9, 12) ^ B8;
		B11 += K6;
		B10 += B11 + K5;
		B11 = IntegerTools::RotL64(B11, 47) ^ B10;
		B13 += K8 + T2;
		B12 += B13 + K7;
		B13 = IntegerTools::RotL64(B13, 44) ^ B12;
		B15 += K10 + 29;
		B14 += B15 + K9 + T0;
		B15 = IntegerTools::RotL64(B15, 30) ^ B14;
		B0 += B9;
		B9 = IntegerTools::RotL64(B9, 16) ^ B0;
		B2 += B13;
		B13 = IntegerTools::RotL64(B13, 34) ^ B2;
		B6 += B11;
		B11 = IntegerTools::RotL64(B11, 56) ^ B6;
		B4 += B15;
		B15 = IntegerTools::RotL64(B15, 51) ^ B4;
		B10 += B7;
		B7 = IntegerTools::RotL64(B7, 4) ^ B10;
		B12 += B3;
		B3 = IntegerTools::RotL64(B3, 53) ^ B12;
		B14 += B5;
		B5 = IntegerTools::RotL64(B5, 42) ^ B14;
		B8 += B1;
		B1 = IntegerTools::RotL64(B1, 41) ^ B8;
		B0 += B7;
		B7 = IntegerTools::RotL64(B7, 31) ^ B0;
		B2 += B5;
		B5 = IntegerTools::RotL64(B5, 44) ^ B2;
		B4 += B3;
		B3 = IntegerTools::RotL64(B3, 47) ^ B4;
		B6 += B1;
		B1 = IntegerTools::RotL64(B1, 46) ^ B6;
		B12 += B15;
		B15 = IntegerTools::RotL64(B15, 19) ^ B12;
		B14 += B13;
		B13 = IntegerTools::RotL64(B13, 42) ^ B14;
		B8 += B11;
		B11 = IntegerTools::RotL64(B11, 44) ^ B8;
		B10 += B9;
		B9 = IntegerTools::RotL64(B9, 25) ^ B10;
		B0 += B15;
		B15 = IntegerTools::RotL64(B15, 9) ^ B0;
		B2 += B11;
		B11 = IntegerTools::RotL64(B11, 48) ^ B2;
		B6 += B13;
		B13 = IntegerTools::RotL64(B13, 35) ^ B6;
		B4 += B9;
		B9 = IntegerTools::RotL64(B9, 52) ^ B4;
		B14 += B1;
		B1 = IntegerTools::RotL64(B1, 23) ^ B14;
		B8 += B5;
		B5 = IntegerTools::RotL64(B5, 31) ^ B8;
		B10 += B3;
		B3 = IntegerTools::RotL64(B3, 37) ^ B10;
		B12 += B7;
		B7 = IntegerTools::RotL64(B7, 20) ^ B12;

		State[0] = B0 + K3;
		State[1] = B1 + K4;
		State[2] = B2 + K5;
		State[3] = B3 + K6;
		State[4] = B4 + K7;
		State[5] = B5 + K8;
		State[6] = B6 + K9;
		State[7] = B7 + K10;
		State[8] = B8 + K11;
		State[9] = B9 + K12;
		State[10] = B10 + K13;
		State[11] = B11 + K14;
		State[12] = B12 + K15;
		State[13] = B13 + K16 + T2;
		State[14] = B14 + K0 + T0;
		State[15] = B15 + K1 + 30;
	}
};

NAMESPACE_DIGESTEND
#endif
