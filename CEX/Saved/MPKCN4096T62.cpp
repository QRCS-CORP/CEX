#include "MPKCN4096T62.h"
#include "CSX256.h"
#include "IntegerTools.h"
#include "Keccak.h"
#include "MPKCUtils.h"

NAMESPACE_MCELIECE

using Cipher::Stream::CSX256;
using Digest::Keccak;
using Utility::IntegerTools;
using Utility::MemoryTools;

const std::vector<std::vector<ulong>> MPKCN4096T62::ButterflyConsts =
{ 
	{
		{
			0xF00F0FF0F00F0FF0ULL, 0xF0F00F0F0F0FF0F0ULL, 0x0FF00FF00FF00FF0ULL, 0xAA5555AAAA5555AAULL,
			0xF00F0FF0F00F0FF0ULL, 0x33CCCC33CC3333CCULL, 0xFFFF0000FFFF0000ULL, 0xCC33CC3333CC33CCULL,
			0x33CC33CC33CC33CCULL, 0x5A5A5A5A5A5A5A5AULL, 0xFF00FF00FF00FF00ULL, 0xF00F0FF0F00F0FF0ULL,
		},
		{
			0x3C3C3C3C3C3C3C3CULL, 0xF0F0F0F0F0F0F0F0ULL, 0x5555AAAA5555AAAAULL, 0xCC3333CCCC3333CCULL,
			0xC33CC33CC33CC33CULL, 0x55555555AAAAAAAAULL, 0x33333333CCCCCCCCULL, 0x00FF00FFFF00FF00ULL,
			0xF0F0F0F0F0F0F0F0ULL, 0x0000000000000000ULL, 0x0000FFFFFFFF0000ULL, 0xF0F00F0F0F0FF0F0ULL,
		},
		{
			0x3C3C3C3C3C3C3C3CULL, 0x0F0F0F0F0F0F0F0FULL, 0xAAAA5555AAAA5555ULL, 0xCC3333CCCC3333CCULL,
			0xC33CC33CC33CC33CULL, 0x55555555AAAAAAAAULL, 0x33333333CCCCCCCCULL, 0xFF00FF0000FF00FFULL,
			0x0F0F0F0F0F0F0F0FULL, 0x0000000000000000ULL, 0x0000FFFFFFFF0000ULL, 0xF0F00F0F0F0FF0F0ULL,
		},
		{
			0xAA55AA5555AA55AAULL, 0xCC33CC3333CC33CCULL, 0x33CCCC33CC3333CCULL, 0x55555555AAAAAAAAULL,
			0xFF0000FF00FFFF00ULL, 0x3CC33CC3C33CC33CULL, 0x5555AAAA5555AAAAULL, 0x0FF00FF00FF00FF0ULL,
			0xCCCC33333333CCCCULL, 0xF0F0F0F0F0F0F0F0ULL, 0x00FFFF0000FFFF00ULL, 0xC33CC33CC33CC33CULL,
		},
		{
			0x55AA55AAAA55AA55ULL, 0xCC33CC3333CC33CCULL, 0xCC3333CC33CCCC33ULL, 0x55555555AAAAAAAAULL,
			0xFF0000FF00FFFF00ULL, 0xC33CC33C3CC33CC3ULL, 0xAAAA5555AAAA5555ULL, 0xF00FF00FF00FF00FULL,
			0x3333CCCCCCCC3333ULL, 0x0F0F0F0F0F0F0F0FULL, 0xFF0000FFFF0000FFULL, 0xC33CC33CC33CC33CULL,
		},
		{
			0xAA55AA5555AA55AAULL, 0x33CC33CCCC33CC33ULL, 0xCC3333CC33CCCC33ULL, 0x55555555AAAAAAAAULL,
			0x00FFFF00FF0000FFULL, 0x3CC33CC3C33CC33CULL, 0x5555AAAA5555AAAAULL, 0x0FF00FF00FF00FF0ULL,
			0x3333CCCCCCCC3333ULL, 0xF0F0F0F0F0F0F0F0ULL, 0x00FFFF0000FFFF00ULL, 0xC33CC33CC33CC33CULL,
		},
		{
			0x55AA55AAAA55AA55ULL, 0x33CC33CCCC33CC33ULL, 0x33CCCC33CC3333CCULL, 0x55555555AAAAAAAAULL,
			0x00FFFF00FF0000FFULL, 0xC33CC33C3CC33CC3ULL, 0xAAAA5555AAAA5555ULL, 0xF00FF00FF00FF00FULL,
			0xCCCC33333333CCCCULL, 0x0F0F0F0F0F0F0F0FULL, 0xFF0000FFFF0000FFULL, 0xC33CC33CC33CC33CULL,
		},
		{
			0x6699669999669966ULL, 0x33CCCC33CC3333CCULL, 0xA5A5A5A55A5A5A5AULL, 0x3C3CC3C3C3C33C3CULL,
			0xF00FF00F0FF00FF0ULL, 0x55AA55AA55AA55AAULL, 0x3C3CC3C3C3C33C3CULL, 0x0F0F0F0FF0F0F0F0ULL,
			0x55AA55AA55AA55AAULL, 0x33CCCC33CC3333CCULL, 0xF0F0F0F0F0F0F0F0ULL, 0xA55A5AA55AA5A55AULL,
		},
		{
			0x9966996666996699ULL, 0x33CCCC33CC3333CCULL, 0xA5A5A5A55A5A5A5AULL, 0x3C3CC3C3C3C33C3CULL,
			0x0FF00FF0F00FF00FULL, 0xAA55AA55AA55AA55ULL, 0x3C3CC3C3C3C33C3CULL, 0xF0F0F0F00F0F0F0FULL,
			0xAA55AA55AA55AA55ULL, 0xCC3333CC33CCCC33ULL, 0x0F0F0F0F0F0F0F0FULL, 0xA55A5AA55AA5A55AULL,
		},
		{
			0x6699669999669966ULL, 0x33CCCC33CC3333CCULL, 0x5A5A5A5AA5A5A5A5ULL, 0xC3C33C3C3C3CC3C3ULL,
			0x0FF00FF0F00FF00FULL, 0xAA55AA55AA55AA55ULL, 0xC3C33C3C3C3CC3C3ULL, 0x0F0F0F0FF0F0F0F0ULL,
			0xAA55AA55AA55AA55ULL, 0x33CCCC33CC3333CCULL, 0xF0F0F0F0F0F0F0F0ULL, 0xA55A5AA55AA5A55AULL,
		},
		{
			0x9966996666996699ULL, 0x33CCCC33CC3333CCULL, 0x5A5A5A5AA5A5A5A5ULL, 0xC3C33C3C3C3CC3C3ULL,
			0xF00FF00F0FF00FF0ULL, 0x55AA55AA55AA55AAULL, 0xC3C33C3C3C3CC3C3ULL, 0xF0F0F0F00F0F0F0FULL,
			0x55AA55AA55AA55AAULL, 0xCC3333CC33CCCC33ULL, 0x0F0F0F0F0F0F0F0FULL, 0xA55A5AA55AA5A55AULL,
		},
		{
			0x6699669999669966ULL, 0xCC3333CC33CCCC33ULL, 0x5A5A5A5AA5A5A5A5ULL, 0x3C3CC3C3C3C33C3CULL,
			0x0FF00FF0F00FF00FULL, 0x55AA55AA55AA55AAULL, 0x3C3CC3C3C3C33C3CULL, 0x0F0F0F0FF0F0F0F0ULL,
			0x55AA55AA55AA55AAULL, 0x33CCCC33CC3333CCULL, 0xF0F0F0F0F0F0F0F0ULL, 0xA55A5AA55AA5A55AULL,
		},
		{
			0x9966996666996699ULL, 0xCC3333CC33CCCC33ULL, 0x5A5A5A5AA5A5A5A5ULL, 0x3C3CC3C3C3C33C3CULL,
			0xF00FF00F0FF00FF0ULL, 0xAA55AA55AA55AA55ULL, 0x3C3CC3C3C3C33C3CULL, 0xF0F0F0F00F0F0F0FULL,
			0xAA55AA55AA55AA55ULL, 0xCC3333CC33CCCC33ULL, 0x0F0F0F0F0F0F0F0FULL, 0xA55A5AA55AA5A55AULL,
		},
		{
			0x6699669999669966ULL, 0xCC3333CC33CCCC33ULL, 0xA5A5A5A55A5A5A5AULL, 0xC3C33C3C3C3CC3C3ULL,
			0xF00FF00F0FF00FF0ULL, 0xAA55AA55AA55AA55ULL, 0xC3C33C3C3C3CC3C3ULL, 0x0F0F0F0FF0F0F0F0ULL,
			0xAA55AA55AA55AA55ULL, 0x33CCCC33CC3333CCULL, 0xF0F0F0F0F0F0F0F0ULL, 0xA55A5AA55AA5A55AULL,
		},
		{
			0x9966996666996699ULL, 0xCC3333CC33CCCC33ULL, 0xA5A5A5A55A5A5A5AULL, 0xC3C33C3C3C3CC3C3ULL,
			0x0FF00FF0F00FF00FULL, 0x55AA55AA55AA55AAULL, 0xC3C33C3C3C3CC3C3ULL, 0xF0F0F0F00F0F0F0FULL,
			0x55AA55AA55AA55AAULL, 0xCC3333CC33CCCC33ULL, 0x0F0F0F0F0F0F0F0FULL, 0xA55A5AA55AA5A55AULL,
		},
		{
			0x9669699696696996ULL, 0x6996699669966996ULL, 0x6996699669966996ULL, 0x00FFFF0000FFFF00ULL,
			0xFF00FF00FF00FF00ULL, 0xF00FF00F0FF00FF0ULL, 0xF0F00F0F0F0FF0F0ULL, 0xC33C3CC33CC3C33CULL,
			0xC33C3CC33CC3C33CULL, 0xA55A5AA55AA5A55AULL, 0xC33C3CC33CC3C33CULL, 0x3CC3C33C3CC3C33CULL,
		},
		{
			0x9669699696696996ULL, 0x6996699669966996ULL, 0x6996699669966996ULL, 0x00FFFF0000FFFF00ULL,
			0x00FF00FF00FF00FFULL, 0x0FF00FF0F00FF00FULL, 0x0F0FF0F0F0F00F0FULL, 0x3CC3C33CC33C3CC3ULL,
			0x3CC3C33CC33C3CC3ULL, 0xA55A5AA55AA5A55AULL, 0xC33C3CC33CC3C33CULL, 0x3CC3C33C3CC3C33CULL,
		},
		{
			0x9669699696696996ULL, 0x6996699669966996ULL, 0x6996699669966996ULL, 0xFF0000FFFF0000FFULL,
			0x00FF00FF00FF00FFULL, 0x0FF00FF0F00FF00FULL, 0x0F0FF0F0F0F00F0FULL, 0xC33C3CC33CC3C33CULL,
			0xC33C3CC33CC3C33CULL, 0xA55A5AA55AA5A55AULL, 0xC33C3CC33CC3C33CULL, 0x3CC3C33C3CC3C33CULL,
		},
		{
			0x9669699696696996ULL, 0x6996699669966996ULL, 0x6996699669966996ULL, 0xFF0000FFFF0000FFULL,
			0xFF00FF00FF00FF00ULL, 0xF00FF00F0FF00FF0ULL, 0xF0F00F0F0F0FF0F0ULL, 0x3CC3C33CC33C3CC3ULL,
			0x3CC3C33CC33C3CC3ULL, 0xA55A5AA55AA5A55AULL, 0xC33C3CC33CC3C33CULL, 0x3CC3C33C3CC3C33CULL,
		},
		{
			0x9669699696696996ULL, 0x6996699669966996ULL, 0x9669966996699669ULL, 0xFF0000FFFF0000FFULL,
			0x00FF00FF00FF00FFULL, 0xF00FF00F0FF00FF0ULL, 0xF0F00F0F0F0FF0F0ULL, 0xC33C3CC33CC3C33CULL,
			0xC33C3CC33CC3C33CULL, 0xA55A5AA55AA5A55AULL, 0xC33C3CC33CC3C33CULL, 0x3CC3C33C3CC3C33CULL,
		},
		{
			0x9669699696696996ULL, 0x6996699669966996ULL, 0x9669966996699669ULL, 0xFF0000FFFF0000FFULL,
			0xFF00FF00FF00FF00ULL, 0x0FF00FF0F00FF00FULL, 0x0F0FF0F0F0F00F0FULL, 0x3CC3C33CC33C3CC3ULL,
			0x3CC3C33CC33C3CC3ULL, 0xA55A5AA55AA5A55AULL, 0xC33C3CC33CC3C33CULL, 0x3CC3C33C3CC3C33CULL,
		},
		{
			0x9669699696696996ULL, 0x6996699669966996ULL, 0x9669966996699669ULL, 0x00FFFF0000FFFF00ULL,
			0xFF00FF00FF00FF00ULL, 0x0FF00FF0F00FF00FULL, 0x0F0FF0F0F0F00F0FULL, 0xC33C3CC33CC3C33CULL,
			0xC33C3CC33CC3C33CULL, 0xA55A5AA55AA5A55AULL, 0xC33C3CC33CC3C33CULL, 0x3CC3C33C3CC3C33CULL,
		},
		{
			0x9669699696696996ULL, 0x6996699669966996ULL, 0x9669966996699669ULL, 0x00FFFF0000FFFF00ULL,
			0x00FF00FF00FF00FFULL, 0xF00FF00F0FF00FF0ULL, 0xF0F00F0F0F0FF0F0ULL, 0x3CC3C33CC33C3CC3ULL,
			0x3CC3C33CC33C3CC3ULL, 0xA55A5AA55AA5A55AULL, 0xC33C3CC33CC3C33CULL, 0x3CC3C33C3CC3C33CULL,
		},
		{
			0x9669699696696996ULL, 0x9669966996699669ULL, 0x9669966996699669ULL, 0x00FFFF0000FFFF00ULL,
			0xFF00FF00FF00FF00ULL, 0xF00FF00F0FF00FF0ULL, 0xF0F00F0F0F0FF0F0ULL, 0xC33C3CC33CC3C33CULL,
			0xC33C3CC33CC3C33CULL, 0xA55A5AA55AA5A55AULL, 0xC33C3CC33CC3C33CULL, 0x3CC3C33C3CC3C33CULL,
		},
		{
			0x9669699696696996ULL, 0x9669966996699669ULL, 0x9669966996699669ULL, 0x00FFFF0000FFFF00ULL,
			0x00FF00FF00FF00FFULL, 0x0FF00FF0F00FF00FULL, 0x0F0FF0F0F0F00F0FULL, 0x3CC3C33CC33C3CC3ULL,
			0x3CC3C33CC33C3CC3ULL, 0xA55A5AA55AA5A55AULL, 0xC33C3CC33CC3C33CULL, 0x3CC3C33C3CC3C33CULL,
		},
		{
			0x9669699696696996ULL, 0x9669966996699669ULL, 0x9669966996699669ULL, 0xFF0000FFFF0000FFULL,
			0x00FF00FF00FF00FFULL, 0x0FF00FF0F00FF00FULL, 0x0F0FF0F0F0F00F0FULL, 0xC33C3CC33CC3C33CULL,
			0xC33C3CC33CC3C33CULL, 0xA55A5AA55AA5A55AULL, 0xC33C3CC33CC3C33CULL, 0x3CC3C33C3CC3C33CULL,
		},
		{
			0x9669699696696996ULL, 0x9669966996699669ULL, 0x9669966996699669ULL, 0xFF0000FFFF0000FFULL,
			0xFF00FF00FF00FF00ULL, 0xF00FF00F0FF00FF0ULL, 0xF0F00F0F0F0FF0F0ULL, 0x3CC3C33CC33C3CC3ULL,
			0x3CC3C33CC33C3CC3ULL, 0xA55A5AA55AA5A55AULL, 0xC33C3CC33CC3C33CULL, 0x3CC3C33C3CC3C33CULL,
		},
		{
			0x9669699696696996ULL, 0x9669966996699669ULL, 0x6996699669966996ULL, 0xFF0000FFFF0000FFULL,
			0x00FF00FF00FF00FFULL, 0xF00FF00F0FF00FF0ULL, 0xF0F00F0F0F0FF0F0ULL, 0xC33C3CC33CC3C33CULL,
			0xC33C3CC33CC3C33CULL, 0xA55A5AA55AA5A55AULL, 0xC33C3CC33CC3C33CULL, 0x3CC3C33C3CC3C33CULL,
		},
		{
			0x9669699696696996ULL, 0x9669966996699669ULL, 0x6996699669966996ULL, 0xFF0000FFFF0000FFULL,
			0xFF00FF00FF00FF00ULL, 0x0FF00FF0F00FF00FULL, 0x0F0FF0F0F0F00F0FULL, 0x3CC3C33CC33C3CC3ULL,
			0x3CC3C33CC33C3CC3ULL, 0xA55A5AA55AA5A55AULL, 0xC33C3CC33CC3C33CULL, 0x3CC3C33C3CC3C33CULL,
		},
		{
			0x9669699696696996ULL, 0x9669966996699669ULL, 0x6996699669966996ULL, 0x00FFFF0000FFFF00ULL,
			0xFF00FF00FF00FF00ULL, 0x0FF00FF0F00FF00FULL, 0x0F0FF0F0F0F00F0FULL, 0xC33C3CC33CC3C33CULL,
			0xC33C3CC33CC3C33CULL, 0xA55A5AA55AA5A55AULL, 0xC33C3CC33CC3C33CULL, 0x3CC3C33C3CC3C33CULL,
		},
		{
			0x9669699696696996ULL, 0x9669966996699669ULL, 0x6996699669966996ULL, 0x00FFFF0000FFFF00ULL,
			0x00FF00FF00FF00FFULL, 0xF00FF00F0FF00FF0ULL, 0xF0F00F0F0F0FF0F0ULL, 0x3CC3C33CC33C3CC3ULL,
			0x3CC3C33CC33C3CC3ULL, 0xA55A5AA55AA5A55AULL, 0xC33C3CC33CC3C33CULL, 0x3CC3C33C3CC3C33CULL,
		},
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL,
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL,
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL,
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL,
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL,
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL,
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL,
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL,
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL,
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL,
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL,
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL,
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL,
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL,
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL,
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL,
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL,
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL,
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL,
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL,
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL,
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL,
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL,
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL,
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		}
	}
};

const std::vector<std::vector<ulong>> MPKCN4096T62::GfPoints =
{
	{
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL,
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL,
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL,
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL,
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL,
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL,
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL,
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL,
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL,
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL,
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL,
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL,
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL,
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL,
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL,
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL,
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL,
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL,
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL,
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL,
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL,
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL,
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL,
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL,
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL,
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL,
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL,
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL,
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL,
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL,
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL,
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL,
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL,
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL,
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL,
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL,
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL,
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL,
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL,
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL,
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL,
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL,
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL,
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL,
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL,
			0x0000000000000000ULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL,
			0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL,
			0xFFFFFFFFFFFFFFFFULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		},
		{
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL,
			0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFF0000FFFF0000ULL,
			0xFF00FF00FF00FF00ULL, 0xF0F0F0F0F0F0F0F0ULL, 0xCCCCCCCCCCCCCCCCULL, 0xAAAAAAAAAAAAAAAAULL,
		}
	}
};

const std::vector<std::vector<std::vector<ulong>>> MPKCN4096T62::RadixTrScalar =
{
	{
		{
			{
				{
					0xF3CFC030FC30F003ULL, 0x3FCF0F003C00C00CULL, 0x30033CC300C0C03CULL, 0xCCFF0F3C0F30F0C0ULL,
					0x0300C03FF303C3F0ULL, 0x3FFF3C0FF0CCCCC0ULL, 0xF3FFF0C00F3C3CC0ULL, 0x3003333FFFC3C000ULL,
					0x0FF30FFFC3FFF300ULL, 0xFFC0F300F0F0CC00ULL, 0xC0CFF3FCCC3CFC00ULL, 0xFC3C03F0F330C000ULL,
				},
				{
					0x000C03C0C3C0330CULL, 0xF330CFFCC00F33C0ULL, 0xCCF330F00F3C0333ULL, 0xFF03FFF3FF0CF0C0ULL,
					0x3CC3FCF00FCC303CULL, 0x0F000C0FC30303F3ULL, 0xCF0FC3FF333CCF3CULL, 0x003F3FC3C0FF333FULL,
					0x3CC3F0F3CF0FF00FULL, 0xF3F33CC03FC30CC0ULL, 0x3CC330CFC333F33FULL, 0x3CC0303FF3C3FFFCULL,
				}
			}
		},
		{
			{
				{
					0x000F00000000F00FULL, 0x00000F00F00000F0ULL, 0x0F00000F00000F00ULL, 0xF00F00F00F000000ULL,
					0x00F00000000000F0ULL, 0x0000000F00000000ULL, 0xF00000000F00F000ULL, 0x00F00F00000F0000ULL,
					0x0000F00000F00F00ULL, 0x000F00F00F00F000ULL, 0x00F00F0000000000ULL, 0x0000000000F00000ULL,
				},
				{
					0x0F00F00F00000000ULL, 0xF00000000000F000ULL, 0x00000F00000000F0ULL, 0x0F00F00000F00000ULL,
					0x000F00000F00F00FULL, 0x00F00F00F00F0000ULL, 0x0F00F00000000000ULL, 0x000000000F000000ULL,
					0x00F00000000F00F0ULL, 0x0000F00F00000F00ULL, 0xF00000F00000F00FULL, 0x00000F00F00F00F0ULL,
				}
			}
		},
		{
			{
				{
					0x0000FF00FF0000FFULL, 0x0000FF000000FF00ULL, 0xFF0000FF00FF0000ULL, 0xFFFF0000FF000000ULL,
					0x00FF00FF00FF0000ULL, 0x0000FFFFFF000000ULL, 0x00FFFF00FF000000ULL, 0xFFFFFF0000FF0000ULL,
					0xFFFF00FFFF00FF00ULL, 0x0000FF0000000000ULL, 0xFFFFFF00FF000000ULL, 0x00FF000000000000ULL,
				},
				{
					0xFF00FFFFFF000000ULL, 0xFF0000FFFF000000ULL, 0xFFFF00FFFF000000ULL, 0xFF00FFFFFFFFFF00ULL,
					0x00000000FF00FF00ULL, 0xFFFFFFFF00FF0000ULL, 0x00FFFFFF00FF0000ULL, 0xFFFF00FFFF00FFFFULL,
					0xFFFF0000FFFFFFFFULL, 0xFF00000000FF0000ULL, 0x000000FF00FF00FFULL, 0x00FF00FF00FFFF00ULL,
				}
			}
		},
		{
			{
				{
					0x000000000000FFFFULL, 0x00000000FFFF0000ULL, 0x0000000000000000ULL, 0xFFFF000000000000ULL,
					0x00000000FFFF0000ULL, 0x0000FFFF00000000ULL, 0x0000000000000000ULL, 0x00000000FFFF0000ULL,
					0x0000FFFF00000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
				},
				{
					0x0000000000000000ULL, 0xFFFF000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
					0xFFFF00000000FFFFULL, 0x0000000000000000ULL, 0x0000FFFF00000000ULL, 0xFFFF00000000FFFFULL,
					0x00000000FFFF0000ULL, 0x0000000000000000ULL, 0xFFFF00000000FFFFULL, 0x00000000FFFF0000ULL,
				}
			}
		},
		{
			{
				{
					0x00000000FFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFFFFFF00000000ULL, 0x0000000000000000ULL,
					0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
					0xFFFFFFFF00000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
				},
				{
					0x0000000000000000ULL, 0x0000000000000000ULL, 0x00000000FFFFFFFFULL, 0xFFFFFFFF00000000ULL,
					0xFFFFFFFF00000000ULL, 0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0xFFFFFFFFFFFFFFFFULL,
					0xFFFFFFFF00000000ULL, 0x0000000000000000ULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFF00000000ULL,
				}
			}
		}
	}
};

//~~~Public Functions~~~//

bool MPKCN4096T62::Decapsulate(const std::vector<byte> &PrivateKey, const std::vector<byte> &CipherText, std::vector<byte> &SharedSecret)
{
	std::vector<byte> tmpk(32);
	std::vector<byte> tmpn(8);
	std::vector<byte> tmps(40);
	std::vector<byte> e(1ULL << (MPKCN4096T62::MPKC_M - 3));
	byte ret;

	ret = DecryptE(e, PrivateKey, CipherText);

	XOF(e, 0, e.size(), tmps, 0, tmps.size(), Keccak::KECCAK256_RATE_SIZE);
	MemoryTools::Copy(tmps, 0, tmpk, 0, tmpk.size());
	MemoryTools::Copy(tmps, tmpk.size(), tmpn, 0, tmpn.size());

	CSX256 cpr(Enumeration::StreamAuthenticators::Poly1305);
	Cipher::SymmetricKey kp(tmpk, tmpn);
	cpr.Initialize(false, kp);

	try
	{
		cpr.Transform(CipherText, MPKC_SYNDBYTES, SharedSecret, 0, SharedSecret.size());
	}
	catch (Exception::CryptoAuthenticationFailure)
	{
		ret = 1;
	}

	return (ret == 0);
}

void MPKCN4096T62::Encapsulate(const std::vector<byte> &PublicKey, std::vector<byte> &CipherText, std::vector<byte> &SharedSecret, std::unique_ptr<IPrng> &Rng)
{
	std::vector<byte> tmpk(32);
	std::vector<byte> tmpn(8);
	std::vector<byte> tmps(40);
	std::vector<byte> e(1ULL << (MPKCN4096T62::MPKC_M - 3));

	EncryptE(CipherText, e, PublicKey, Rng);
	Rng->Generate(SharedSecret);

	XOF(e, 0, e.size(), tmps, 0, tmps.size(), Keccak::KECCAK256_RATE_SIZE);
	MemoryTools::Copy(tmps, 0, tmpk, 0, tmpk.size());
	MemoryTools::Copy(tmps, tmpk.size(), tmpn, 0, tmpn.size());

	CSX256 cpr(Enumeration::StreamAuthenticators::Poly1305);
	Cipher::SymmetricKey kp(tmpk, tmpn);
	cpr.Initialize(true, kp);
	cpr.Transform(SharedSecret, 0, CipherText, MPKC_SYNDBYTES, SharedSecret.size());
}

bool MPKCN4096T62::Generate(std::vector<byte> &PublicKey, std::vector<byte> &PrivateKey, std::unique_ptr<IPrng> &Rng)
{
	size_t i;

	for (i = 0; i < KEYGEN_RETRIES_MAX; ++i)
	{
		SkGen(PrivateKey, Rng);

		if (PkGen(PublicKey, PrivateKey) == true) 
		{
			break;
		}
	}

	return (i < KEYGEN_RETRIES_MAX);
}

//~~~Private Functions~~~//

void MPKCN4096T62::XOF(const std::vector<byte> &Input, size_t InOffset, size_t InLength, std::vector<byte> &Output, size_t OutOffset, size_t OutLength, size_t Rate)
{
	Keccak::XOFR24P1600(Input, InOffset, InLength, Output, OutOffset, OutLength, Rate);
}

//~~~Decrypt~~~//

void MPKCN4096T62::BerlekampMassey(std::array<ulong, MPKC_M> &Output, std::array<std::array<ulong, MPKC_M>, 2> &Input)
{
	ushort b;
	ushort bInv;
	ushort d;
	ushort L;
	ushort mask16b;
	ushort N;
	ushort r;
	ulong maskleq;
	ulong masknz;
	std::array<ulong, MPKC_M> tmpb;
	std::array<ulong, MPKC_M> prod;
	std::array<ulong, MPKC_M> inp;
	std::array<ulong, MPKC_M> rvec;
	std::array<ulong, MPKC_M> tmpc;

	Output[0] = 1;
	MemoryTools::Copy(Output, 0, tmpb, 0, MPKC_M * sizeof(ulong));
	Output[0] <<= 63;
	tmpb[0] <<= 62;
	b = 1;
	L = 0;

	for (N = 0; N < MPKC_T * 2; ++N)
	{
		// computing d
		if (N < 64)
		{
			inp[0] = Input[0][0] << (63 - N);
			inp[1] = Input[0][1] << (63 - N);
			inp[2] = Input[0][2] << (63 - N);
			inp[3] = Input[0][3] << (63 - N);
			inp[4] = Input[0][4] << (63 - N);
			inp[5] = Input[0][5] << (63 - N);
			inp[6] = Input[0][6] << (63 - N);
			inp[7] = Input[0][7] << (63 - N);
			inp[8] = Input[0][8] << (63 - N);
			inp[9] = Input[0][9] << (63 - N);
			inp[10] = Input[0][10] << (63 - N);
			inp[11] = Input[0][11] << (63 - N);
		}
		else
		{
			inp[0] = (Input[0][0] >> (N - 63)) | (Input[1][0] << (127 - N));
			inp[1] = (Input[0][1] >> (N - 63)) | (Input[1][1] << (127 - N));
			inp[2] = (Input[0][2] >> (N - 63)) | (Input[1][2] << (127 - N));
			inp[3] = (Input[0][3] >> (N - 63)) | (Input[1][3] << (127 - N));
			inp[4] = (Input[0][4] >> (N - 63)) | (Input[1][4] << (127 - N));
			inp[5] = (Input[0][5] >> (N - 63)) | (Input[1][5] << (127 - N));
			inp[6] = (Input[0][6] >> (N - 63)) | (Input[1][6] << (127 - N));
			inp[7] = (Input[0][7] >> (N - 63)) | (Input[1][7] << (127 - N));
			inp[8] = (Input[0][8] >> (N - 63)) | (Input[1][8] << (127 - N));
			inp[9] = (Input[0][9] >> (N - 63)) | (Input[1][9] << (127 - N));
			inp[10] = (Input[0][10] >> (N - 63)) | (Input[1][10] << (127 - N));
			inp[11] = (Input[0][11] >> (N - 63)) | (Input[1][11] << (127 - N));
		}

		MPKCUtils::Multiply(prod, Output, inp);
		d = MPKCUtils::Reduce(prod, MPKC_M);

		// 3 cases
		bInv = MPKCUtils::Invert(b, MPKC_M);
		r = MPKCUtils::Multiply(d, bInv, MPKC_M);
		MPKCUtils::Insert(rvec, r);
		MPKCUtils::Multiply(tmpc, rvec, tmpb);

		tmpc[0] ^= Output[0];
		tmpc[1] ^= Output[1];
		tmpc[2] ^= Output[2];
		tmpc[3] ^= Output[3];
		tmpc[4] ^= Output[4];
		tmpc[5] ^= Output[5];
		tmpc[6] ^= Output[6];
		tmpc[7] ^= Output[7];
		tmpc[8] ^= Output[8];
		tmpc[9] ^= Output[9];
		tmpc[10] ^= Output[10];
		tmpc[11] ^= Output[11];

		masknz = MPKCUtils::MaskNonZero64(d);
		maskleq = MPKCUtils::MaskLeq64(L * 2, N);
		mask16b = (masknz & maskleq) & 0xFFFF;

		MPKCUtils::CMov(Output, tmpb, masknz & maskleq);
		MPKCUtils::Copy(tmpc, Output);

		b = (d & mask16b) | (b & ~mask16b);
		L = ((N + 1 - L) & mask16b) | (L & ~mask16b);

		tmpb[0] >>= 1;
		tmpb[1] >>= 1;
		tmpb[2] >>= 1;
		tmpb[3] >>= 1;
		tmpb[4] >>= 1;
		tmpb[5] >>= 1;
		tmpb[6] >>= 1;
		tmpb[7] >>= 1;
		tmpb[8] >>= 1;
		tmpb[9] >>= 1;
		tmpb[10] >>= 1;
		tmpb[11] >>= 1;
	}

	Output[0] >>= 64 - (MPKC_T + 1);
	Output[1] >>= 64 - (MPKC_T + 1);
	Output[2] >>= 64 - (MPKC_T + 1);
	Output[3] >>= 64 - (MPKC_T + 1);
	Output[4] >>= 64 - (MPKC_T + 1);
	Output[5] >>= 64 - (MPKC_T + 1);
	Output[6] >>= 64 - (MPKC_T + 1);
	Output[7] >>= 64 - (MPKC_T + 1);
	Output[8] >>= 64 - (MPKC_T + 1);
	Output[9] >>= 64 - (MPKC_T + 1);
	Output[10] >>= 64 - (MPKC_T + 1);
	Output[11] >>= 64 - (MPKC_T + 1);
}

byte MPKCN4096T62::DecryptE(std::vector<byte> &E, const std::vector<byte> &PrivateKey, const std::vector<byte> &S)
{
	std::array<ulong, MPKC_CND_SIZE / sizeof(ulong)> cond;
	ulong diff;
	ulong t;
	size_t i;

	IntegerTools::BlockToLe(PrivateKey, MPKC_IRR_SIZE, cond, 0, MPKC_CND_SIZE);
	std::vector<ulong> recv(MPKC_COLUMN_SIZE);
	PreProcess(recv, S);
	MPKCUtils::BenesCompact(recv, cond, 1UL);

	// scaling
	std::array<std::array<ulong, MPKC_M>, MPKC_COLUMN_SIZE> inverse;
	std::array<std::array<ulong, MPKC_M>, MPKC_COLUMN_SIZE> scaled;
	Scaling(scaled, inverse, PrivateKey, recv);

	// transposed FFT
	std::array<std::array<ulong, MPKC_M>, 2> sPriv;
	TransposedFFT::Transform(sPriv, scaled);
	SyndromeAdjust(sPriv);

	// Berlekamp Massey
	std::array<ulong, MPKC_M> locator{ 0 };
	BerlekampMassey(locator, sPriv);

	// additive FFT
	std::vector<std::array<ulong, MPKC_M>> evaluate(MPKC_COLUMN_SIZE);
	AdditiveFFT::Transform(evaluate, locator);

	std::array<ulong, MPKC_COLUMN_SIZE> error;

	for (i = 0; i < error.size(); ++i)
	{
		error[i] = MPKCUtils::Or(evaluate[i], MPKC_M);
		error[i] = ~error[i];
	}

	// re-Encrypt
	ScalingInverse(scaled, inverse, error);

	std::array<std::array<ulong, MPKC_M>, 2> sPrivCmp;
	TransposedFFT::Transform(sPrivCmp, scaled);
	SyndromeAdjust(sPrivCmp);

	diff = 0;
	diff |= sPriv[0][0] ^ sPrivCmp[0][0];
	diff |= sPriv[0][1] ^ sPrivCmp[0][1];
	diff |= sPriv[0][2] ^ sPrivCmp[0][2];
	diff |= sPriv[0][3] ^ sPrivCmp[0][3];
	diff |= sPriv[0][4] ^ sPrivCmp[0][4];
	diff |= sPriv[0][5] ^ sPrivCmp[0][5];
	diff |= sPriv[0][6] ^ sPrivCmp[0][6];
	diff |= sPriv[0][7] ^ sPrivCmp[0][7];
	diff |= sPriv[0][8] ^ sPrivCmp[0][8];
	diff |= sPriv[0][9] ^ sPrivCmp[0][9];
	diff |= sPriv[0][10] ^ sPrivCmp[0][10];
	diff |= sPriv[0][11] ^ sPrivCmp[0][11];
	diff |= sPriv[1][0] ^ sPrivCmp[1][0];
	diff |= sPriv[1][1] ^ sPrivCmp[1][1];
	diff |= sPriv[1][2] ^ sPrivCmp[1][2];
	diff |= sPriv[1][3] ^ sPrivCmp[1][3];
	diff |= sPriv[1][4] ^ sPrivCmp[1][4];
	diff |= sPriv[1][5] ^ sPrivCmp[1][5];
	diff |= sPriv[1][6] ^ sPrivCmp[1][6];
	diff |= sPriv[1][7] ^ sPrivCmp[1][7];
	diff |= sPriv[1][8] ^ sPrivCmp[1][8];
	diff |= sPriv[1][9] ^ sPrivCmp[1][9];
	diff |= sPriv[1][10] ^ sPrivCmp[1][10];
	diff |= sPriv[1][11] ^ sPrivCmp[1][11];
	diff |= diff >> 32;
	diff |= diff >> 16;
	diff |= diff >> 8;
	t = diff & 0xFF;

	// compact and store
	MPKCUtils::BenesCompact(error, cond, 0);
	IntegerTools::LeToBlock(error, 0, E, 0, error.size() * sizeof(ulong));

	t |= MPKCUtils::Weight(error) ^ MPKC_T;
	t -= 1;
	t >>= 63;

	return static_cast<byte>(t - 1);
}

void MPKCN4096T62::PreProcess(std::vector<ulong> &Received, const std::vector<byte> &S)
{
	IntegerTools::BlockToLe(S, 0, Received, 0, MPKC_CPACIPHERTEXT_SIZE - 5);

	Received[MPKC_CPACIPHERTEXT_SIZE / 8] <<= 8;
	Received[MPKC_CPACIPHERTEXT_SIZE / 8] |= S[((MPKC_CPACIPHERTEXT_SIZE / 8) * 8) + 4];
	Received[MPKC_CPACIPHERTEXT_SIZE / 8] <<= 8;
	Received[MPKC_CPACIPHERTEXT_SIZE / 8] |= S[((MPKC_CPACIPHERTEXT_SIZE / 8) * 8) + 3];
	Received[MPKC_CPACIPHERTEXT_SIZE / 8] <<= 8;
	Received[MPKC_CPACIPHERTEXT_SIZE / 8] |= S[((MPKC_CPACIPHERTEXT_SIZE / 8) * 8) + 2];
	Received[MPKC_CPACIPHERTEXT_SIZE / 8] <<= 8;
	Received[MPKC_CPACIPHERTEXT_SIZE / 8] |= S[((MPKC_CPACIPHERTEXT_SIZE / 8) * 8) + 1];
	Received[MPKC_CPACIPHERTEXT_SIZE / 8] <<= 8;
	Received[MPKC_CPACIPHERTEXT_SIZE / 8] |= S[((MPKC_CPACIPHERTEXT_SIZE / 8) * 8)];
}

void MPKCN4096T62::Scaling(std::array<std::array<ulong, MPKC_M>, MPKC_COLUMN_SIZE> &Output, std::array<std::array<ulong, MPKC_M>, MPKC_COLUMN_SIZE> &Inverse, const std::vector<byte> &PrivateKey, std::vector<ulong> &Received)
{
	std::vector<std::array<ulong, MPKC_M>> evaluate(MPKC_COLUMN_SIZE);
	std::array<ulong, MPKC_M> skint;
	std::array<ulong, MPKC_M> tmp;
	size_t ctr;
	size_t i;

	// computing inverses
	MemoryTools::Copy(PrivateKey, 0, skint, 0, MPKC_M * sizeof(ulong));
	AdditiveFFT::Transform(evaluate, skint);
	Square(evaluate[0], evaluate[0]);
	MPKCUtils::Copy(evaluate[0], Inverse[0]);

	for (i = 1; i < MPKC_COLUMN_SIZE; ++i)
	{
		Square(evaluate[i], evaluate[i]);
		MPKCUtils::Multiply(Inverse[i], Inverse[i - 1], evaluate[i]);
	}

	Invert(tmp, Inverse[63]);
	ctr = 63;

	do
	{
		MPKCUtils::Multiply(Inverse[ctr], tmp, Inverse[ctr - 1]);
		MPKCUtils::Multiply(tmp, tmp, evaluate[ctr]);
		--ctr;
	} 
	while (ctr != 0);

	MPKCUtils::Copy(tmp, Inverse[0]);

	for (i = 0; i < MPKC_COLUMN_SIZE; ++i)
	{
		Output[i][0] = Inverse[i][0] & Received[i];
		Output[i][1] = Inverse[i][1] & Received[i];
		Output[i][2] = Inverse[i][2] & Received[i];
		Output[i][3] = Inverse[i][3] & Received[i];
		Output[i][4] = Inverse[i][4] & Received[i];
		Output[i][5] = Inverse[i][5] & Received[i];
		Output[i][6] = Inverse[i][6] & Received[i];
		Output[i][7] = Inverse[i][7] & Received[i];
		Output[i][8] = Inverse[i][8] & Received[i];
		Output[i][9] = Inverse[i][9] & Received[i];
		Output[i][10] = Inverse[i][10] & Received[i];
		Output[i][11] = Inverse[i][11] & Received[i];
	}
}

void MPKCN4096T62::ScalingInverse(std::array<std::array<ulong, MPKC_M>, MPKC_COLUMN_SIZE> &Output, std::array<std::array<ulong, MPKC_M>, MPKC_COLUMN_SIZE> &Inverse, std::array<ulong, MPKC_COLUMN_SIZE> &Received)
{
	size_t i;

	for (i = 0; i < MPKC_COLUMN_SIZE; ++i)
	{
		Output[i][0] = Inverse[i][0] & Received[i];
		Output[i][1] = Inverse[i][1] & Received[i];
		Output[i][2] = Inverse[i][2] & Received[i];
		Output[i][3] = Inverse[i][3] & Received[i];
		Output[i][4] = Inverse[i][4] & Received[i];
		Output[i][5] = Inverse[i][5] & Received[i];
		Output[i][6] = Inverse[i][6] & Received[i];
		Output[i][7] = Inverse[i][7] & Received[i];
		Output[i][8] = Inverse[i][8] & Received[i];
		Output[i][9] = Inverse[i][9] & Received[i];
		Output[i][10] = Inverse[i][10] & Received[i];
		Output[i][11] = Inverse[i][11] & Received[i];
	}
}

void MPKCN4096T62::SyndromeAdjust(std::array<std::array<ulong, MPKC_M>, 2> &Output)
{
	const size_t SASHFT = (128 - MPKC_T * 2);

	Output[1][0] <<= SASHFT;
	Output[1][0] >>= SASHFT;
	Output[1][1] <<= SASHFT;
	Output[1][1] >>= SASHFT;
	Output[1][2] <<= SASHFT;
	Output[1][2] >>= SASHFT;
	Output[1][3] <<= SASHFT;
	Output[1][3] >>= SASHFT;
	Output[1][4] <<= SASHFT;
	Output[1][4] >>= SASHFT;
	Output[1][5] <<= SASHFT;
	Output[1][5] >>= SASHFT;
	Output[1][6] <<= SASHFT;
	Output[1][6] >>= SASHFT;
	Output[1][7] <<= SASHFT;
	Output[1][7] >>= SASHFT;
	Output[1][8] <<= SASHFT;
	Output[1][8] >>= SASHFT;
	Output[1][9] <<= SASHFT;
	Output[1][9] >>= SASHFT;
	Output[1][10] <<= SASHFT;
	Output[1][10] >>= SASHFT;
	Output[1][11] <<= SASHFT;
	Output[1][11] >>= SASHFT;
}

//~~~Encrypt~~~//

void MPKCN4096T62::EncryptE(std::vector<byte> &S, std::vector<byte> &E, const std::vector<byte> &PublicKey, std::unique_ptr<IPrng> &Rng)
{
	GenE(E, Rng);
	Syndrome(S, PublicKey, E);
}

void MPKCN4096T62::GenE(std::vector<byte> &E, std::unique_ptr<IPrng> &Rng)
{
	std::vector<ushort> ind(MPKC_T);
	ulong mask;
	size_t i;
	size_t j;
	size_t eq;

	while (true)
	{
		IntegerTools::Fill(ind, 0, ind.size(), Rng.get());

		for (i = 0; i < MPKC_T; ++i) 
		{
			ind[i] &= (static_cast<ushort>(1) << MPKC_M) - 1;
		}

		eq = 0;

		for (i = 1; i < MPKC_T; ++i)
		{
			for (j = 0; j < i; ++j)
			{
				if (ind[i] == ind[j])
				{
					eq = 1;
				}
			}
		}

		if (eq == 0)
		{
			break;
		}
	}

	std::array<ulong, MPKC_T> val;

	for (j = 0; j < MPKC_T; ++j)
	{
		val[j] = (static_cast<ulong>(1) << (ind[j] & 63));
	}

	std::array<ulong, 64> eint;

	for (i = 0; i < 64; ++i)
	{
		eint[i] = 0;

		for (j = 0; j < MPKC_T; ++j)
		{
			mask = i ^ (ind[j] >> 6);
			mask -= 1;
			mask >>= 63;
			mask = ~mask + 1;
			eint[i] |= val[j] & mask;
		}
	}

	IntegerTools::LeToBlock(eint, 0, E, 0, eint.size() * sizeof(ulong));
}

void MPKCN4096T62::Syndrome(std::vector<byte> &S, const std::vector<byte> &PublicKey, const std::vector<byte> &E)
{
	const size_t ARRLEN = ((MPKC_PKN_COLS + 63) / MPKC_COLUMN_SIZE);
	const size_t COLLEN = MPKC_PKN_COLS / sizeof(ulong);

	std::array<ulong, ARRLEN> eint;
	std::array<ulong, ARRLEN> rowint;
	std::array<ulong, 8> tmp;
	size_t ctr;
	size_t i;
	size_t j;
	byte tmpb;

	MemoryTools::Copy(E, MPKC_CPACIPHERTEXT_SIZE, eint, 0, COLLEN);

	for (i = 0; i < MPKC_PKN_ROWS; i += 8)
	{
		for (ctr = 0; ctr < 8; ++ctr)
		{
			rowint[ARRLEN - 1] = 0;
			MemoryTools::Copy(PublicKey, ((i + ctr) * COLLEN), rowint, 0, COLLEN);
			tmp[ctr] = 0;

			for (j = 0; j < ARRLEN; ++j)
			{
				tmp[ctr] ^= eint[j] & rowint[j];
			}
		}

		ctr = tmp.size();

		do
		{
			--ctr;
			tmp[ctr] ^= (tmp[ctr] >> 32);
			tmp[ctr] ^= (tmp[ctr] >> 16);
			tmp[ctr] ^= (tmp[ctr] >> 8);
			tmp[ctr] ^= (tmp[ctr] >> 4);
		} 
		while (ctr != 0);

		ctr = tmp.size();
		tmpb = 0;

		do
		{
			--ctr;
			tmpb <<= 1;
			tmpb |= static_cast<byte>(0x6996UL >> (tmp[ctr] & 0x0F)) & 0x01;
		} 
		while (ctr != 0);

		S[i / 8] = E[i / 8] ^ tmpb;
	}
}

//~~~KeyGen~~~//

bool MPKCN4096T62::IrrGen(std::array<ushort, MPKC_T + 1> &Output, std::vector<ushort> &F)
{
	std::array<std::array<ushort, MPKC_T>, MPKC_T + 1> mat;
	size_t c;
	size_t i;
	size_t j;
	size_t k;
	ushort inverse;
	ushort mask;
	ushort t;
	bool status;

	// fill matrix
	mat[0][0] = 1;

	for (i = 1; i < MPKC_T; ++i)
	{
		mat[0][i] = 0;
	}

	for (i = 0; i < MPKC_T; ++i)
	{
		mat[1][i] = F[i];
	}

	for (j = 2; j <= MPKC_T; ++j) 
	{
		MatrixMultiply(mat[j], mat[j - 1], F);
	}

	// gaussian
	for (j = 0; j < MPKC_T; ++j)
	{
		for (k = j + 1; k < MPKC_T; ++k)
		{
			mask = MPKCUtils::Diff(mat[j][j], mat[j][k]);

			for (c = 0; c < MPKC_T + 1; ++c) 
			{
				mat[c][j] ^= mat[c][k] & mask;
			}
		}

		// not invertible
		status = (mat[j][j] != 0);

		if (status == false)
		{
			break;
		}

		// compute inverse
		inverse = MPKCUtils::Invert(mat[j][j], MPKC_M);

		for (c = 0; c < MPKC_T + 1; ++c) 
		{
			mat[c][j] = MPKCUtils::Multiply(mat[c][j], inverse, MPKC_M);
		}

		for (k = 0; k < MPKC_T; ++k)
		{
			t = mat[j][k];

			if (k != j)
			{
				for (c = 0; c < MPKC_T + 1; ++c)
				{
					mat[c][k] ^= MPKCUtils::Multiply(mat[c][j], t, MPKC_M);
				}
			}
		}
	}

	if (status == true)
	{
		for (i = 0; i < MPKC_T; ++i)
		{
			Output[i] = mat[MPKC_T][i];
		}

		Output[MPKC_T] = 1;
	}

	return status;
}

void MPKCN4096T62::SkGen(std::vector<byte> &PrivateKey, std::unique_ptr<Prng::IPrng> &Rng)
{
	std::array<ushort, MPKC_T + 1> irr;
	std::vector<ushort> f(MPKC_T);
	size_t ctr;
	size_t i;

	while (true)
	{
		IntegerTools::Fill(f, 0, f.size(), Rng.get());

		for (i = 0; i < MPKC_T; ++i) 
		{
			f[i] &= (static_cast<ushort>(1) << MPKC_M) - 1;
		}

		if (IrrGen(irr, f))
		{
			break;
		}
	}

	std::array<ulong, MPKC_M> skint;

	for (i = 0; i < MPKC_M; i++)
	{
		skint[i] = 0;
		ctr = irr.size();

		do
		{
			--ctr;
			skint[i] <<= 1;
			skint[i] |= (irr[ctr] >> i) & 1;
		} 
		while (ctr != 0);

		IntegerTools::Le64ToBytes(skint[i], PrivateKey, i * 8);
	}

	std::vector<ulong> cond(MPKC_CND_SIZE / sizeof(ulong));
	IntegerTools::Fill(cond, 0, cond.size(), Rng.get());

	for (i = 0; i < MPKC_CND_SIZE / sizeof(ulong); ++i)
	{
		IntegerTools::Le64ToBytes(cond[i], PrivateKey, MPKC_IRR_SIZE + i * sizeof(ulong));
	}
}

bool MPKCN4096T62::PkGen(std::vector<byte> &PublicKey, const std::vector<byte> &PrivateKey)
{
	std::array<ulong, MPKC_M> skint;
	std::vector<std::array<ulong, MPKC_M>> evaluate(MPKC_COLUMN_SIZE);
	std::vector<std::array<ulong, MPKC_M>> inverse(MPKC_COLUMN_SIZE);
	ulong mask;
	ulong u;
	size_t c;
	size_t ctr;
	size_t i;
	size_t j;
	size_t k;
	size_t pos;
	size_t row;
	size_t tail;
	bool status;

	// compute the inverses
	for (i = 0; i < MPKC_M; ++i)
	{
		skint[i] = IntegerTools::LeBytesTo64(PrivateKey, i * 8);
	}

	AdditiveFFT::Transform(evaluate, skint);
	MPKCUtils::Copy(evaluate[0], inverse[0]);

	for (i = 1; i < MPKC_COLUMN_SIZE; ++i)
	{
		MPKCUtils::Multiply(inverse[i], inverse[i - 1], evaluate[i]);
	}

	std::array<ulong, MPKC_M> tmp;
	Invert(tmp, inverse[63]);

	ctr = 63;

	do
	{
		MPKCUtils::Multiply(inverse[ctr], tmp, inverse[ctr - 1]);
		MPKCUtils::Multiply(tmp, tmp, evaluate[ctr]);
		--ctr;
	} 
	while (ctr != 0);

	MPKCUtils::Copy(tmp, inverse[0]);
	std::array<std::array<ulong, MPKC_COLUMN_SIZE>, MPKC_PKN_ROWS> mat;

	// fill matrix 
	for (j = 0; j < MPKC_COLUMN_SIZE; ++j)
	{
		for (k = 0; k < MPKC_M; ++k) 
		{
			mat[k][j] = inverse[j][k];
		}
	}

	for (i = 1; i < MPKC_T; ++i)
	{
		for (j = 0; j < MPKC_COLUMN_SIZE; ++j)
		{
			MPKCUtils::Multiply(inverse[j], inverse[j], GfPoints[j]);

			for (k = 0; k < MPKC_M; ++k)
			{
				mat[i * MPKC_M + k][j] = inverse[j][k];
			}
		}
	}

	// permute 
	std::array<ulong, MPKC_CND_SIZE / 8> cond;

	for (i = 0; i < MPKC_CND_SIZE / 8; ++i)
	{
		cond[i] = IntegerTools::LeBytesTo64(PrivateKey, MPKC_IRR_SIZE + i * 8);
	}

	for (i = 0; i < MPKC_PKN_ROWS; ++i)
	{
		MPKCUtils::BenesCompact(mat[i], cond, 0);
	}

	// gaussian elimination 
	for (i = 0; i < MPKC_M; ++i)
	{
		for (j = 0; j < MPKC_COLUMN_SIZE; ++j)
		{
			row = (i * MPKC_COLUMN_SIZE) + j;

			if (row >= MPKC_PKN_ROWS)
			{
				break;
			}

			for (k = row + 1; k < MPKC_PKN_ROWS; ++k)
			{
				mask = mat[row][i] ^ mat[k][i];
				mask >>= j;
				mask &= 1;
				mask = ~mask + 1;

				for (c = 0; c < MPKC_COLUMN_SIZE; ++c)
				{
					mat[row][c] ^= mat[k][c] & mask;
				}
			}

			// not invertible
			status = (((mat[row][i] >> j) & 1) != 0);

			if (status == false)
			{
				break;
			}

			for (k = 0; k < MPKC_PKN_ROWS; ++k)
			{
				if (k != row)
				{
					mask = mat[k][i] >> j;
					mask &= 1;
					mask = ~mask + 1;

					for (c = 0; c < MPKC_COLUMN_SIZE; ++c)
					{
						mat[k][c] ^= mat[row][c] & mask;
					}
				}
			}
		}

		if (status == false)
		{
			break;
		}
	}

	if (status == true)
	{
		// store pk
		tail = (MPKC_PKN_ROWS & 63) >> 3;
		pos = 0;

		for (i = 0; i < MPKC_PKN_ROWS; ++i)
		{
			u = mat[i][(MPKC_PKN_ROWS + 63) / MPKC_COLUMN_SIZE - 1];

			for (k = tail; k < 8; ++k)
			{
				PublicKey[pos + (k - tail)] = (u >> (8 * k)) & 0xFF;
			}

			pos += 8 - tail;

			for (j = MPKC_M; j < MPKC_COLUMN_SIZE; ++j)
			{
				IntegerTools::Le64ToBytes(mat[i][j], PublicKey, pos);
				pos += sizeof(ulong);
			}
		}
	}

	return status;
}

//~~~FFT~~~//

void MPKCN4096T62::AdditiveFFT::Transform(std::vector<std::array<ulong, MPKC_M>> &Output, std::array<ulong, MPKC_M> &Input)
{
	RadixConversions(Input);
	Butterflies(Output, Input);
}

void MPKCN4096T62::AdditiveFFT::Butterflies(std::vector<std::array<ulong, MPKC_M>> &Output, std::array<ulong, MPKC_M> &Input)
{
	size_t b;
	size_t i;
	size_t j;
	size_t k;
	size_t s;
	size_t pos;

	static const std::array<byte, 64> ButterflyReverse =
	{
		0x00, 0x20, 0x10, 0x30, 0x08, 0x28, 0x18, 0x38, 
		0x04, 0x24, 0x14, 0x34, 0x0C, 0x2C, 0x1C, 0x3C,
		0x02, 0x22, 0x12, 0x32, 0x0A, 0x2A, 0x1A, 0x3A, 
		0x06, 0x26, 0x16, 0x36, 0x0E, 0x2E, 0x1E, 0x3E,
		0x01, 0x21, 0x11, 0x31, 0x09, 0x29, 0x19, 0x39, 
		0x05, 0x25, 0x15, 0x35, 0x0D, 0x2D, 0x1D, 0x3D,
		0x03, 0x23, 0x13, 0x33, 0x0B, 0x2B, 0x1B, 0x3B, 
		0x07, 0x27, 0x17, 0x37, 0x0F, 0x2F, 0x1F, 0x3F
	};

	// broadcast
	for (j = 0; j < MPKC_COLUMN_SIZE; ++j)
	{
		Output[j][0] = (Input[0] >> ButterflyReverse[j]) & 1;
		Output[j][0] = ~Output[j][0] + 1;
		Output[j][1] = (Input[1] >> ButterflyReverse[j]) & 1;
		Output[j][1] = ~Output[j][1] + 1;
		Output[j][2] = (Input[2] >> ButterflyReverse[j]) & 1;
		Output[j][2] = ~Output[j][2] + 1;
		Output[j][3] = (Input[3] >> ButterflyReverse[j]) & 1;
		Output[j][3] = ~Output[j][3] + 1;
		Output[j][4] = (Input[4] >> ButterflyReverse[j]) & 1;
		Output[j][4] = ~Output[j][4] + 1;
		Output[j][5] = (Input[5] >> ButterflyReverse[j]) & 1;
		Output[j][5] = ~Output[j][5] + 1;
		Output[j][6] = (Input[6] >> ButterflyReverse[j]) & 1;
		Output[j][6] = ~Output[j][6] + 1;
		Output[j][7] = (Input[7] >> ButterflyReverse[j]) & 1;
		Output[j][7] = ~Output[j][7] + 1;
		Output[j][8] = (Input[8] >> ButterflyReverse[j]) & 1;
		Output[j][8] = ~Output[j][8] + 1;
		Output[j][9] = (Input[9] >> ButterflyReverse[j]) & 1;
		Output[j][9] = ~Output[j][9] + 1;
		Output[j][10] = (Input[10] >> ButterflyReverse[j]) & 1;
		Output[j][10] = ~Output[j][10] + 1;
		Output[j][11] = (Input[11] >> ButterflyReverse[j]) & 1;
		Output[j][11] = ~Output[j][11] + 1;
	}

	pos = 0;
	std::array<ulong, MPKC_M> tmp;

	// butterflies
	for (i = 0; i <= 5; ++i)
	{
		s = static_cast<size_t>(1) << i;

		// butterflies
		for (i = 0; i <= 5; ++i)
		{
			s = static_cast<size_t>(1) << i;

			for (j = 0; j < MPKC_COLUMN_SIZE; j += 2 * s)
			{
				for (k = j; k < j + s; ++k)
				{
					MPKCUtils::Multiply(tmp, Output[k + s], ButterflyConsts[pos + (k - j)]);

					// memory tiling
					for (b = 0; b < MPKC_M; ++b)
					{
						Output[k][b] ^= tmp[b];
					}

					for (b = 0; b < MPKC_M; ++b)
					{
						Output[k + s][b] ^= Output[k][b];
					}
				}
			}

			pos += (1ULL << i);
		}

		pos += (1ULL << i);
	}
}

void MPKCN4096T62::AdditiveFFT::RadixConversions(std::array<ulong, MPKC_M> &Output)
{
	size_t ctr;
	size_t i;
	size_t j;

	static const std::array<std::array<ulong, 2>, 5> RadixMask =
	{
		{
			{ 0x8888888888888888ULL, 0x4444444444444444ULL },
			{ 0xC0C0C0C0C0C0C0C0ULL, 0x3030303030303030ULL },
			{ 0xF000F000F000F000ULL, 0x0F000F000F000F00ULL },
			{ 0xFF000000FF000000ULL, 0x00FF000000FF0000ULL },
			{ 0xFFFF000000000000ULL, 0x0000FFFF00000000ULL }
		}
	};

	static const std::array<std::array<ulong, 12>, 5> RadixScalar =
	{
		{
			{
				0xF3CFC030FC30F003ULL, 0x3FCF0F003C00C00CULL, 0x30033CC300C0C03CULL, 0xCCFF0F3C0F30F0C0ULL,
				0x0300C03FF303C3F0ULL, 0x3FFF3C0FF0CCCCC0ULL, 0xF3FFF0C00F3C3CC0ULL, 0x3003333FFFC3C000ULL,
				0x0FF30FFFC3FFF300ULL, 0xFFC0F300F0F0CC00ULL, 0xC0CFF3FCCC3CFC00ULL, 0xFC3C03F0F330C000ULL,
			},
			{
				0x000F00000000F00FULL, 0x00000F00F00000F0ULL, 0x0F00000F00000F00ULL, 0xF00F00F00F000000ULL,
				0x00F00000000000F0ULL, 0x0000000F00000000ULL, 0xF00000000F00F000ULL, 0x00F00F00000F0000ULL,
				0x0000F00000F00F00ULL, 0x000F00F00F00F000ULL, 0x00F00F0000000000ULL, 0x0000000000F00000ULL,
			},
			{
				0x0000FF00FF0000FFULL, 0x0000FF000000FF00ULL, 0xFF0000FF00FF0000ULL, 0xFFFF0000FF000000ULL,
				0x00FF00FF00FF0000ULL, 0x0000FFFFFF000000ULL, 0x00FFFF00FF000000ULL, 0xFFFFFF0000FF0000ULL,
				0xFFFF00FFFF00FF00ULL, 0x0000FF0000000000ULL, 0xFFFFFF00FF000000ULL, 0x00FF000000000000ULL,
			},
			{
				0x000000000000FFFFULL, 0x00000000FFFF0000ULL, 0x0000000000000000ULL, 0xFFFF000000000000ULL,
				0x00000000FFFF0000ULL, 0x0000FFFF00000000ULL, 0x0000000000000000ULL, 0x00000000FFFF0000ULL,
				0x0000FFFF00000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
			},
			{
				0x00000000FFFFFFFFULL, 0xFFFFFFFF00000000ULL, 0xFFFFFFFF00000000ULL, 0x0000000000000000ULL,
				0x0000000000000000ULL, 0xFFFFFFFF00000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
				0xFFFFFFFF00000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
			}
		}
	};

	// scaling
	for (i = 0; i < RadixMask.size(); ++i)
	{
		for (j = 0; j < MPKC_M; ++j)
		{
			ctr = RadixMask.size();

			do 
			{
				--ctr;
				Output[j] ^= (Output[j] & RadixMask[ctr][0]) >> (1UL << ctr);
				Output[j] ^= (Output[j] & RadixMask[ctr][1]) >> (1UL << ctr);
			} 
			while(ctr != i);

		}

		MPKCUtils::Multiply(Output, Output, RadixScalar[i]);
	}
}

void MPKCN4096T62::TransposedFFT::Transform(std::array<std::array<ulong, MPKC_M>, 2> &Output, std::array<std::array<ulong, MPKC_M>, MPKC_COLUMN_SIZE> &Input)
{
	Butterflies(Output, Input);
	RadixConversions(Output);
}

void MPKCN4096T62::TransposedFFT::Butterflies(std::array<std::array<ulong, MPKC_M>, 2> &Output, std::array<std::array<ulong, MPKC_M>, MPKC_COLUMN_SIZE> &Input)
{
	std::array<ulong, MPKC_M> tmp;
	size_t i;
	size_t j;
	size_t k;
	size_t pos;
	uint s;

	// butterflies
	i = 6;
	pos = MPKC_COLUMN_SIZE -  1;

	do
	{
		--i;
		s = 1UL << i;
		pos -= s;

		for (j = 0; j < MPKC_COLUMN_SIZE; j += 2 * s)
		{
			for (k = j; k < j + s; ++k)
			{
				MPKCUtils::Add(Input[k], Input[k + s]);
				MPKCUtils::Multiply(tmp, Input[k], ButterflyConsts[pos + (k - j)]);
				MPKCUtils::Add(Input[k + s], tmp);
			}
		}
	} 
	while (i != 0);

	// transpose
	static const std::array<byte, 64> ButterflyReverse =
	{
		0x00, 0x20, 0x10, 0x30, 0x08, 0x28, 0x18, 0x38,
		0x04, 0x24, 0x14, 0x34, 0x0C, 0x2C, 0x1C, 0x3C,
		0x02, 0x22, 0x12, 0x32, 0x0A, 0x2A, 0x1A, 0x3A,
		0x06, 0x26, 0x16, 0x36, 0x0E, 0x2E, 0x1E, 0x3E,
		0x01, 0x21, 0x11, 0x31, 0x09, 0x29, 0x19, 0x39,
		0x05, 0x25, 0x15, 0x35, 0x0D, 0x2D, 0x1D, 0x3D,
		0x03, 0x23, 0x13, 0x33, 0x0B, 0x2B, 0x1B, 0x3B,
		0x07, 0x27, 0x17, 0x37, 0x0F, 0x2F, 0x1F, 0x3F
	};

	std::array<ulong, MPKC_COLUMN_SIZE> buf;

	for (i = 0; i < MPKC_M; ++i)
	{
		for (j = 0; j < MPKC_COLUMN_SIZE; ++j)
		{
			buf[ButterflyReverse[j]] = Input[j][i];
		}

		MPKCUtils::TransposeCompact64x64(buf);

		for (j = 0; j < MPKC_COLUMN_SIZE; ++j)
		{
			Input[j][i] = buf[j];
		}
	}

	// broadcast
	std::array<std::array<ulong, MPKC_M>, 6> pre;

	MPKCUtils::Copy(Input[32], pre[0]);
	MPKCUtils::Add(Input[33], Input[32]);
	MPKCUtils::Copy(Input[33], pre[1]);
	MPKCUtils::Add(Input[35], Input[33]);
	MPKCUtils::Add(pre[0], Input[35]);
	MPKCUtils::Add(Input[34], Input[35]);
	MPKCUtils::Copy(Input[34], pre[2]);
	MPKCUtils::Add(Input[38], Input[34]);
	MPKCUtils::Add(pre[0], Input[38]);
	MPKCUtils::Add(Input[39], Input[38]);
	MPKCUtils::Add(pre[1], Input[39]);
	MPKCUtils::Add(Input[37], Input[39]);
	MPKCUtils::Add(pre[0], Input[37]);
	MPKCUtils::Add(Input[36], Input[37]);
	MPKCUtils::Copy(Input[36], pre[3]);
	MPKCUtils::Add(Input[44], Input[36]);
	MPKCUtils::Add(pre[0], Input[44]);
	MPKCUtils::Add(Input[45], Input[44]);
	MPKCUtils::Add(pre[1], Input[45]);
	MPKCUtils::Add(Input[47], Input[45]);
	MPKCUtils::Add(pre[0], Input[47]);
	MPKCUtils::Add(Input[46], Input[47]);
	MPKCUtils::Add(pre[2], Input[46]);
	MPKCUtils::Add(Input[42], Input[46]);
	MPKCUtils::Add(pre[0], Input[42]);
	MPKCUtils::Add(Input[43], Input[42]);
	MPKCUtils::Add(pre[1], Input[43]);
	MPKCUtils::Add(Input[41], Input[43]);
	MPKCUtils::Add(pre[0], Input[41]);
	MPKCUtils::Add(Input[40], Input[41]);
	MPKCUtils::Copy(Input[40], pre[4]);
	MPKCUtils::Add(Input[56], Input[40]);
	MPKCUtils::Add(pre[0], Input[56]);
	MPKCUtils::Add(Input[57], Input[56]);
	MPKCUtils::Add(pre[1], Input[57]);
	MPKCUtils::Add(Input[59], Input[57]);
	MPKCUtils::Add(pre[0], Input[59]);
	MPKCUtils::Add(Input[58], Input[59]);
	MPKCUtils::Add(pre[2], Input[58]);
	MPKCUtils::Add(Input[62], Input[58]);
	MPKCUtils::Add(pre[0], Input[62]);
	MPKCUtils::Add(Input[63], Input[62]);
	MPKCUtils::Add(pre[1], Input[63]);
	MPKCUtils::Add(Input[61], Input[63]);
	MPKCUtils::Add(pre[0], Input[61]);
	MPKCUtils::Add(Input[60], Input[61]);
	MPKCUtils::Add(pre[3], Input[60]);
	MPKCUtils::Add(Input[52], Input[60]);
	MPKCUtils::Add(pre[0], Input[52]);
	MPKCUtils::Add(Input[53], Input[52]);
	MPKCUtils::Add(pre[1], Input[53]);
	MPKCUtils::Add(Input[55], Input[53]);
	MPKCUtils::Add(pre[0], Input[55]);
	MPKCUtils::Add(Input[54], Input[55]);
	MPKCUtils::Add(pre[2], Input[54]);
	MPKCUtils::Add(Input[50], Input[54]);
	MPKCUtils::Add(pre[0], Input[50]);
	MPKCUtils::Add(Input[51], Input[50]);
	MPKCUtils::Add(pre[1], Input[51]);
	MPKCUtils::Add(Input[49], Input[51]);
	MPKCUtils::Add(pre[0], Input[49]);
	MPKCUtils::Add(Input[48], Input[49]);
	MPKCUtils::Copy(Input[48], pre[5]);
	MPKCUtils::Add(Input[16], Input[48]);
	MPKCUtils::Add(pre[0], Input[16]);
	MPKCUtils::Add(Input[17], Input[16]);
	MPKCUtils::Add(pre[1], Input[17]);
	MPKCUtils::Add(Input[19], Input[17]);
	MPKCUtils::Add(pre[0], Input[19]);
	MPKCUtils::Add(Input[18], Input[19]);
	MPKCUtils::Add(pre[2], Input[18]);
	MPKCUtils::Add(Input[22], Input[18]);
	MPKCUtils::Add(pre[0], Input[22]);
	MPKCUtils::Add(Input[23], Input[22]);
	MPKCUtils::Add(pre[1], Input[23]);
	MPKCUtils::Add(Input[21], Input[23]);
	MPKCUtils::Add(pre[0], Input[21]);
	MPKCUtils::Add(Input[20], Input[21]);
	MPKCUtils::Add(pre[3], Input[20]);
	MPKCUtils::Add(Input[28], Input[20]);
	MPKCUtils::Add(pre[0], Input[28]);
	MPKCUtils::Add(Input[29], Input[28]);
	MPKCUtils::Add(pre[1], Input[29]);
	MPKCUtils::Add(Input[31], Input[29]);
	MPKCUtils::Add(pre[0], Input[31]);
	MPKCUtils::Add(Input[30], Input[31]);
	MPKCUtils::Add(pre[2], Input[30]);
	MPKCUtils::Add(Input[26], Input[30]);
	MPKCUtils::Add(pre[0], Input[26]);
	MPKCUtils::Add(Input[27], Input[26]);
	MPKCUtils::Add(pre[1], Input[27]);
	MPKCUtils::Add(Input[25], Input[27]);
	MPKCUtils::Add(pre[0], Input[25]);
	MPKCUtils::Add(Input[24], Input[25]);
	MPKCUtils::Add(pre[4], Input[24]);
	MPKCUtils::Add(Input[8], Input[24]);
	MPKCUtils::Add(pre[0], Input[8]);
	MPKCUtils::Add(Input[9], Input[8]);
	MPKCUtils::Add(pre[1], Input[9]);
	MPKCUtils::Add(Input[11], Input[9]);
	MPKCUtils::Add(pre[0], Input[11]);
	MPKCUtils::Add(Input[10], Input[11]);
	MPKCUtils::Add(pre[2], Input[10]);
	MPKCUtils::Add(Input[14], Input[10]);
	MPKCUtils::Add(pre[0], Input[14]);
	MPKCUtils::Add(Input[15], Input[14]);
	MPKCUtils::Add(pre[1], Input[15]);
	MPKCUtils::Add(Input[13], Input[15]);
	MPKCUtils::Add(pre[0], Input[13]);
	MPKCUtils::Add(Input[12], Input[13]);
	MPKCUtils::Add(pre[3], Input[12]);
	MPKCUtils::Add(Input[4], Input[12]);
	MPKCUtils::Add(pre[0], Input[4]);
	MPKCUtils::Add(Input[5], Input[4]);
	MPKCUtils::Add(pre[1], Input[5]);
	MPKCUtils::Add(Input[7], Input[5]);
	MPKCUtils::Add(pre[0], Input[7]);
	MPKCUtils::Add(Input[6], Input[7]);
	MPKCUtils::Add(pre[2], Input[6]);
	MPKCUtils::Add(Input[2], Input[6]);
	MPKCUtils::Add(pre[0], Input[2]);
	MPKCUtils::Add(Input[3], Input[2]);
	MPKCUtils::Add(pre[1], Input[3]);
	MPKCUtils::Add(Input[1], Input[3]);
	MPKCUtils::Add(pre[0], Input[1]);
	MPKCUtils::Add(Output[0], Input[0], Input[1]);

	const ushort Beta[6] =
	{
		0x0008U, 0x0514U, 0x0D50U, 0x054AU, 0x0925U, 0x0482U
	};

	for (j = 0; j < MPKC_M; ++j)
	{
		tmp[j] = (Beta[0] >> j) & 1;
		tmp[j] = ~tmp[j] + 1;
	}

	MPKCUtils::Multiply(Output[1], pre[0], tmp);

	for (i = 1; i < 6; ++i)
	{
		for (j = 0; j < MPKC_M; ++j)
		{
			tmp[j] = (Beta[i] >> j) & 1;
			tmp[j] = ~tmp[j] + 1;
		}

		MPKCUtils::Multiply(tmp, pre[i], tmp);
		MPKCUtils::Add(Output[1], tmp);
	}
}

void MPKCN4096T62::TransposedFFT::RadixConversions(std::array<std::array<ulong, MPKC_M>, 2> &Output)
{
	size_t ctr;
	size_t i;
	size_t j;

	static const std::array<std::array<ulong, 2>, 6> RadixTrMask =
	{
		{
			{ 0x2222222222222222ULL, 0x4444444444444444ULL },
			{ 0x0C0C0C0C0C0C0C0CULL, 0x3030303030303030ULL },
			{ 0x00F000F000F000F0ULL, 0x0F000F000F000F00ULL },
			{ 0x0000FF000000FF00ULL, 0x00FF000000FF0000ULL },
			{ 0x00000000FFFF0000ULL, 0x0000FFFF00000000ULL },
			{ 0xFFFFFFFF00000000ULL, 0x00000000FFFFFFFFULL }
		}
	};

	ctr = RadixTrMask.size();

	do
	{
		--ctr;

		if (ctr < 5)
		{
			MPKCUtils::Multiply(Output[0], Output[0], RadixTrScalar[ctr][0]);
			MPKCUtils::Multiply(Output[1], Output[1], RadixTrScalar[ctr][1]);
		}

		for (i = 0; i < MPKC_M; ++i)
		{
			for (j = ctr; j <= 4; ++j)
			{
				Output[0][i] ^= (Output[0][i] & RadixTrMask[j][0]) << (1UL << j);
				Output[0][i] ^= (Output[0][i] & RadixTrMask[j][1]) << (1UL << j);
				Output[1][i] ^= (Output[1][i] & RadixTrMask[j][0]) << (1UL << j);
				Output[1][i] ^= (Output[1][i] & RadixTrMask[j][1]) << (1UL << j);
			}
		}

		for (i = 0; i < MPKC_M; ++i)
		{
			Output[1][i] ^= (Output[0][i] & RadixTrMask[5][0]) >> 32;
			Output[1][i] ^= (Output[1][i] & RadixTrMask[5][1]) << 32;
		}
	} 
	while (ctr != 0);
}

//~~~Utils~~~//

void MPKCN4096T62::Invert(std::array<ulong, MPKC_M> &Output, const std::array<ulong, MPKC_M> &Input)
{
	std::array<ulong, MPKC_M> tmpa;
	std::array<ulong, MPKC_M> tmpb;

	MPKCUtils::Copy(Input, Output);
	Square(Output, Output);
	MPKCUtils::Multiply(tmpa, Output, Input);
	Square(Output, tmpa);
	Square(Output, Output);
	MPKCUtils::Multiply(tmpb, Output, tmpa);
	Square(Output, tmpb);
	Square(Output, Output);
	Square(Output, Output);
	Square(Output, Output);
	MPKCUtils::Multiply(Output, Output, tmpb);
	Square(Output, Output);
	Square(Output, Output);
	MPKCUtils::Multiply(Output, Output, tmpa);
	Square(Output, Output);
	MPKCUtils::Multiply(Output, Output, Input);
	Square(Output, Output);
}

void MPKCN4096T62::MatrixMultiply(std::array<ushort, MPKC_T> &Output, std::array<ushort, MPKC_T> &A, std::vector<ushort> &B)
{
	size_t i;
	size_t j;

	std::vector<ushort> tmp(123, 0);

	for (i = 0; i < 62; ++i)
	{
		for (j = 0; j < 62; ++j)
		{
			tmp[i + j] ^= MPKCUtils::Multiply(A[i], B[j], MPKC_M);
		}
	}

	for (i = 122; i >= 62; --i)
	{
		tmp[i - 55] ^= MPKCUtils::Multiply(tmp[i], 0x06E3U, MPKC_M);
		tmp[i - 61] ^= MPKCUtils::Multiply(tmp[i], 0x06BAU, MPKC_M);
		tmp[i - 62] ^= MPKCUtils::Multiply(tmp[i], 0x0FC1U, MPKC_M);
	}

	for (i = 0; i < 62; ++i) 
	{
		Output[i] = tmp[i];
	}
}

void MPKCN4096T62::Square(std::array<ulong, MPKC_M> &Output, std::array<ulong, MPKC_M> &Input)
{
	std::array<ulong, MPKC_M> sum;

	sum[0] = Input[0] ^ Input[6];
	sum[1] = Input[11];
	sum[2] = Input[1] ^ Input[7];
	sum[3] = Input[6];
	sum[4] = Input[2] ^ Input[11] ^ Input[8];
	sum[5] = Input[7];
	sum[6] = Input[3] ^ Input[9];
	sum[7] = Input[8];
	sum[8] = Input[4] ^ Input[10];
	sum[9] = Input[9];
	sum[10] = Input[5] ^ Input[11];
	sum[11] = Input[10];

	MemoryTools::Copy(sum, 0, Output, 0, MPKC_M * sizeof(ulong));
}

NAMESPACE_MCELIECEEND
