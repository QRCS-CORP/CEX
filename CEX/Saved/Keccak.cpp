#include "Keccak.h"

NAMESPACE_DIGEST

using Tools::IntegerTools;
using Tools::MemoryTools;

//~~~Round Constants~~~//

const std::array<ulong, 24> Keccak::KECCAK_RC24 =
{
	0x0000000000000001ULL, 0x0000000000008082ULL, 0x800000000000808AULL, 0x8000000080008000ULL,
	0x000000000000808BULL, 0x0000000080000001ULL, 0x8000000080008081ULL, 0x8000000000008009ULL,
	0x000000000000008AULL, 0x0000000000000088ULL, 0x0000000080008009ULL, 0x000000008000000AULL,
	0x000000008000808BULL, 0x800000000000008BULL, 0x8000000000008089ULL, 0x8000000000008003ULL,
	0x8000000000008002ULL, 0x8000000000000080ULL, 0x000000000000800AULL, 0x800000008000000AULL,
	0x8000000080008081ULL, 0x8000000000008080ULL, 0x0000000080000001ULL, 0x8000000080008008ULL
};

const std::array<ulong, 48> Keccak::KECCAK_RC48 =
{
	0x0000000000000001ULL, 0x0000000000008082ULL, 0x800000000000808AULL, 0x8000000080008000ULL,
	0x000000000000808BULL, 0x0000000080000001ULL, 0x8000000080008081ULL, 0x8000000000008009ULL,
	0x000000000000008AULL, 0x0000000000000088ULL, 0x0000000080008009ULL, 0x000000008000000AULL,
	0x000000008000808BULL, 0x800000000000008BULL, 0x8000000000008089ULL, 0x8000000000008003ULL,
	0x8000000000008002ULL, 0x8000000000000080ULL, 0x000000000000800AULL, 0x800000008000000AULL,
	0x8000000080008081ULL, 0x8000000000008080ULL, 0x0000000080000001ULL, 0x8000000080008008ULL,
	0x8000000080008082ULL, 0x800000008000800AULL, 0x8000000000000003ULL, 0x8000000080000009ULL,
	0x8000000000008082ULL, 0x0000000000008009ULL, 0x8000000000000080ULL, 0x0000000000008083ULL,
	0x8000000000000081ULL, 0x0000000000000001ULL, 0x000000000000800BULL, 0x8000000080008001ULL,
	0x0000000000000080ULL, 0x8000000000008000ULL, 0x8000000080008001ULL, 0x0000000000000009ULL,
	0x800000008000808BULL, 0x0000000000000081ULL, 0x8000000000000082ULL, 0x000000008000008BULL,
	0x8000000080008009ULL, 0x8000000080000000ULL, 0x0000000080000080ULL, 0x0000000080008003ULL
};

//~~~Public Functions~~~//

void Keccak::PermuteR24P1600C(std::array<ulong, 25> &State)
{
	std::array<ulong, 25> A;
	std::array<ulong, 5> C;
	std::array<ulong, 5> D;
	std::array<ulong, 25> E;
	size_t i;

	MemoryTools::Copy(State, 0, A, 0, A.size() * sizeof(ulong));

	for (i = 0; i < 24; i += 2)
	{
		// round n
		C[0] = A[0] ^ A[5] ^ A[10] ^ A[15] ^ A[20];
		C[1] = A[1] ^ A[6] ^ A[11] ^ A[16] ^ A[21];
		C[2] = A[2] ^ A[7] ^ A[12] ^ A[17] ^ A[22];
		C[3] = A[3] ^ A[8] ^ A[13] ^ A[18] ^ A[23];
		C[4] = A[4] ^ A[9] ^ A[14] ^ A[19] ^ A[24];
		D[0] = C[4] ^ IntegerTools::RotFL64(C[1], 1);
		D[1] = C[0] ^ IntegerTools::RotFL64(C[2], 1);
		D[2] = C[1] ^ IntegerTools::RotFL64(C[3], 1);
		D[3] = C[2] ^ IntegerTools::RotFL64(C[4], 1);
		D[4] = C[3] ^ IntegerTools::RotFL64(C[0], 1);
		A[0] ^= D[0];
		C[0] = A[0];
		A[6] ^= D[1];
		C[1] = IntegerTools::RotFL64(A[6], 44);
		A[12] ^= D[2];
		C[2] = IntegerTools::RotFL64(A[12], 43);
		A[18] ^= D[3];
		C[3] = IntegerTools::RotFL64(A[18], 21);
		A[24] ^= D[4];
		C[4] = IntegerTools::RotFL64(A[24], 14);
		E[0] = C[0] ^ ((~C[1]) & C[2]);
		E[0] ^= KECCAK_RC24[i];
		E[1] = C[1] ^ ((~C[2]) & C[3]);
		E[2] = C[2] ^ ((~C[3]) & C[4]);
		E[3] = C[3] ^ ((~C[4]) & C[0]);
		E[4] = C[4] ^ ((~C[0]) & C[1]);
		A[3] ^= D[3];
		C[0] = IntegerTools::RotFL64(A[3], 28);
		A[9] ^= D[4];
		C[1] = IntegerTools::RotFL64(A[9], 20);
		A[10] ^= D[0];
		C[2] = IntegerTools::RotFL64(A[10], 3);
		A[16] ^= D[1];
		C[3] = IntegerTools::RotFL64(A[16], 45);
		A[22] ^= D[2];
		C[4] = IntegerTools::RotFL64(A[22], 61);
		E[5] = C[0] ^ ((~C[1]) & C[2]);
		E[6] = C[1] ^ ((~C[2]) & C[3]);
		E[7] = C[2] ^ ((~C[3]) & C[4]);
		E[8] = C[3] ^ ((~C[4]) & C[0]);
		E[9] = C[4] ^ ((~C[0]) & C[1]);
		A[1] ^= D[1];
		C[0] = IntegerTools::RotFL64(A[1], 1);
		A[7] ^= D[2];
		C[1] = IntegerTools::RotFL64(A[7], 6);
		A[13] ^= D[3];
		C[2] = IntegerTools::RotFL64(A[13], 25);
		A[19] ^= D[4];
		C[3] = IntegerTools::RotFL64(A[19], 8);
		A[20] ^= D[0];
		C[4] = IntegerTools::RotFL64(A[20], 18);
		E[10] = C[0] ^ ((~C[1]) & C[2]);
		E[11] = C[1] ^ ((~C[2]) & C[3]);
		E[12] = C[2] ^ ((~C[3]) & C[4]);
		E[13] = C[3] ^ ((~C[4]) & C[0]);
		E[14] = C[4] ^ ((~C[0]) & C[1]);
		A[4] ^= D[4];
		C[0] = IntegerTools::RotFL64(A[4], 27);
		A[5] ^= D[0];
		C[1] = IntegerTools::RotFL64(A[5], 36);
		A[11] ^= D[1];
		C[2] = IntegerTools::RotFL64(A[11], 10);
		A[17] ^= D[2];
		C[3] = IntegerTools::RotFL64(A[17], 15);
		A[23] ^= D[3];
		C[4] = IntegerTools::RotFL64(A[23], 56);
		E[15] = C[0] ^ ((~C[1]) & C[2]);
		E[16] = C[1] ^ ((~C[2]) & C[3]);
		E[17] = C[2] ^ ((~C[3]) & C[4]);
		E[18] = C[3] ^ ((~C[4]) & C[0]);
		E[19] = C[4] ^ ((~C[0]) & C[1]);
		A[2] ^= D[2];
		C[0] = IntegerTools::RotFL64(A[2], 62);
		A[8] ^= D[3];
		C[1] = IntegerTools::RotFL64(A[8], 55);
		A[14] ^= D[4];
		C[2] = IntegerTools::RotFL64(A[14], 39);
		A[15] ^= D[0];
		C[3] = IntegerTools::RotFL64(A[15], 41);
		A[21] ^= D[1];
		C[4] = IntegerTools::RotFL64(A[21], 2);
		E[20] = C[0] ^ ((~C[1]) & C[2]);
		E[21] = C[1] ^ ((~C[2]) & C[3]);
		E[22] = C[2] ^ ((~C[3]) & C[4]);
		E[23] = C[3] ^ ((~C[4]) & C[0]);
		E[24] = C[4] ^ ((~C[0]) & C[1]);
		// round n + 1
		C[0] = E[0] ^ E[5] ^ E[10] ^ E[15] ^ E[20];
		C[1] = E[1] ^ E[6] ^ E[11] ^ E[16] ^ E[21];
		C[2] = E[2] ^ E[7] ^ E[12] ^ E[17] ^ E[22];
		C[3] = E[3] ^ E[8] ^ E[13] ^ E[18] ^ E[23];
		C[4] = E[4] ^ E[9] ^ E[14] ^ E[19] ^ E[24];
		D[0] = C[4] ^ IntegerTools::RotFL64(C[1], 1);
		D[1] = C[0] ^ IntegerTools::RotFL64(C[2], 1);
		D[2] = C[1] ^ IntegerTools::RotFL64(C[3], 1);
		D[3] = C[2] ^ IntegerTools::RotFL64(C[4], 1);
		D[4] = C[3] ^ IntegerTools::RotFL64(C[0], 1);
		E[0] ^= D[0];
		C[0] = E[0];
		E[6] ^= D[1];
		C[1] = IntegerTools::RotFL64(E[6], 44);
		E[12] ^= D[2];
		C[2] = IntegerTools::RotFL64(E[12], 43);
		E[18] ^= D[3];
		C[3] = IntegerTools::RotFL64(E[18], 21);
		E[24] ^= D[4];
		C[4] = IntegerTools::RotFL64(E[24], 14);
		A[0] = C[0] ^ ((~C[1]) & C[2]);
		A[0] ^= KECCAK_RC24[i + 1];
		A[1] = C[1] ^ ((~C[2]) & C[3]);
		A[2] = C[2] ^ ((~C[3]) & C[4]);
		A[3] = C[3] ^ ((~C[4]) & C[0]);
		A[4] = C[4] ^ ((~C[0]) & C[1]);
		E[3] ^= D[3];
		C[0] = IntegerTools::RotFL64(E[3], 28);
		E[9] ^= D[4];
		C[1] = IntegerTools::RotFL64(E[9], 20);
		E[10] ^= D[0];
		C[2] = IntegerTools::RotFL64(E[10], 3);
		E[16] ^= D[1];
		C[3] = IntegerTools::RotFL64(E[16], 45);
		E[22] ^= D[2];
		C[4] = IntegerTools::RotFL64(E[22], 61);
		A[5] = C[0] ^ ((~C[1]) & C[2]);
		A[6] = C[1] ^ ((~C[2]) & C[3]);
		A[7] = C[2] ^ ((~C[3]) & C[4]);
		A[8] = C[3] ^ ((~C[4]) & C[0]);
		A[9] = C[4] ^ ((~C[0]) & C[1]);
		E[1] ^= D[1];
		C[0] = IntegerTools::RotFL64(E[1], 1);
		E[7] ^= D[2];
		C[1] = IntegerTools::RotFL64(E[7], 6);
		E[13] ^= D[3];
		C[2] = IntegerTools::RotFL64(E[13], 25);
		E[19] ^= D[4];
		C[3] = IntegerTools::RotFL64(E[19], 8);
		E[20] ^= D[0];
		C[4] = IntegerTools::RotFL64(E[20], 18);
		A[10] = C[0] ^ ((~C[1]) & C[2]);
		A[11] = C[1] ^ ((~C[2]) & C[3]);
		A[12] = C[2] ^ ((~C[3]) & C[4]);
		A[13] = C[3] ^ ((~C[4]) & C[0]);
		A[14] = C[4] ^ ((~C[0]) & C[1]);
		E[4] ^= D[4];
		C[0] = IntegerTools::RotFL64(E[4], 27);
		E[5] ^= D[0];
		C[1] = IntegerTools::RotFL64(E[5], 36);
		E[11] ^= D[1];
		C[2] = IntegerTools::RotFL64(E[11], 10);
		E[17] ^= D[2];
		C[3] = IntegerTools::RotFL64(E[17], 15);
		E[23] ^= D[3];
		C[4] = IntegerTools::RotFL64(E[23], 56);
		A[15] = C[0] ^ ((~C[1]) & C[2]);
		A[16] = C[1] ^ ((~C[2]) & C[3]);
		A[17] = C[2] ^ ((~C[3]) & C[4]);
		A[18] = C[3] ^ ((~C[4]) & C[0]);
		A[19] = C[4] ^ ((~C[0]) & C[1]);
		E[2] ^= D[2];
		C[0] = IntegerTools::RotFL64(E[2], 62);
		E[8] ^= D[3];
		C[1] = IntegerTools::RotFL64(E[8], 55);
		E[14] ^= D[4];
		C[2] = IntegerTools::RotFL64(E[14], 39);
		E[15] ^= D[0];
		C[3] = IntegerTools::RotFL64(E[15], 41);
		E[21] ^= D[1];
		C[4] = IntegerTools::RotFL64(E[21], 2);
		A[20] = C[0] ^ ((~C[1]) & C[2]);
		A[21] = C[1] ^ ((~C[2]) & C[3]);
		A[22] = C[2] ^ ((~C[3]) & C[4]);
		A[23] = C[3] ^ ((~C[4]) & C[0]);
		A[24] = C[4] ^ ((~C[0]) & C[1]);
	}

	MemoryTools::Copy(A, 0, State, 0, A.size() * sizeof(ulong));
}

void Keccak::PermuteR24P1600U(std::array<ulong, 25> &State)
{
	ulong Aba;
	ulong Abe;
	ulong Abi;
	ulong Abo;
	ulong Abu;
	ulong Aga;
	ulong Age;
	ulong Agi;
	ulong Ago;
	ulong Agu;
	ulong Aka;
	ulong Ake;
	ulong Aki;
	ulong Ako;
	ulong Aku;
	ulong Ama;
	ulong Ame;
	ulong Ami;
	ulong Amo;
	ulong Amu;
	ulong Asa;
	ulong Ase;
	ulong Asi;
	ulong Aso;
	ulong Asu;
	ulong Ca;
	ulong Ce;
	ulong Ci;
	ulong Co;
	ulong Cu;
	ulong Da;
	ulong De;
	ulong Di;
	ulong Do;
	ulong Du;
	ulong Eba;
	ulong Ebe;
	ulong Ebi;
	ulong Ebo;
	ulong Ebu;
	ulong Ega;
	ulong Ege;
	ulong Egi;
	ulong Ego;
	ulong Egu;
	ulong Eka;
	ulong Eke;
	ulong Eki;
	ulong Eko;
	ulong Eku;
	ulong Ema;
	ulong Eme;
	ulong Emi;
	ulong Emo;
	ulong Emu;
	ulong Esa;
	ulong Ese;
	ulong Esi;
	ulong Eso;
	ulong Esu;

	Aba = State[0];
	Abe = State[1];
	Abi = State[2];
	Abo = State[3];
	Abu = State[4];
	Aga = State[5];
	Age = State[6];
	Agi = State[7];
	Ago = State[8];
	Agu = State[9];
	Aka = State[10];
	Ake = State[11];
	Aki = State[12];
	Ako = State[13];
	Aku = State[14];
	Ama = State[15];
	Ame = State[16];
	Ami = State[17];
	Amo = State[18];
	Amu = State[19];
	Asa = State[20];
	Ase = State[21];
	Asi = State[22];
	Aso = State[23];
	Asu = State[24];

	// round 1
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x0000000000000001ULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 2
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x0000000000008082ULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 3
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x800000000000808AULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 4
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x8000000080008000ULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 5
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x000000000000808BULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 6
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x0000000080000001ULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 7
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x8000000080008081ULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 8
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x8000000000008009ULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 9
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x000000000000008AULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 10
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x0000000000000088ULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 11
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x0000000080008009ULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 12
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x000000008000000AULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 13
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x000000008000808BULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 14
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x800000000000008BULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 15
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x8000000000008089ULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 16
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x8000000000008003ULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 17
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x8000000000008002ULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 18
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x8000000000000080ULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 19
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x000000000000800AULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 20
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x800000008000000AULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 21
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x8000000080008081ULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 22
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x8000000000008080ULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 23
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x0000000080000001ULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 24
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x8000000080008008ULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);

	State[0] = Aba;
	State[1] = Abe;
	State[2] = Abi;
	State[3] = Abo;
	State[4] = Abu;
	State[5] = Aga;
	State[6] = Age;
	State[7] = Agi;
	State[8] = Ago;
	State[9] = Agu;
	State[10] = Aka;
	State[11] = Ake;
	State[12] = Aki;
	State[13] = Ako;
	State[14] = Aku;
	State[15] = Ama;
	State[16] = Ame;
	State[17] = Ami;
	State[18] = Amo;
	State[19] = Amu;
	State[20] = Asa;
	State[21] = Ase;
	State[22] = Asi;
	State[23] = Aso;
	State[24] = Asu;
}

#if defined(__AVX2__)

void Keccak::PermuteR24P4x1600H(std::vector<ULong256> &State)
{
	std::array<ULong256, 25> A;
	std::array<ULong256, 5> C;
	std::array<ULong256, 5> D;
	std::array<ULong256, 25> E;
	size_t i;

	MemoryTools::Copy(State, 0, A, 0, A.size() * sizeof(ULong256));

	for (i = 0; i < 24; i += 2)
	{
		// round n
		C[0] = A[0] ^ A[5] ^ A[10] ^ A[15] ^ A[20];
		C[1] = A[1] ^ A[6] ^ A[11] ^ A[16] ^ A[21];
		C[2] = A[2] ^ A[7] ^ A[12] ^ A[17] ^ A[22];
		C[3] = A[3] ^ A[8] ^ A[13] ^ A[18] ^ A[23];
		C[4] = A[4] ^ A[9] ^ A[14] ^ A[19] ^ A[24];
		D[0] = C[4] ^ ULong256::RotL64(C[1], 1);
		D[1] = C[0] ^ ULong256::RotL64(C[2], 1);
		D[2] = C[1] ^ ULong256::RotL64(C[3], 1);
		D[3] = C[2] ^ ULong256::RotL64(C[4], 1);
		D[4] = C[3] ^ ULong256::RotL64(C[0], 1);
		A[0] ^= D[0];
		C[0] = A[0];
		A[6] ^= D[1];
		C[1] = ULong256::RotL64(A[6], 44);
		A[12] ^= D[2];
		C[2] = ULong256::RotL64(A[12], 43);
		A[18] ^= D[3];
		C[3] = ULong256::RotL64(A[18], 21);
		A[24] ^= D[4];
		C[4] = ULong256::RotL64(A[24], 14);
		E[0] = C[0] ^ ((~C[1]) & C[2]);
		E[0] ^= ULong256(KECCAK_RC24[i]);
		E[1] = C[1] ^ ((~C[2]) & C[3]);
		E[2] = C[2] ^ ((~C[3]) & C[4]);
		E[3] = C[3] ^ ((~C[4]) & C[0]);
		E[4] = C[4] ^ ((~C[0]) & C[1]);
		A[3] ^= D[3];
		C[0] = ULong256::RotL64(A[3], 28);
		A[9] ^= D[4];
		C[1] = ULong256::RotL64(A[9], 20);
		A[10] ^= D[0];
		C[2] = ULong256::RotL64(A[10], 3);
		A[16] ^= D[1];
		C[3] = ULong256::RotL64(A[16], 45);
		A[22] ^= D[2];
		C[4] = ULong256::RotL64(A[22], 61);
		E[5] = C[0] ^ ((~C[1]) & C[2]);
		E[6] = C[1] ^ ((~C[2]) & C[3]);
		E[7] = C[2] ^ ((~C[3]) & C[4]);
		E[8] = C[3] ^ ((~C[4]) & C[0]);
		E[9] = C[4] ^ ((~C[0]) & C[1]);
		A[1] ^= D[1];
		C[0] = ULong256::RotL64(A[1], 1);
		A[7] ^= D[2];
		C[1] = ULong256::RotL64(A[7], 6);
		A[13] ^= D[3];
		C[2] = ULong256::RotL64(A[13], 25);
		A[19] ^= D[4];
		C[3] = ULong256::RotL64(A[19], 8);
		A[20] ^= D[0];
		C[4] = ULong256::RotL64(A[20], 18);
		E[10] = C[0] ^ ((~C[1]) & C[2]);
		E[11] = C[1] ^ ((~C[2]) & C[3]);
		E[12] = C[2] ^ ((~C[3]) & C[4]);
		E[13] = C[3] ^ ((~C[4]) & C[0]);
		E[14] = C[4] ^ ((~C[0]) & C[1]);
		A[4] ^= D[4];
		C[0] = ULong256::RotL64(A[4], 27);
		A[5] ^= D[0];
		C[1] = ULong256::RotL64(A[5], 36);
		A[11] ^= D[1];
		C[2] = ULong256::RotL64(A[11], 10);
		A[17] ^= D[2];
		C[3] = ULong256::RotL64(A[17], 15);
		A[23] ^= D[3];
		C[4] = ULong256::RotL64(A[23], 56);
		E[15] = C[0] ^ ((~C[1]) & C[2]);
		E[16] = C[1] ^ ((~C[2]) & C[3]);
		E[17] = C[2] ^ ((~C[3]) & C[4]);
		E[18] = C[3] ^ ((~C[4]) & C[0]);
		E[19] = C[4] ^ ((~C[0]) & C[1]);
		A[2] ^= D[2];
		C[0] = ULong256::RotL64(A[2], 62);
		A[8] ^= D[3];
		C[1] = ULong256::RotL64(A[8], 55);
		A[14] ^= D[4];
		C[2] = ULong256::RotL64(A[14], 39);
		A[15] ^= D[0];
		C[3] = ULong256::RotL64(A[15], 41);
		A[21] ^= D[1];
		C[4] = ULong256::RotL64(A[21], 2);
		E[20] = C[0] ^ ((~C[1]) & C[2]);
		E[21] = C[1] ^ ((~C[2]) & C[3]);
		E[22] = C[2] ^ ((~C[3]) & C[4]);
		E[23] = C[3] ^ ((~C[4]) & C[0]);
		E[24] = C[4] ^ ((~C[0]) & C[1]);
		// round n + 1
		C[0] = E[0] ^ E[5] ^ E[10] ^ E[15] ^ E[20];
		C[1] = E[1] ^ E[6] ^ E[11] ^ E[16] ^ E[21];
		C[2] = E[2] ^ E[7] ^ E[12] ^ E[17] ^ E[22];
		C[3] = E[3] ^ E[8] ^ E[13] ^ E[18] ^ E[23];
		C[4] = E[4] ^ E[9] ^ E[14] ^ E[19] ^ E[24];
		D[0] = C[4] ^ ULong256::RotL64(C[1], 1);
		D[1] = C[0] ^ ULong256::RotL64(C[2], 1);
		D[2] = C[1] ^ ULong256::RotL64(C[3], 1);
		D[3] = C[2] ^ ULong256::RotL64(C[4], 1);
		D[4] = C[3] ^ ULong256::RotL64(C[0], 1);
		E[0] ^= D[0];
		C[0] = E[0];
		E[6] ^= D[1];
		C[1] = ULong256::RotL64(E[6], 44);
		E[12] ^= D[2];
		C[2] = ULong256::RotL64(E[12], 43);
		E[18] ^= D[3];
		C[3] = ULong256::RotL64(E[18], 21);
		E[24] ^= D[4];
		C[4] = ULong256::RotL64(E[24], 14);
		A[0] = C[0] ^ ((~C[1]) & C[2]);
		A[0] ^= ULong256(KECCAK_RC24[i + 1]);
		A[1] = C[1] ^ ((~C[2]) & C[3]);
		A[2] = C[2] ^ ((~C[3]) & C[4]);
		A[3] = C[3] ^ ((~C[4]) & C[0]);
		A[4] = C[4] ^ ((~C[0]) & C[1]);
		E[3] ^= D[3];
		C[0] = ULong256::RotL64(E[3], 28);
		E[9] ^= D[4];
		C[1] = ULong256::RotL64(E[9], 20);
		E[10] ^= D[0];
		C[2] = ULong256::RotL64(E[10], 3);
		E[16] ^= D[1];
		C[3] = ULong256::RotL64(E[16], 45);
		E[22] ^= D[2];
		C[4] = ULong256::RotL64(E[22], 61);
		A[5] = C[0] ^ ((~C[1]) & C[2]);
		A[6] = C[1] ^ ((~C[2]) & C[3]);
		A[7] = C[2] ^ ((~C[3]) & C[4]);
		A[8] = C[3] ^ ((~C[4]) & C[0]);
		A[9] = C[4] ^ ((~C[0]) & C[1]);
		E[1] ^= D[1];
		C[0] = ULong256::RotL64(E[1], 1);
		E[7] ^= D[2];
		C[1] = ULong256::RotL64(E[7], 6);
		E[13] ^= D[3];
		C[2] = ULong256::RotL64(E[13], 25);
		E[19] ^= D[4];
		C[3] = ULong256::RotL64(E[19], 8);
		E[20] ^= D[0];
		C[4] = ULong256::RotL64(E[20], 18);
		A[10] = C[0] ^ ((~C[1]) & C[2]);
		A[11] = C[1] ^ ((~C[2]) & C[3]);
		A[12] = C[2] ^ ((~C[3]) & C[4]);
		A[13] = C[3] ^ ((~C[4]) & C[0]);
		A[14] = C[4] ^ ((~C[0]) & C[1]);
		E[4] ^= D[4];
		C[0] = ULong256::RotL64(E[4], 27);
		E[5] ^= D[0];
		C[1] = ULong256::RotL64(E[5], 36);
		E[11] ^= D[1];
		C[2] = ULong256::RotL64(E[11], 10);
		E[17] ^= D[2];
		C[3] = ULong256::RotL64(E[17], 15);
		E[23] ^= D[3];
		C[4] = ULong256::RotL64(E[23], 56);
		A[15] = C[0] ^ ((~C[1]) & C[2]);
		A[16] = C[1] ^ ((~C[2]) & C[3]);
		A[17] = C[2] ^ ((~C[3]) & C[4]);
		A[18] = C[3] ^ ((~C[4]) & C[0]);
		A[19] = C[4] ^ ((~C[0]) & C[1]);
		E[2] ^= D[2];
		C[0] = ULong256::RotL64(E[2], 62);
		E[8] ^= D[3];
		C[1] = ULong256::RotL64(E[8], 55);
		E[14] ^= D[4];
		C[2] = ULong256::RotL64(E[14], 39);
		E[15] ^= D[0];
		C[3] = ULong256::RotL64(E[15], 41);
		E[21] ^= D[1];
		C[4] = ULong256::RotL64(E[21], 2);
		A[20] = C[0] ^ ((~C[1]) & C[2]);
		A[21] = C[1] ^ ((~C[2]) & C[3]);
		A[22] = C[2] ^ ((~C[3]) & C[4]);
		A[23] = C[3] ^ ((~C[4]) & C[0]);
		A[24] = C[4] ^ ((~C[0]) & C[1]);
	}

	MemoryTools::Copy(A, 0, State, 0, A.size() * sizeof(ULong256));
}

#endif

#if defined(__AVX512__)

void Keccak::PermuteR24P8x1600H(std::vector<ULong512> &State)
{
	std::array<ULong512, 25> A;
	std::array<ULong512, 5> C;
	std::array<ULong512, 5> D;
	std::array<ULong512, 25> E;
	size_t i;

	MemoryTools::Copy(State, 0, A, 0, A.size() * sizeof(ULong512));

	for (i = 0; i < 24; i += 2)
	{
		// round n
		C[0] = A[0] ^ A[5] ^ A[10] ^ A[15] ^ A[20];
		C[1] = A[1] ^ A[6] ^ A[11] ^ A[16] ^ A[21];
		C[2] = A[2] ^ A[7] ^ A[12] ^ A[17] ^ A[22];
		C[3] = A[3] ^ A[8] ^ A[13] ^ A[18] ^ A[23];
		C[4] = A[4] ^ A[9] ^ A[14] ^ A[19] ^ A[24];
		D[0] = C[4] ^ ULong512::RotL64(C[1], 1);
		D[1] = C[0] ^ ULong512::RotL64(C[2], 1);
		D[2] = C[1] ^ ULong512::RotL64(C[3], 1);
		D[3] = C[2] ^ ULong512::RotL64(C[4], 1);
		D[4] = C[3] ^ ULong512::RotL64(C[0], 1);
		A[0] ^= D[0];
		C[0] = A[0];
		A[6] ^= D[1];
		C[1] = ULong512::RotL64(A[6], 44);
		A[12] ^= D[2];
		C[2] = ULong512::RotL64(A[12], 43);
		A[18] ^= D[3];
		C[3] = ULong512::RotL64(A[18], 21);
		A[24] ^= D[4];
		C[4] = ULong512::RotL64(A[24], 14);
		E[0] = C[0] ^ ((~C[1]) & C[2]);
		E[0] ^= ULong512(KECCAK_RC24[i]);
		E[1] = C[1] ^ ((~C[2]) & C[3]);
		E[2] = C[2] ^ ((~C[3]) & C[4]);
		E[3] = C[3] ^ ((~C[4]) & C[0]);
		E[4] = C[4] ^ ((~C[0]) & C[1]);
		A[3] ^= D[3];
		C[0] = ULong512::RotL64(A[3], 28);
		A[9] ^= D[4];
		C[1] = ULong512::RotL64(A[9], 20);
		A[10] ^= D[0];
		C[2] = ULong512::RotL64(A[10], 3);
		A[16] ^= D[1];
		C[3] = ULong512::RotL64(A[16], 45);
		A[22] ^= D[2];
		C[4] = ULong512::RotL64(A[22], 61);
		E[5] = C[0] ^ ((~C[1]) & C[2]);
		E[6] = C[1] ^ ((~C[2]) & C[3]);
		E[7] = C[2] ^ ((~C[3]) & C[4]);
		E[8] = C[3] ^ ((~C[4]) & C[0]);
		E[9] = C[4] ^ ((~C[0]) & C[1]);
		A[1] ^= D[1];
		C[0] = ULong512::RotL64(A[1], 1);
		A[7] ^= D[2];
		C[1] = ULong512::RotL64(A[7], 6);
		A[13] ^= D[3];
		C[2] = ULong512::RotL64(A[13], 25);
		A[19] ^= D[4];
		C[3] = ULong512::RotL64(A[19], 8);
		A[20] ^= D[0];
		C[4] = ULong512::RotL64(A[20], 18);
		E[10] = C[0] ^ ((~C[1]) & C[2]);
		E[11] = C[1] ^ ((~C[2]) & C[3]);
		E[12] = C[2] ^ ((~C[3]) & C[4]);
		E[13] = C[3] ^ ((~C[4]) & C[0]);
		E[14] = C[4] ^ ((~C[0]) & C[1]);
		A[4] ^= D[4];
		C[0] = ULong512::RotL64(A[4], 27);
		A[5] ^= D[0];
		C[1] = ULong512::RotL64(A[5], 36);
		A[11] ^= D[1];
		C[2] = ULong512::RotL64(A[11], 10);
		A[17] ^= D[2];
		C[3] = ULong512::RotL64(A[17], 15);
		A[23] ^= D[3];
		C[4] = ULong512::RotL64(A[23], 56);
		E[15] = C[0] ^ ((~C[1]) & C[2]);
		E[16] = C[1] ^ ((~C[2]) & C[3]);
		E[17] = C[2] ^ ((~C[3]) & C[4]);
		E[18] = C[3] ^ ((~C[4]) & C[0]);
		E[19] = C[4] ^ ((~C[0]) & C[1]);
		A[2] ^= D[2];
		C[0] = ULong512::RotL64(A[2], 62);
		A[8] ^= D[3];
		C[1] = ULong512::RotL64(A[8], 55);
		A[14] ^= D[4];
		C[2] = ULong512::RotL64(A[14], 39);
		A[15] ^= D[0];
		C[3] = ULong512::RotL64(A[15], 41);
		A[21] ^= D[1];
		C[4] = ULong512::RotL64(A[21], 2);
		E[20] = C[0] ^ ((~C[1]) & C[2]);
		E[21] = C[1] ^ ((~C[2]) & C[3]);
		E[22] = C[2] ^ ((~C[3]) & C[4]);
		E[23] = C[3] ^ ((~C[4]) & C[0]);
		E[24] = C[4] ^ ((~C[0]) & C[1]);
		// round n + 1
		C[0] = E[0] ^ E[5] ^ E[10] ^ E[15] ^ E[20];
		C[1] = E[1] ^ E[6] ^ E[11] ^ E[16] ^ E[21];
		C[2] = E[2] ^ E[7] ^ E[12] ^ E[17] ^ E[22];
		C[3] = E[3] ^ E[8] ^ E[13] ^ E[18] ^ E[23];
		C[4] = E[4] ^ E[9] ^ E[14] ^ E[19] ^ E[24];
		D[0] = C[4] ^ ULong512::RotL64(C[1], 1);
		D[1] = C[0] ^ ULong512::RotL64(C[2], 1);
		D[2] = C[1] ^ ULong512::RotL64(C[3], 1);
		D[3] = C[2] ^ ULong512::RotL64(C[4], 1);
		D[4] = C[3] ^ ULong512::RotL64(C[0], 1);
		E[0] ^= D[0];
		C[0] = E[0];
		E[6] ^= D[1];
		C[1] = ULong512::RotL64(E[6], 44);
		E[12] ^= D[2];
		C[2] = ULong512::RotL64(E[12], 43);
		E[18] ^= D[3];
		C[3] = ULong512::RotL64(E[18], 21);
		E[24] ^= D[4];
		C[4] = ULong512::RotL64(E[24], 14);
		A[0] = C[0] ^ ((~C[1]) & C[2]);
		A[0] ^= ULong512(KECCAK_RC24[i + 1]);
		A[1] = C[1] ^ ((~C[2]) & C[3]);
		A[2] = C[2] ^ ((~C[3]) & C[4]);
		A[3] = C[3] ^ ((~C[4]) & C[0]);
		A[4] = C[4] ^ ((~C[0]) & C[1]);
		E[3] ^= D[3];
		C[0] = ULong512::RotL64(E[3], 28);
		E[9] ^= D[4];
		C[1] = ULong512::RotL64(E[9], 20);
		E[10] ^= D[0];
		C[2] = ULong512::RotL64(E[10], 3);
		E[16] ^= D[1];
		C[3] = ULong512::RotL64(E[16], 45);
		E[22] ^= D[2];
		C[4] = ULong512::RotL64(E[22], 61);
		A[5] = C[0] ^ ((~C[1]) & C[2]);
		A[6] = C[1] ^ ((~C[2]) & C[3]);
		A[7] = C[2] ^ ((~C[3]) & C[4]);
		A[8] = C[3] ^ ((~C[4]) & C[0]);
		A[9] = C[4] ^ ((~C[0]) & C[1]);
		E[1] ^= D[1];
		C[0] = ULong512::RotL64(E[1], 1);
		E[7] ^= D[2];
		C[1] = ULong512::RotL64(E[7], 6);
		E[13] ^= D[3];
		C[2] = ULong512::RotL64(E[13], 25);
		E[19] ^= D[4];
		C[3] = ULong512::RotL64(E[19], 8);
		E[20] ^= D[0];
		C[4] = ULong512::RotL64(E[20], 18);
		A[10] = C[0] ^ ((~C[1]) & C[2]);
		A[11] = C[1] ^ ((~C[2]) & C[3]);
		A[12] = C[2] ^ ((~C[3]) & C[4]);
		A[13] = C[3] ^ ((~C[4]) & C[0]);
		A[14] = C[4] ^ ((~C[0]) & C[1]);
		E[4] ^= D[4];
		C[0] = ULong512::RotL64(E[4], 27);
		E[5] ^= D[0];
		C[1] = ULong512::RotL64(E[5], 36);
		E[11] ^= D[1];
		C[2] = ULong512::RotL64(E[11], 10);
		E[17] ^= D[2];
		C[3] = ULong512::RotL64(E[17], 15);
		E[23] ^= D[3];
		C[4] = ULong512::RotL64(E[23], 56);
		A[15] = C[0] ^ ((~C[1]) & C[2]);
		A[16] = C[1] ^ ((~C[2]) & C[3]);
		A[17] = C[2] ^ ((~C[3]) & C[4]);
		A[18] = C[3] ^ ((~C[4]) & C[0]);
		A[19] = C[4] ^ ((~C[0]) & C[1]);
		E[2] ^= D[2];
		C[0] = ULong512::RotL64(E[2], 62);
		E[8] ^= D[3];
		C[1] = ULong512::RotL64(E[8], 55);
		E[14] ^= D[4];
		C[2] = ULong512::RotL64(E[14], 39);
		E[15] ^= D[0];
		C[3] = ULong512::RotL64(E[15], 41);
		E[21] ^= D[1];
		C[4] = ULong512::RotL64(E[21], 2);
		A[20] = C[0] ^ ((~C[1]) & C[2]);
		A[21] = C[1] ^ ((~C[2]) & C[3]);
		A[22] = C[2] ^ ((~C[3]) & C[4]);
		A[23] = C[3] ^ ((~C[4]) & C[0]);
		A[24] = C[4] ^ ((~C[0]) & C[1]);
	}

	MemoryTools::Copy(A, 0, State, 0, A.size() * sizeof(ULong512));
}

#endif

void Keccak::PermuteR48P1600C(std::array<ulong, 25> &State)
{
	std::array<ulong, 25> A;
	std::array<ulong, 5> C;
	std::array<ulong, 5> D;
	std::array<ulong, 25> E;
	size_t i;

	MemoryTools::Copy(State, 0, A, 0, A.size() * sizeof(ulong));

	for (i = 0; i < 48; i += 2)
	{
		// round n
		C[0] = A[0] ^ A[5] ^ A[10] ^ A[15] ^ A[20];
		C[1] = A[1] ^ A[6] ^ A[11] ^ A[16] ^ A[21];
		C[2] = A[2] ^ A[7] ^ A[12] ^ A[17] ^ A[22];
		C[3] = A[3] ^ A[8] ^ A[13] ^ A[18] ^ A[23];
		C[4] = A[4] ^ A[9] ^ A[14] ^ A[19] ^ A[24];
		D[0] = C[4] ^ IntegerTools::RotFL64(C[1], 1);
		D[1] = C[0] ^ IntegerTools::RotFL64(C[2], 1);
		D[2] = C[1] ^ IntegerTools::RotFL64(C[3], 1);
		D[3] = C[2] ^ IntegerTools::RotFL64(C[4], 1);
		D[4] = C[3] ^ IntegerTools::RotFL64(C[0], 1);
		A[0] ^= D[0];
		C[0] = A[0];
		A[6] ^= D[1];
		C[1] = IntegerTools::RotFL64(A[6], 44);
		A[12] ^= D[2];
		C[2] = IntegerTools::RotFL64(A[12], 43);
		A[18] ^= D[3];
		C[3] = IntegerTools::RotFL64(A[18], 21);
		A[24] ^= D[4];
		C[4] = IntegerTools::RotFL64(A[24], 14);
		E[0] = C[0] ^ ((~C[1]) & C[2]);
		E[0] ^= KECCAK_RC48[i];
		E[1] = C[1] ^ ((~C[2]) & C[3]);
		E[2] = C[2] ^ ((~C[3]) & C[4]);
		E[3] = C[3] ^ ((~C[4]) & C[0]);
		E[4] = C[4] ^ ((~C[0]) & C[1]);
		A[3] ^= D[3];
		C[0] = IntegerTools::RotFL64(A[3], 28);
		A[9] ^= D[4];
		C[1] = IntegerTools::RotFL64(A[9], 20);
		A[10] ^= D[0];
		C[2] = IntegerTools::RotFL64(A[10], 3);
		A[16] ^= D[1];
		C[3] = IntegerTools::RotFL64(A[16], 45);
		A[22] ^= D[2];
		C[4] = IntegerTools::RotFL64(A[22], 61);
		E[5] = C[0] ^ ((~C[1]) & C[2]);
		E[6] = C[1] ^ ((~C[2]) & C[3]);
		E[7] = C[2] ^ ((~C[3]) & C[4]);
		E[8] = C[3] ^ ((~C[4]) & C[0]);
		E[9] = C[4] ^ ((~C[0]) & C[1]);
		A[1] ^= D[1];
		C[0] = IntegerTools::RotFL64(A[1], 1);
		A[7] ^= D[2];
		C[1] = IntegerTools::RotFL64(A[7], 6);
		A[13] ^= D[3];
		C[2] = IntegerTools::RotFL64(A[13], 25);
		A[19] ^= D[4];
		C[3] = IntegerTools::RotFL64(A[19], 8);
		A[20] ^= D[0];
		C[4] = IntegerTools::RotFL64(A[20], 18);
		E[10] = C[0] ^ ((~C[1]) & C[2]);
		E[11] = C[1] ^ ((~C[2]) & C[3]);
		E[12] = C[2] ^ ((~C[3]) & C[4]);
		E[13] = C[3] ^ ((~C[4]) & C[0]);
		E[14] = C[4] ^ ((~C[0]) & C[1]);
		A[4] ^= D[4];
		C[0] = IntegerTools::RotFL64(A[4], 27);
		A[5] ^= D[0];
		C[1] = IntegerTools::RotFL64(A[5], 36);
		A[11] ^= D[1];
		C[2] = IntegerTools::RotFL64(A[11], 10);
		A[17] ^= D[2];
		C[3] = IntegerTools::RotFL64(A[17], 15);
		A[23] ^= D[3];
		C[4] = IntegerTools::RotFL64(A[23], 56);
		E[15] = C[0] ^ ((~C[1]) & C[2]);
		E[16] = C[1] ^ ((~C[2]) & C[3]);
		E[17] = C[2] ^ ((~C[3]) & C[4]);
		E[18] = C[3] ^ ((~C[4]) & C[0]);
		E[19] = C[4] ^ ((~C[0]) & C[1]);
		A[2] ^= D[2];
		C[0] = IntegerTools::RotFL64(A[2], 62);
		A[8] ^= D[3];
		C[1] = IntegerTools::RotFL64(A[8], 55);
		A[14] ^= D[4];
		C[2] = IntegerTools::RotFL64(A[14], 39);
		A[15] ^= D[0];
		C[3] = IntegerTools::RotFL64(A[15], 41);
		A[21] ^= D[1];
		C[4] = IntegerTools::RotFL64(A[21], 2);
		E[20] = C[0] ^ ((~C[1]) & C[2]);
		E[21] = C[1] ^ ((~C[2]) & C[3]);
		E[22] = C[2] ^ ((~C[3]) & C[4]);
		E[23] = C[3] ^ ((~C[4]) & C[0]);
		E[24] = C[4] ^ ((~C[0]) & C[1]);
		// round n + 1
		C[0] = E[0] ^ E[5] ^ E[10] ^ E[15] ^ E[20];
		C[1] = E[1] ^ E[6] ^ E[11] ^ E[16] ^ E[21];
		C[2] = E[2] ^ E[7] ^ E[12] ^ E[17] ^ E[22];
		C[3] = E[3] ^ E[8] ^ E[13] ^ E[18] ^ E[23];
		C[4] = E[4] ^ E[9] ^ E[14] ^ E[19] ^ E[24];
		D[0] = C[4] ^ IntegerTools::RotFL64(C[1], 1);
		D[1] = C[0] ^ IntegerTools::RotFL64(C[2], 1);
		D[2] = C[1] ^ IntegerTools::RotFL64(C[3], 1);
		D[3] = C[2] ^ IntegerTools::RotFL64(C[4], 1);
		D[4] = C[3] ^ IntegerTools::RotFL64(C[0], 1);
		E[0] ^= D[0];
		C[0] = E[0];
		E[6] ^= D[1];
		C[1] = IntegerTools::RotFL64(E[6], 44);
		E[12] ^= D[2];
		C[2] = IntegerTools::RotFL64(E[12], 43);
		E[18] ^= D[3];
		C[3] = IntegerTools::RotFL64(E[18], 21);
		E[24] ^= D[4];
		C[4] = IntegerTools::RotFL64(E[24], 14);
		A[0] = C[0] ^ ((~C[1]) & C[2]);
		A[0] ^= KECCAK_RC48[i + 1];
		A[1] = C[1] ^ ((~C[2]) & C[3]);
		A[2] = C[2] ^ ((~C[3]) & C[4]);
		A[3] = C[3] ^ ((~C[4]) & C[0]);
		A[4] = C[4] ^ ((~C[0]) & C[1]);
		E[3] ^= D[3];
		C[0] = IntegerTools::RotFL64(E[3], 28);
		E[9] ^= D[4];
		C[1] = IntegerTools::RotFL64(E[9], 20);
		E[10] ^= D[0];
		C[2] = IntegerTools::RotFL64(E[10], 3);
		E[16] ^= D[1];
		C[3] = IntegerTools::RotFL64(E[16], 45);
		E[22] ^= D[2];
		C[4] = IntegerTools::RotFL64(E[22], 61);
		A[5] = C[0] ^ ((~C[1]) & C[2]);
		A[6] = C[1] ^ ((~C[2]) & C[3]);
		A[7] = C[2] ^ ((~C[3]) & C[4]);
		A[8] = C[3] ^ ((~C[4]) & C[0]);
		A[9] = C[4] ^ ((~C[0]) & C[1]);
		E[1] ^= D[1];
		C[0] = IntegerTools::RotFL64(E[1], 1);
		E[7] ^= D[2];
		C[1] = IntegerTools::RotFL64(E[7], 6);
		E[13] ^= D[3];
		C[2] = IntegerTools::RotFL64(E[13], 25);
		E[19] ^= D[4];
		C[3] = IntegerTools::RotFL64(E[19], 8);
		E[20] ^= D[0];
		C[4] = IntegerTools::RotFL64(E[20], 18);
		A[10] = C[0] ^ ((~C[1]) & C[2]);
		A[11] = C[1] ^ ((~C[2]) & C[3]);
		A[12] = C[2] ^ ((~C[3]) & C[4]);
		A[13] = C[3] ^ ((~C[4]) & C[0]);
		A[14] = C[4] ^ ((~C[0]) & C[1]);
		E[4] ^= D[4];
		C[0] = IntegerTools::RotFL64(E[4], 27);
		E[5] ^= D[0];
		C[1] = IntegerTools::RotFL64(E[5], 36);
		E[11] ^= D[1];
		C[2] = IntegerTools::RotFL64(E[11], 10);
		E[17] ^= D[2];
		C[3] = IntegerTools::RotFL64(E[17], 15);
		E[23] ^= D[3];
		C[4] = IntegerTools::RotFL64(E[23], 56);
		A[15] = C[0] ^ ((~C[1]) & C[2]);
		A[16] = C[1] ^ ((~C[2]) & C[3]);
		A[17] = C[2] ^ ((~C[3]) & C[4]);
		A[18] = C[3] ^ ((~C[4]) & C[0]);
		A[19] = C[4] ^ ((~C[0]) & C[1]);
		E[2] ^= D[2];
		C[0] = IntegerTools::RotFL64(E[2], 62);
		E[8] ^= D[3];
		C[1] = IntegerTools::RotFL64(E[8], 55);
		E[14] ^= D[4];
		C[2] = IntegerTools::RotFL64(E[14], 39);
		E[15] ^= D[0];
		C[3] = IntegerTools::RotFL64(E[15], 41);
		E[21] ^= D[1];
		C[4] = IntegerTools::RotFL64(E[21], 2);
		A[20] = C[0] ^ ((~C[1]) & C[2]);
		A[21] = C[1] ^ ((~C[2]) & C[3]);
		A[22] = C[2] ^ ((~C[3]) & C[4]);
		A[23] = C[3] ^ ((~C[4]) & C[0]);
		A[24] = C[4] ^ ((~C[0]) & C[1]);
	}

	MemoryTools::Copy(A, 0, State, 0, A.size() * sizeof(ulong));
}

void Keccak::PermuteR48P1600U(std::array<ulong, 25> &State)
{
	ulong Aba;
	ulong Abe;
	ulong Abi;
	ulong Abo;
	ulong Abu;
	ulong Aga;
	ulong Age;
	ulong Agi;
	ulong Ago;
	ulong Agu;
	ulong Aka;
	ulong Ake;
	ulong Aki;
	ulong Ako;
	ulong Aku;
	ulong Ama;
	ulong Ame;
	ulong Ami;
	ulong Amo;
	ulong Amu;
	ulong Asa;
	ulong Ase;
	ulong Asi;
	ulong Aso;
	ulong Asu;
	ulong Ca;
	ulong Ce;
	ulong Ci;
	ulong Co;
	ulong Cu;
	ulong Da;
	ulong De;
	ulong Di;
	ulong Do;
	ulong Du;
	ulong Eba;
	ulong Ebe;
	ulong Ebi;
	ulong Ebo;
	ulong Ebu;
	ulong Ega;
	ulong Ege;
	ulong Egi;
	ulong Ego;
	ulong Egu;
	ulong Eka;
	ulong Eke;
	ulong Eki;
	ulong Eko;
	ulong Eku;
	ulong Ema;
	ulong Eme;
	ulong Emi;
	ulong Emo;
	ulong Emu;
	ulong Esa;
	ulong Ese;
	ulong Esi;
	ulong Eso;
	ulong Esu;

	Aba = State[0];
	Abe = State[1];
	Abi = State[2];
	Abo = State[3];
	Abu = State[4];
	Aga = State[5];
	Age = State[6];
	Agi = State[7];
	Ago = State[8];
	Agu = State[9];
	Aka = State[10];
	Ake = State[11];
	Aki = State[12];
	Ako = State[13];
	Aku = State[14];
	Ama = State[15];
	Ame = State[16];
	Ami = State[17];
	Amo = State[18];
	Amu = State[19];
	Asa = State[20];
	Ase = State[21];
	Asi = State[22];
	Aso = State[23];
	Asu = State[24];

	// round 1
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x0000000000000001ULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 2
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x0000000000008082ULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 3
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x800000000000808AULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 4
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x8000000080008000ULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 5
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x000000000000808BULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 6
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x0000000080000001ULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 7
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x8000000080008081ULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 8
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x8000000000008009ULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 9
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x000000000000008AULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 10
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x0000000000000088ULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 11
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x0000000080008009ULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 12
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x000000008000000AULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 13
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x000000008000808BULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 14
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x800000000000008BULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 15
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x8000000000008089ULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 16
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x8000000000008003ULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 17
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x8000000000008002ULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 18
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x8000000000000080ULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 19
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x000000000000800AULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 20
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x800000008000000AULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 21
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x8000000080008081ULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 22
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x8000000000008080ULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 23
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x0000000080000001ULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 24
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x8000000080008008ULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 25
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x8000000080008082ULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 26
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x800000008000800AULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 27
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x8000000000000003ULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 28
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x8000000080000009ULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 29
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x8000000000008082ULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 30
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x0000000000008009ULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 31
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x8000000000000080ULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 32
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x0000000000008083ULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 33
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x8000000000000081ULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 34
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x0000000000000001ULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 35
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x000000000000800BULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 36
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x8000000080008001ULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 37
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x0000000000000080ULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 38
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x8000000000008000ULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 39
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x8000000080008001ULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 40
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x0000000000000009ULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 41
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x800000008000808BULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 42
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x0000000000000081ULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 43
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x8000000000000082ULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 44
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x000000008000008BULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 45
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x8000000080008009ULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 46
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x8000000080000000ULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);
	// round 47
	Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
	Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
	Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
	Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
	Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Aba ^= Da;
	Ca = Aba;
	Age ^= De;
	Ce = IntegerTools::RotFL64(Age, 44);
	Aki ^= Di;
	Ci = IntegerTools::RotFL64(Aki, 43);
	Amo ^= Do;
	Co = IntegerTools::RotFL64(Amo, 21);
	Asu ^= Du;
	Cu = IntegerTools::RotFL64(Asu, 14);
	Eba = Ca ^ ((~Ce) & Ci);
	Eba ^= 0x0000000080000080ULL;
	Ebe = Ce ^ ((~Ci) & Co);
	Ebi = Ci ^ ((~Co) & Cu);
	Ebo = Co ^ ((~Cu) & Ca);
	Ebu = Cu ^ ((~Ca) & Ce);
	Abo ^= Do;
	Ca = IntegerTools::RotFL64(Abo, 28);
	Agu ^= Du;
	Ce = IntegerTools::RotFL64(Agu, 20);
	Aka ^= Da;
	Ci = IntegerTools::RotFL64(Aka, 3);
	Ame ^= De;
	Co = IntegerTools::RotFL64(Ame, 45);
	Asi ^= Di;
	Cu = IntegerTools::RotFL64(Asi, 61);
	Ega = Ca ^ ((~Ce) & Ci);
	Ege = Ce ^ ((~Ci) & Co);
	Egi = Ci ^ ((~Co) & Cu);
	Ego = Co ^ ((~Cu) & Ca);
	Egu = Cu ^ ((~Ca) & Ce);
	Abe ^= De;
	Ca = IntegerTools::RotFL64(Abe, 1);
	Agi ^= Di;
	Ce = IntegerTools::RotFL64(Agi, 6);
	Ako ^= Do;
	Ci = IntegerTools::RotFL64(Ako, 25);
	Amu ^= Du;
	Co = IntegerTools::RotFL64(Amu, 8);
	Asa ^= Da;
	Cu = IntegerTools::RotFL64(Asa, 18);
	Eka = Ca ^ ((~Ce) & Ci);
	Eke = Ce ^ ((~Ci) & Co);
	Eki = Ci ^ ((~Co) & Cu);
	Eko = Co ^ ((~Cu) & Ca);
	Eku = Cu ^ ((~Ca) & Ce);
	Abu ^= Du;
	Ca = IntegerTools::RotFL64(Abu, 27);
	Aga ^= Da;
	Ce = IntegerTools::RotFL64(Aga, 36);
	Ake ^= De;
	Ci = IntegerTools::RotFL64(Ake, 10);
	Ami ^= Di;
	Co = IntegerTools::RotFL64(Ami, 15);
	Aso ^= Do;
	Cu = IntegerTools::RotFL64(Aso, 56);
	Ema = Ca ^ ((~Ce) & Ci);
	Eme = Ce ^ ((~Ci) & Co);
	Emi = Ci ^ ((~Co) & Cu);
	Emo = Co ^ ((~Cu) & Ca);
	Emu = Cu ^ ((~Ca) & Ce);
	Abi ^= Di;
	Ca = IntegerTools::RotFL64(Abi, 62);
	Ago ^= Do;
	Ce = IntegerTools::RotFL64(Ago, 55);
	Aku ^= Du;
	Ci = IntegerTools::RotFL64(Aku, 39);
	Ama ^= Da;
	Co = IntegerTools::RotFL64(Ama, 41);
	Ase ^= De;
	Cu = IntegerTools::RotFL64(Ase, 2);
	Esa = Ca ^ ((~Ce) & Ci);
	Ese = Ce ^ ((~Ci) & Co);
	Esi = Ci ^ ((~Co) & Cu);
	Eso = Co ^ ((~Cu) & Ca);
	Esu = Cu ^ ((~Ca) & Ce);
	// round 48
	Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
	Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
	Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
	Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
	Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
	Da = Cu ^ IntegerTools::RotFL64(Ce, 1);
	De = Ca ^ IntegerTools::RotFL64(Ci, 1);
	Di = Ce ^ IntegerTools::RotFL64(Co, 1);
	Do = Ci ^ IntegerTools::RotFL64(Cu, 1);
	Du = Co ^ IntegerTools::RotFL64(Ca, 1);
	Eba ^= Da;
	Ca = Eba;
	Ege ^= De;
	Ce = IntegerTools::RotFL64(Ege, 44);
	Eki ^= Di;
	Ci = IntegerTools::RotFL64(Eki, 43);
	Emo ^= Do;
	Co = IntegerTools::RotFL64(Emo, 21);
	Esu ^= Du;
	Cu = IntegerTools::RotFL64(Esu, 14);
	Aba = Ca ^ ((~Ce) & Ci);
	Aba ^= 0x0000000080008003ULL;
	Abe = Ce ^ ((~Ci) & Co);
	Abi = Ci ^ ((~Co) & Cu);
	Abo = Co ^ ((~Cu) & Ca);
	Abu = Cu ^ ((~Ca) & Ce);
	Ebo ^= Do;
	Ca = IntegerTools::RotFL64(Ebo, 28);
	Egu ^= Du;
	Ce = IntegerTools::RotFL64(Egu, 20);
	Eka ^= Da;
	Ci = IntegerTools::RotFL64(Eka, 3);
	Eme ^= De;
	Co = IntegerTools::RotFL64(Eme, 45);
	Esi ^= Di;
	Cu = IntegerTools::RotFL64(Esi, 61);
	Aga = Ca ^ ((~Ce) & Ci);
	Age = Ce ^ ((~Ci) & Co);
	Agi = Ci ^ ((~Co) & Cu);
	Ago = Co ^ ((~Cu) & Ca);
	Agu = Cu ^ ((~Ca) & Ce);
	Ebe ^= De;
	Ca = IntegerTools::RotFL64(Ebe, 1);
	Egi ^= Di;
	Ce = IntegerTools::RotFL64(Egi, 6);
	Eko ^= Do;
	Ci = IntegerTools::RotFL64(Eko, 25);
	Emu ^= Du;
	Co = IntegerTools::RotFL64(Emu, 8);
	Esa ^= Da;
	Cu = IntegerTools::RotFL64(Esa, 18);
	Aka = Ca ^ ((~Ce) & Ci);
	Ake = Ce ^ ((~Ci) & Co);
	Aki = Ci ^ ((~Co) & Cu);
	Ako = Co ^ ((~Cu) & Ca);
	Aku = Cu ^ ((~Ca) & Ce);
	Ebu ^= Du;
	Ca = IntegerTools::RotFL64(Ebu, 27);
	Ega ^= Da;
	Ce = IntegerTools::RotFL64(Ega, 36);
	Eke ^= De;
	Ci = IntegerTools::RotFL64(Eke, 10);
	Emi ^= Di;
	Co = IntegerTools::RotFL64(Emi, 15);
	Eso ^= Do;
	Cu = IntegerTools::RotFL64(Eso, 56);
	Ama = Ca ^ ((~Ce) & Ci);
	Ame = Ce ^ ((~Ci) & Co);
	Ami = Ci ^ ((~Co) & Cu);
	Amo = Co ^ ((~Cu) & Ca);
	Amu = Cu ^ ((~Ca) & Ce);
	Ebi ^= Di;
	Ca = IntegerTools::RotFL64(Ebi, 62);
	Ego ^= Do;
	Ce = IntegerTools::RotFL64(Ego, 55);
	Eku ^= Du;
	Ci = IntegerTools::RotFL64(Eku, 39);
	Ema ^= Da;
	Co = IntegerTools::RotFL64(Ema, 41);
	Ese ^= De;
	Cu = IntegerTools::RotFL64(Ese, 2);
	Asa = Ca ^ ((~Ce) & Ci);
	Ase = Ce ^ ((~Ci) & Co);
	Asi = Ci ^ ((~Co) & Cu);
	Aso = Co ^ ((~Cu) & Ca);
	Asu = Cu ^ ((~Ca) & Ce);

	State[0] = Aba;
	State[1] = Abe;
	State[2] = Abi;
	State[3] = Abo;
	State[4] = Abu;
	State[5] = Aga;
	State[6] = Age;
	State[7] = Agi;
	State[8] = Ago;
	State[9] = Agu;
	State[10] = Aka;
	State[11] = Ake;
	State[12] = Aki;
	State[13] = Ako;
	State[14] = Aku;
	State[15] = Ama;
	State[16] = Ame;
	State[17] = Ami;
	State[18] = Amo;
	State[19] = Amu;
	State[20] = Asa;
	State[21] = Ase;
	State[22] = Asi;
	State[23] = Aso;
	State[24] = Asu;
}

#if defined(__AVX2__)

void Keccak::PermuteR48P4x1600H(std::vector<ULong256> &State)
{
	std::array<ULong256, 25> A;
	std::array<ULong256, 5> C;
	std::array<ULong256, 5> D;
	std::array<ULong256, 25> E;
	size_t i;

	MemoryTools::Copy(State, 0, A, 0, A.size() * sizeof(ULong256));

	for (i = 0; i < 48; i += 2)
	{
		// round n
		C[0] = A[0] ^ A[5] ^ A[10] ^ A[15] ^ A[20];
		C[1] = A[1] ^ A[6] ^ A[11] ^ A[16] ^ A[21];
		C[2] = A[2] ^ A[7] ^ A[12] ^ A[17] ^ A[22];
		C[3] = A[3] ^ A[8] ^ A[13] ^ A[18] ^ A[23];
		C[4] = A[4] ^ A[9] ^ A[14] ^ A[19] ^ A[24];
		D[0] = C[4] ^ ULong256::RotL64(C[1], 1);
		D[1] = C[0] ^ ULong256::RotL64(C[2], 1);
		D[2] = C[1] ^ ULong256::RotL64(C[3], 1);
		D[3] = C[2] ^ ULong256::RotL64(C[4], 1);
		D[4] = C[3] ^ ULong256::RotL64(C[0], 1);
		A[0] ^= D[0];
		C[0] = A[0];
		A[6] ^= D[1];
		C[1] = ULong256::RotL64(A[6], 44);
		A[12] ^= D[2];
		C[2] = ULong256::RotL64(A[12], 43);
		A[18] ^= D[3];
		C[3] = ULong256::RotL64(A[18], 21);
		A[24] ^= D[4];
		C[4] = ULong256::RotL64(A[24], 14);
		E[0] = C[0] ^ ((~C[1]) & C[2]);
		E[0] ^= ULong256(KECCAK_RC48[i]);
		E[1] = C[1] ^ ((~C[2]) & C[3]);
		E[2] = C[2] ^ ((~C[3]) & C[4]);
		E[3] = C[3] ^ ((~C[4]) & C[0]);
		E[4] = C[4] ^ ((~C[0]) & C[1]);
		A[3] ^= D[3];
		C[0] = ULong256::RotL64(A[3], 28);
		A[9] ^= D[4];
		C[1] = ULong256::RotL64(A[9], 20);
		A[10] ^= D[0];
		C[2] = ULong256::RotL64(A[10], 3);
		A[16] ^= D[1];
		C[3] = ULong256::RotL64(A[16], 45);
		A[22] ^= D[2];
		C[4] = ULong256::RotL64(A[22], 61);
		E[5] = C[0] ^ ((~C[1]) & C[2]);
		E[6] = C[1] ^ ((~C[2]) & C[3]);
		E[7] = C[2] ^ ((~C[3]) & C[4]);
		E[8] = C[3] ^ ((~C[4]) & C[0]);
		E[9] = C[4] ^ ((~C[0]) & C[1]);
		A[1] ^= D[1];
		C[0] = ULong256::RotL64(A[1], 1);
		A[7] ^= D[2];
		C[1] = ULong256::RotL64(A[7], 6);
		A[13] ^= D[3];
		C[2] = ULong256::RotL64(A[13], 25);
		A[19] ^= D[4];
		C[3] = ULong256::RotL64(A[19], 8);
		A[20] ^= D[0];
		C[4] = ULong256::RotL64(A[20], 18);
		E[10] = C[0] ^ ((~C[1]) & C[2]);
		E[11] = C[1] ^ ((~C[2]) & C[3]);
		E[12] = C[2] ^ ((~C[3]) & C[4]);
		E[13] = C[3] ^ ((~C[4]) & C[0]);
		E[14] = C[4] ^ ((~C[0]) & C[1]);
		A[4] ^= D[4];
		C[0] = ULong256::RotL64(A[4], 27);
		A[5] ^= D[0];
		C[1] = ULong256::RotL64(A[5], 36);
		A[11] ^= D[1];
		C[2] = ULong256::RotL64(A[11], 10);
		A[17] ^= D[2];
		C[3] = ULong256::RotL64(A[17], 15);
		A[23] ^= D[3];
		C[4] = ULong256::RotL64(A[23], 56);
		E[15] = C[0] ^ ((~C[1]) & C[2]);
		E[16] = C[1] ^ ((~C[2]) & C[3]);
		E[17] = C[2] ^ ((~C[3]) & C[4]);
		E[18] = C[3] ^ ((~C[4]) & C[0]);
		E[19] = C[4] ^ ((~C[0]) & C[1]);
		A[2] ^= D[2];
		C[0] = ULong256::RotL64(A[2], 62);
		A[8] ^= D[3];
		C[1] = ULong256::RotL64(A[8], 55);
		A[14] ^= D[4];
		C[2] = ULong256::RotL64(A[14], 39);
		A[15] ^= D[0];
		C[3] = ULong256::RotL64(A[15], 41);
		A[21] ^= D[1];
		C[4] = ULong256::RotL64(A[21], 2);
		E[20] = C[0] ^ ((~C[1]) & C[2]);
		E[21] = C[1] ^ ((~C[2]) & C[3]);
		E[22] = C[2] ^ ((~C[3]) & C[4]);
		E[23] = C[3] ^ ((~C[4]) & C[0]);
		E[24] = C[4] ^ ((~C[0]) & C[1]);
		// round n + 1
		C[0] = E[0] ^ E[5] ^ E[10] ^ E[15] ^ E[20];
		C[1] = E[1] ^ E[6] ^ E[11] ^ E[16] ^ E[21];
		C[2] = E[2] ^ E[7] ^ E[12] ^ E[17] ^ E[22];
		C[3] = E[3] ^ E[8] ^ E[13] ^ E[18] ^ E[23];
		C[4] = E[4] ^ E[9] ^ E[14] ^ E[19] ^ E[24];
		D[0] = C[4] ^ ULong256::RotL64(C[1], 1);
		D[1] = C[0] ^ ULong256::RotL64(C[2], 1);
		D[2] = C[1] ^ ULong256::RotL64(C[3], 1);
		D[3] = C[2] ^ ULong256::RotL64(C[4], 1);
		D[4] = C[3] ^ ULong256::RotL64(C[0], 1);
		E[0] ^= D[0];
		C[0] = E[0];
		E[6] ^= D[1];
		C[1] = ULong256::RotL64(E[6], 44);
		E[12] ^= D[2];
		C[2] = ULong256::RotL64(E[12], 43);
		E[18] ^= D[3];
		C[3] = ULong256::RotL64(E[18], 21);
		E[24] ^= D[4];
		C[4] = ULong256::RotL64(E[24], 14);
		A[0] = C[0] ^ ((~C[1]) & C[2]);
		A[0] ^= ULong256(KECCAK_RC48[i + 1]);
		A[1] = C[1] ^ ((~C[2]) & C[3]);
		A[2] = C[2] ^ ((~C[3]) & C[4]);
		A[3] = C[3] ^ ((~C[4]) & C[0]);
		A[4] = C[4] ^ ((~C[0]) & C[1]);
		E[3] ^= D[3];
		C[0] = ULong256::RotL64(E[3], 28);
		E[9] ^= D[4];
		C[1] = ULong256::RotL64(E[9], 20);
		E[10] ^= D[0];
		C[2] = ULong256::RotL64(E[10], 3);
		E[16] ^= D[1];
		C[3] = ULong256::RotL64(E[16], 45);
		E[22] ^= D[2];
		C[4] = ULong256::RotL64(E[22], 61);
		A[5] = C[0] ^ ((~C[1]) & C[2]);
		A[6] = C[1] ^ ((~C[2]) & C[3]);
		A[7] = C[2] ^ ((~C[3]) & C[4]);
		A[8] = C[3] ^ ((~C[4]) & C[0]);
		A[9] = C[4] ^ ((~C[0]) & C[1]);
		E[1] ^= D[1];
		C[0] = ULong256::RotL64(E[1], 1);
		E[7] ^= D[2];
		C[1] = ULong256::RotL64(E[7], 6);
		E[13] ^= D[3];
		C[2] = ULong256::RotL64(E[13], 25);
		E[19] ^= D[4];
		C[3] = ULong256::RotL64(E[19], 8);
		E[20] ^= D[0];
		C[4] = ULong256::RotL64(E[20], 18);
		A[10] = C[0] ^ ((~C[1]) & C[2]);
		A[11] = C[1] ^ ((~C[2]) & C[3]);
		A[12] = C[2] ^ ((~C[3]) & C[4]);
		A[13] = C[3] ^ ((~C[4]) & C[0]);
		A[14] = C[4] ^ ((~C[0]) & C[1]);
		E[4] ^= D[4];
		C[0] = ULong256::RotL64(E[4], 27);
		E[5] ^= D[0];
		C[1] = ULong256::RotL64(E[5], 36);
		E[11] ^= D[1];
		C[2] = ULong256::RotL64(E[11], 10);
		E[17] ^= D[2];
		C[3] = ULong256::RotL64(E[17], 15);
		E[23] ^= D[3];
		C[4] = ULong256::RotL64(E[23], 56);
		A[15] = C[0] ^ ((~C[1]) & C[2]);
		A[16] = C[1] ^ ((~C[2]) & C[3]);
		A[17] = C[2] ^ ((~C[3]) & C[4]);
		A[18] = C[3] ^ ((~C[4]) & C[0]);
		A[19] = C[4] ^ ((~C[0]) & C[1]);
		E[2] ^= D[2];
		C[0] = ULong256::RotL64(E[2], 62);
		E[8] ^= D[3];
		C[1] = ULong256::RotL64(E[8], 55);
		E[14] ^= D[4];
		C[2] = ULong256::RotL64(E[14], 39);
		E[15] ^= D[0];
		C[3] = ULong256::RotL64(E[15], 41);
		E[21] ^= D[1];
		C[4] = ULong256::RotL64(E[21], 2);
		A[20] = C[0] ^ ((~C[1]) & C[2]);
		A[21] = C[1] ^ ((~C[2]) & C[3]);
		A[22] = C[2] ^ ((~C[3]) & C[4]);
		A[23] = C[3] ^ ((~C[4]) & C[0]);
		A[24] = C[4] ^ ((~C[0]) & C[1]);
	}

	MemoryTools::Copy(A, 0, State, 0, A.size() * sizeof(ULong256));
}

#endif

#if defined(__AVX512__)

void Keccak::PermuteR48P8x1600H(std::vector<ULong512> &State)
{
	std::array<ULong512, 25> A;
	std::array<ULong512, 5> C;
	std::array<ULong512, 5> D;
	std::array<ULong512, 25> E;
	size_t i;

	MemoryTools::Copy(State, 0, A, 0, A.size() * sizeof(ULong512));

	for (i = 0; i < 48; i += 2)
	{
		// round n
		C[0] = A[0] ^ A[5] ^ A[10] ^ A[15] ^ A[20];
		C[1] = A[1] ^ A[6] ^ A[11] ^ A[16] ^ A[21];
		C[2] = A[2] ^ A[7] ^ A[12] ^ A[17] ^ A[22];
		C[3] = A[3] ^ A[8] ^ A[13] ^ A[18] ^ A[23];
		C[4] = A[4] ^ A[9] ^ A[14] ^ A[19] ^ A[24];
		D[0] = C[4] ^ ULong512::RotL64(C[1], 1);
		D[1] = C[0] ^ ULong512::RotL64(C[2], 1);
		D[2] = C[1] ^ ULong512::RotL64(C[3], 1);
		D[3] = C[2] ^ ULong512::RotL64(C[4], 1);
		D[4] = C[3] ^ ULong512::RotL64(C[0], 1);
		A[0] ^= D[0];
		C[0] = A[0];
		A[6] ^= D[1];
		C[1] = ULong512::RotL64(A[6], 44);
		A[12] ^= D[2];
		C[2] = ULong512::RotL64(A[12], 43);
		A[18] ^= D[3];
		C[3] = ULong512::RotL64(A[18], 21);
		A[24] ^= D[4];
		C[4] = ULong512::RotL64(A[24], 14);
		E[0] = C[0] ^ ((~C[1]) & C[2]);
		E[0] ^= ULong512(KECCAK_RC48[i]);
		E[1] = C[1] ^ ((~C[2]) & C[3]);
		E[2] = C[2] ^ ((~C[3]) & C[4]);
		E[3] = C[3] ^ ((~C[4]) & C[0]);
		E[4] = C[4] ^ ((~C[0]) & C[1]);
		A[3] ^= D[3];
		C[0] = ULong512::RotL64(A[3], 28);
		A[9] ^= D[4];
		C[1] = ULong512::RotL64(A[9], 20);
		A[10] ^= D[0];
		C[2] = ULong512::RotL64(A[10], 3);
		A[16] ^= D[1];
		C[3] = ULong512::RotL64(A[16], 45);
		A[22] ^= D[2];
		C[4] = ULong512::RotL64(A[22], 61);
		E[5] = C[0] ^ ((~C[1]) & C[2]);
		E[6] = C[1] ^ ((~C[2]) & C[3]);
		E[7] = C[2] ^ ((~C[3]) & C[4]);
		E[8] = C[3] ^ ((~C[4]) & C[0]);
		E[9] = C[4] ^ ((~C[0]) & C[1]);
		A[1] ^= D[1];
		C[0] = ULong512::RotL64(A[1], 1);
		A[7] ^= D[2];
		C[1] = ULong512::RotL64(A[7], 6);
		A[13] ^= D[3];
		C[2] = ULong512::RotL64(A[13], 25);
		A[19] ^= D[4];
		C[3] = ULong512::RotL64(A[19], 8);
		A[20] ^= D[0];
		C[4] = ULong512::RotL64(A[20], 18);
		E[10] = C[0] ^ ((~C[1]) & C[2]);
		E[11] = C[1] ^ ((~C[2]) & C[3]);
		E[12] = C[2] ^ ((~C[3]) & C[4]);
		E[13] = C[3] ^ ((~C[4]) & C[0]);
		E[14] = C[4] ^ ((~C[0]) & C[1]);
		A[4] ^= D[4];
		C[0] = ULong512::RotL64(A[4], 27);
		A[5] ^= D[0];
		C[1] = ULong512::RotL64(A[5], 36);
		A[11] ^= D[1];
		C[2] = ULong512::RotL64(A[11], 10);
		A[17] ^= D[2];
		C[3] = ULong512::RotL64(A[17], 15);
		A[23] ^= D[3];
		C[4] = ULong512::RotL64(A[23], 56);
		E[15] = C[0] ^ ((~C[1]) & C[2]);
		E[16] = C[1] ^ ((~C[2]) & C[3]);
		E[17] = C[2] ^ ((~C[3]) & C[4]);
		E[18] = C[3] ^ ((~C[4]) & C[0]);
		E[19] = C[4] ^ ((~C[0]) & C[1]);
		A[2] ^= D[2];
		C[0] = ULong512::RotL64(A[2], 62);
		A[8] ^= D[3];
		C[1] = ULong512::RotL64(A[8], 55);
		A[14] ^= D[4];
		C[2] = ULong512::RotL64(A[14], 39);
		A[15] ^= D[0];
		C[3] = ULong512::RotL64(A[15], 41);
		A[21] ^= D[1];
		C[4] = ULong512::RotL64(A[21], 2);
		E[20] = C[0] ^ ((~C[1]) & C[2]);
		E[21] = C[1] ^ ((~C[2]) & C[3]);
		E[22] = C[2] ^ ((~C[3]) & C[4]);
		E[23] = C[3] ^ ((~C[4]) & C[0]);
		E[24] = C[4] ^ ((~C[0]) & C[1]);
		// round n + 1
		C[0] = E[0] ^ E[5] ^ E[10] ^ E[15] ^ E[20];
		C[1] = E[1] ^ E[6] ^ E[11] ^ E[16] ^ E[21];
		C[2] = E[2] ^ E[7] ^ E[12] ^ E[17] ^ E[22];
		C[3] = E[3] ^ E[8] ^ E[13] ^ E[18] ^ E[23];
		C[4] = E[4] ^ E[9] ^ E[14] ^ E[19] ^ E[24];
		D[0] = C[4] ^ ULong512::RotL64(C[1], 1);
		D[1] = C[0] ^ ULong512::RotL64(C[2], 1);
		D[2] = C[1] ^ ULong512::RotL64(C[3], 1);
		D[3] = C[2] ^ ULong512::RotL64(C[4], 1);
		D[4] = C[3] ^ ULong512::RotL64(C[0], 1);
		E[0] ^= D[0];
		C[0] = E[0];
		E[6] ^= D[1];
		C[1] = ULong512::RotL64(E[6], 44);
		E[12] ^= D[2];
		C[2] = ULong512::RotL64(E[12], 43);
		E[18] ^= D[3];
		C[3] = ULong512::RotL64(E[18], 21);
		E[24] ^= D[4];
		C[4] = ULong512::RotL64(E[24], 14);
		A[0] = C[0] ^ ((~C[1]) & C[2]);
		A[0] ^= ULong512(KECCAK_RC48[i + 1]);
		A[1] = C[1] ^ ((~C[2]) & C[3]);
		A[2] = C[2] ^ ((~C[3]) & C[4]);
		A[3] = C[3] ^ ((~C[4]) & C[0]);
		A[4] = C[4] ^ ((~C[0]) & C[1]);
		E[3] ^= D[3];
		C[0] = ULong512::RotL64(E[3], 28);
		E[9] ^= D[4];
		C[1] = ULong512::RotL64(E[9], 20);
		E[10] ^= D[0];
		C[2] = ULong512::RotL64(E[10], 3);
		E[16] ^= D[1];
		C[3] = ULong512::RotL64(E[16], 45);
		E[22] ^= D[2];
		C[4] = ULong512::RotL64(E[22], 61);
		A[5] = C[0] ^ ((~C[1]) & C[2]);
		A[6] = C[1] ^ ((~C[2]) & C[3]);
		A[7] = C[2] ^ ((~C[3]) & C[4]);
		A[8] = C[3] ^ ((~C[4]) & C[0]);
		A[9] = C[4] ^ ((~C[0]) & C[1]);
		E[1] ^= D[1];
		C[0] = ULong512::RotL64(E[1], 1);
		E[7] ^= D[2];
		C[1] = ULong512::RotL64(E[7], 6);
		E[13] ^= D[3];
		C[2] = ULong512::RotL64(E[13], 25);
		E[19] ^= D[4];
		C[3] = ULong512::RotL64(E[19], 8);
		E[20] ^= D[0];
		C[4] = ULong512::RotL64(E[20], 18);
		A[10] = C[0] ^ ((~C[1]) & C[2]);
		A[11] = C[1] ^ ((~C[2]) & C[3]);
		A[12] = C[2] ^ ((~C[3]) & C[4]);
		A[13] = C[3] ^ ((~C[4]) & C[0]);
		A[14] = C[4] ^ ((~C[0]) & C[1]);
		E[4] ^= D[4];
		C[0] = ULong512::RotL64(E[4], 27);
		E[5] ^= D[0];
		C[1] = ULong512::RotL64(E[5], 36);
		E[11] ^= D[1];
		C[2] = ULong512::RotL64(E[11], 10);
		E[17] ^= D[2];
		C[3] = ULong512::RotL64(E[17], 15);
		E[23] ^= D[3];
		C[4] = ULong512::RotL64(E[23], 56);
		A[15] = C[0] ^ ((~C[1]) & C[2]);
		A[16] = C[1] ^ ((~C[2]) & C[3]);
		A[17] = C[2] ^ ((~C[3]) & C[4]);
		A[18] = C[3] ^ ((~C[4]) & C[0]);
		A[19] = C[4] ^ ((~C[0]) & C[1]);
		E[2] ^= D[2];
		C[0] = ULong512::RotL64(E[2], 62);
		E[8] ^= D[3];
		C[1] = ULong512::RotL64(E[8], 55);
		E[14] ^= D[4];
		C[2] = ULong512::RotL64(E[14], 39);
		E[15] ^= D[0];
		C[3] = ULong512::RotL64(E[15], 41);
		E[21] ^= D[1];
		C[4] = ULong512::RotL64(E[21], 2);
		A[20] = C[0] ^ ((~C[1]) & C[2]);
		A[21] = C[1] ^ ((~C[2]) & C[3]);
		A[22] = C[2] ^ ((~C[3]) & C[4]);
		A[23] = C[3] ^ ((~C[4]) & C[0]);
		A[24] = C[4] ^ ((~C[0]) & C[1]);
	}

	MemoryTools::Copy(A, 0, State, 0, A.size() * sizeof(ULong512));
}

#endif

NAMESPACE_DIGESTEND