#include "RLWEQ12289N2048.h"
#include "IntegerTools.h"
#include "Keccak.h"
#include "MemoryTools.h"

NAMESPACE_RINGLWE

using Tools::IntegerTools;
using Digest::Keccak;
using Tools::MemoryTools;

//~~~Constant Tables~~~//

const std::string RLWEQ12289N2048::Name = "Q12289N2048";

const std::vector<ushort> RLWEQ12289N2048::OmegasMontgomery =
{
	0x0FEBU, 0x1B3EU, 0x1334U, 0x10E4U, 0x1C2AU, 0x0CBEU, 0x0879U, 0x2DF7U, 0x2247U, 0x2BF0U, 0x18DCU, 0x03FAU, 0x15C6U, 0x07B5U, 0x04FEU, 0x0928U,
	0x2586U, 0x2B5BU, 0x17E6U, 0x2117U, 0x1E49U, 0x2BE7U, 0x1ABCU, 0x0F14U, 0x1550U, 0x1161U, 0x2134U, 0x0093U, 0x15A1U, 0x1D74U, 0x1D4CU, 0x1173U,
	0x2810U, 0x2063U, 0x20DAU, 0x287FU, 0x153BU, 0x2AB2U, 0x2B1BU, 0x2C34U, 0x2E83U, 0x2EC5U, 0x01D4U, 0x206DU, 0x1546U, 0x1B26U, 0x1834U, 0x0E7EU,
	0x2214U, 0x028EU, 0x07C3U, 0x295BU, 0x1599U, 0x1BABU, 0x0C7FU, 0x2FC9U, 0x1ADAU, 0x21C6U, 0x16E6U, 0x17F8U, 0x06C0U, 0x0190U, 0x1CADU, 0x17F9U,
	0x03EBU, 0x0DCCU, 0x003AU, 0x00F1U, 0x0375U, 0x1778U, 0x1C70U, 0x285DU, 0x19D0U, 0x226CU, 0x0451U, 0x008EU, 0x24E5U, 0x0D6EU, 0x03CFU, 0x1F8DU,
	0x1075U, 0x2E09U, 0x08FEU, 0x2DA4U, 0x16FEU, 0x1D53U, 0x242CU, 0x1A27U, 0x1210U, 0x17BDU, 0x0E10U, 0x2342U, 0x0FF0U, 0x2E5CU, 0x17B4U, 0x21EFU,
	0x0097U, 0x27B2U, 0x0B17U, 0x0F75U, 0x062BU, 0x2E52U, 0x09C9U, 0x18EFU, 0x17A7U, 0x0D08U, 0x190FU, 0x2D5CU, 0x0C66U, 0x0034U, 0x052BU, 0x2533U,
	0x2CEEU, 0x2267U, 0x155CU, 0x2C0FU, 0x0B68U, 0x1B88U, 0x23CAU, 0x1049U, 0x0529U, 0x00C0U, 0x0801U, 0x1330U, 0x12ACU, 0x228CU, 0x1DA7U, 0x13C1U,
	0x2154U, 0x07B7U, 0x2494U, 0x015BU, 0x230EU, 0x2E57U, 0x28BFU, 0x1D6FU, 0x2F53U, 0x2D2EU, 0x069DU, 0x0BC1U, 0x0AB2U, 0x16ECU, 0x199AU, 0x0A5FU,
	0x0031U, 0x04EFU, 0x18E6U, 0x2A36U, 0x05D1U, 0x263DU, 0x18CBU, 0x062FU, 0x1507U, 0x0717U, 0x05E8U, 0x015EU, 0x237FU, 0x118DU, 0x0809U, 0x14F9U,
	0x0ACFU, 0x2F65U, 0x2080U, 0x206AU, 0x14D5U, 0x07EFU, 0x08E9U, 0x16F4U, 0x0EBCU, 0x01A2U, 0x18EDU, 0x01C5U, 0x12A6U, 0x1535U, 0x050DU, 0x1281U,
	0x27FEU, 0x285FU, 0x070DU, 0x24BFU, 0x17FEU, 0x2672U, 0x2DC1U, 0x0F7BU, 0x1FEEU, 0x0BD6U, 0x28CEU, 0x26C8U, 0x24A5U, 0x2F27U, 0x0D6AU, 0x2238U,
	0x2030U, 0x0E90U, 0x1766U, 0x0487U, 0x2A85U, 0x2EBCU, 0x03B4U, 0x2B87U, 0x2D75U, 0x1686U, 0x2EDAU, 0x182EU, 0x0EB2U, 0x0B67U, 0x0FEDU, 0x0FB0U,
	0x1BC1U, 0x2B51U, 0x09FBU, 0x1817U, 0x1B50U, 0x181AU, 0x2AB1U, 0x208DU, 0x18B8U, 0x13F2U, 0x2857U, 0x063AU, 0x0A84U, 0x00A8U, 0x0D01U, 0x10CAU,
	0x1F1FU, 0x07A6U, 0x081EU, 0x2BA9U, 0x2C67U, 0x2E48U, 0x2BDFU, 0x0FEFU, 0x1850U, 0x2CBEU, 0x0DF2U, 0x1090U, 0x0FCEU, 0x02C5U, 0x0C4EU, 0x2ADAU,
	0x2666U, 0x2D56U, 0x0E48U, 0x2FC1U, 0x1696U, 0x061EU, 0x09C7U, 0x247DU, 0x156EU, 0x2413U, 0x0C33U, 0x06D3U, 0x2107U, 0x1489U, 0x18E2U, 0x1151U,
	0x2B15U, 0x1EDDU, 0x1218U, 0x1986U, 0x014EU, 0x2687U, 0x2961U, 0x0594U, 0x2358U, 0x02D9U, 0x2824U, 0x0CD9U, 0x13E4U, 0x0829U, 0x0CD4U, 0x24C0U,
	0x260DU, 0x1F7AU, 0x0163U, 0x0D36U, 0x2193U, 0x1BC6U, 0x06DFU, 0x0E7BU, 0x0AABU, 0x0F5CU, 0x1CE7U, 0x18EAU, 0x1A5BU, 0x2F70U, 0x0E35U, 0x0D83U,
	0x0E00U, 0x1FB0U, 0x2624U, 0x2A9CU, 0x14D3U, 0x137DU, 0x10B6U, 0x0689U, 0x01E0U, 0x0B1AU, 0x2FF8U, 0x03FEU, 0x265DU, 0x0153U, 0x1962U, 0x2DE1U,
	0x2094U, 0x0CE0U, 0x1164U, 0x095CU, 0x0082U, 0x1102U, 0x14FEU, 0x0B15U, 0x13CBU, 0x0895U, 0x2655U, 0x2F8BU, 0x0EA4U, 0x2C48U, 0x1687U, 0x2CC6U,
	0x0663U, 0x0AD0U, 0x1F62U, 0x0499U, 0x2D2BU, 0x1203U, 0x2F75U, 0x28C4U, 0x246EU, 0x1CE1U, 0x0BEBU, 0x26C3U, 0x03E8U, 0x1F21U, 0x23EEU, 0x0051U,
	0x2CEBU, 0x03BBU, 0x090FU, 0x2B6FU, 0x13DEU, 0x2AD3U, 0x243BU, 0x2380U, 0x0ABBU, 0x12EEU, 0x0E80U, 0x0C3FU, 0x1D3CU, 0x0DE1U, 0x2BDBU, 0x270BU,
	0x0DD6U, 0x2251U, 0x09F1U, 0x21DCU, 0x2B45U, 0x2993U, 0x16E4U, 0x2386U, 0x1FDBU, 0x1999U, 0x2AE8U, 0x02D2U, 0x2A3AU, 0x3000U, 0x2036U, 0x1BE7U,
	0x1372U, 0x2ABAU, 0x1970U, 0x0D00U, 0x19A1U, 0x11EFU, 0x139FU, 0x16C4U, 0x25C0U, 0x2C4CU, 0x25B2U, 0x1D2CU, 0x0AB8U, 0x2443U, 0x0233U, 0x0B9FU,
	0x2449U, 0x029FU, 0x2439U, 0x2F0EU, 0x0C40U, 0x1BBAU, 0x095FU, 0x0D48U, 0x01DCU, 0x2236U, 0x0F91U, 0x1329U, 0x01A4U, 0x15B7U, 0x29F9U, 0x277FU,
	0x084EU, 0x065EU, 0x0C72U, 0x1AE2U, 0x0481U, 0x0B44U, 0x2738U, 0x2031U, 0x14D4U, 0x0DB6U, 0x24D0U, 0x26BFU, 0x2352U, 0x2583U, 0x0F8AU, 0x0B99U,
	0x1155U, 0x0003U, 0x2F61U, 0x0C4DU, 0x0F4BU, 0x278BU, 0x1337U, 0x2F90U, 0x122EU, 0x2A6FU, 0x2910U, 0x2982U, 0x1B56U, 0x2571U, 0x134AU, 0x21CDU,
	0x0FD9U, 0x233AU, 0x2968U, 0x0D24U, 0x1EEDU, 0x087EU, 0x0B1FU, 0x113EU, 0x13B2U, 0x0901U, 0x0FD5U, 0x0A55U, 0x2525U, 0x1BB6U, 0x2A35U, 0x1CE2U,
	0x1CECU, 0x2C08U, 0x13DCU, 0x0660U, 0x001BU, 0x2407U, 0x0EB3U, 0x05A0U, 0x1D97U, 0x102FU, 0x00F2U, 0x2A00U, 0x2DE0U, 0x1C66U, 0x258BU, 0x0E78U,
	0x0415U, 0x0B2BU, 0x1C6DU, 0x09B1U, 0x1D04U, 0x0162U, 0x1642U, 0x0B60U, 0x2BD6U, 0x13EDU, 0x0961U, 0x01BAU, 0x2108U, 0x0EC2U, 0x2CFCU, 0x0186U,
	0x10F1U, 0x01B3U, 0x0562U, 0x0778U, 0x094DU, 0x1544U, 0x01EDU, 0x2001U, 0x2BD8U, 0x085FU, 0x0194U, 0x1225U, 0x1B64U, 0x0490U, 0x0CB0U, 0x04B7U,
	0x29BAU, 0x1370U, 0x036BU, 0x213DU, 0x13E0U, 0x1F45U, 0x1C6EU, 0x03EAU, 0x1797U, 0x0976U, 0x2776U, 0x0A06U, 0x0985U, 0x21C3U, 0x1786U, 0x0BABU,
	0x13EEU, 0x2E65U, 0x15D4U, 0x16D5U, 0x0BF0U, 0x09E0U, 0x2161U, 0x1C9EU, 0x0F87U, 0x1CEEU, 0x1936U, 0x0C0FU, 0x162CU, 0x2A78U, 0x2730U, 0x1E68U,
	0x2FC5U, 0x0A9DU, 0x2A02U, 0x2381U, 0x1935U, 0x11D6U, 0x08D4U, 0x0044U, 0x0F66U, 0x1B91U, 0x21EAU, 0x052FU, 0x133CU, 0x12ADU, 0x2C0BU, 0x01C0U,
	0x2B96U, 0x05A5U, 0x12FCU, 0x0465U, 0x1584U, 0x04FBU, 0x1666U, 0x2B69U, 0x23D7U, 0x2530U, 0x00D4U, 0x174EU, 0x2DBEU, 0x20D0U, 0x1A25U, 0x1763U,
	0x10ABU, 0x1615U, 0x2664U, 0x08E3U, 0x0EB5U, 0x2A13U, 0x1C3AU, 0x1050U, 0x0DCEU, 0x2088U, 0x2925U, 0x1031U, 0x11D4U, 0x225AU, 0x0811U, 0x16C2U,
	0x0992U, 0x06A9U, 0x2CD3U, 0x2E61U, 0x02CCU, 0x27C3U, 0x278DU, 0x1528U, 0x2B49U, 0x1277U, 0x074AU, 0x145BU, 0x2EAAU, 0x0D78U, 0x11BAU, 0x288DU,
	0x0E05U, 0x02CDU, 0x2AA4U, 0x0BA6U, 0x06B9U, 0x2A01U, 0x1FFAU, 0x2684U, 0x1898U, 0x0CCEU, 0x1524U, 0x1F90U, 0x04C2U, 0x13C5U, 0x01B6U, 0x0DBBU,
	0x1F73U, 0x0264U, 0x1083U, 0x0D28U, 0x2F84U, 0x021CU, 0x1F83U, 0x05F6U, 0x0C5BU, 0x0FC0U, 0x1812U, 0x12E8U, 0x0814U, 0x056DU, 0x2EA7U, 0x1ECDU,
	0x10A9U, 0x21A3U, 0x2E31U, 0x2879U, 0x1459U, 0x0444U, 0x0C85U, 0x0D1FU, 0x2185U, 0x0CA6U, 0x0D79U, 0x2B91U, 0x28DFU, 0x2493U, 0x1189U, 0x239EU,
	0x0405U, 0x0799U, 0x2AD4U, 0x165CU, 0x1A23U, 0x22F1U, 0x289DU, 0x21D9U, 0x098AU, 0x04E0U, 0x1C06U, 0x1CB6U, 0x195CU, 0x208AU, 0x18BAU, 0x0864U,
	0x21BBU, 0x24B3U, 0x2ADFU, 0x06D0U, 0x2096U, 0x0152U, 0x0997U, 0x19C7U, 0x1017U, 0x0D0FU, 0x279AU, 0x2A0FU, 0x0014U, 0x1C77U, 0x1200U, 0x142BU,
	0x17C5U, 0x1FBAU, 0x040EU, 0x039BU, 0x17CCU, 0x274AU, 0x00C1U, 0x2511U, 0x2E79U, 0x0889U, 0x28D5U, 0x2E58U, 0x0179U, 0x1E1FU, 0x29ADU, 0x2E8AU,
	0x1566U, 0x224AU, 0x2B67U, 0x2529U, 0x0796U, 0x0D50U, 0x0A0FU, 0x048DU, 0x0570U, 0x1698U, 0x2B1AU, 0x01FAU, 0x0A72U, 0x08A4U, 0x2335U, 0x0D0AU,
	0x06C9U, 0x2D93U, 0x1193U, 0x19D9U, 0x2D85U, 0x1A18U, 0x2073U, 0x0B83U, 0x270EU, 0x22D2U, 0x1F12U, 0x22C0U, 0x1CD0U, 0x0DC8U, 0x2110U, 0x108BU,
	0x2A86U, 0x28F5U, 0x17CEU, 0x1BBCU, 0x1494U, 0x2F6FU, 0x2E6BU, 0x296AU, 0x1CD7U, 0x1558U, 0x1DC3U, 0x0200U, 0x0B54U, 0x2F12U, 0x11CAU, 0x2C1FU,
	0x264EU, 0x27FBU, 0x0BE2U, 0x2AC1U, 0x2A45U, 0x2074U, 0x0D4FU, 0x2E32U, 0x11FDU, 0x2580U, 0x102AU, 0x2F4DU, 0x1585U, 0x2F35U, 0x2A80U, 0x1B9EU,
	0x1E86U, 0x1B83U, 0x04D4U, 0x0BC9U, 0x2BE0U, 0x0A28U, 0x1261U, 0x23D0U, 0x1460U, 0x0BD4U, 0x0938U, 0x2E95U, 0x1A73U, 0x04CAU, 0x109BU, 0x1283U,
	0x1F01U, 0x24F5U, 0x1D1FU, 0x2569U, 0x2101U, 0x0732U, 0x0048U, 0x1011U, 0x2003U, 0x2286U, 0x1EE7U, 0x2B28U, 0x196CU, 0x241CU, 0x0A53U, 0x2BBAU,
	0x1629U, 0x0BCCU, 0x1AE3U, 0x1DC8U, 0x21ACU, 0x1B5AU, 0x1D5FU, 0x03B0U, 0x1B66U, 0x2903U, 0x04E3U, 0x1522U, 0x2BF1U, 0x07F3U, 0x1814U, 0x075AU,
	0x0C16U, 0x1E5BU, 0x1D2DU, 0x0488U, 0x0AAAU, 0x1523U, 0x08CDU, 0x28B5U, 0x1F9FU, 0x2436U, 0x24E9U, 0x2653U, 0x136EU, 0x11D5U, 0x290AU, 0x1C2BU,
	0x2760U, 0x291EU, 0x2F44U, 0x23D5U, 0x2591U, 0x1BCFU, 0x04FFU, 0x0361U, 0x0546U, 0x1939U, 0x0EE7U, 0x293BU, 0x20E4U, 0x1EBAU, 0x2963U, 0x2A07U,
	0x1F34U, 0x1E56U, 0x2E38U, 0x0008U, 0x212EU, 0x233DU, 0x28C8U, 0x1971U, 0x2153U, 0x0D7EU, 0x107AU, 0x1126U, 0x25E0U, 0x036FU, 0x08E4U, 0x03D6U,
	0x2CF7U, 0x1E69U, 0x0A42U, 0x2DEFU, 0x2207U, 0x1DA8U, 0x2277U, 0x06A5U, 0x2474U, 0x2A38U, 0x2485U, 0x2803U, 0x22FDU, 0x008BU, 0x230CU, 0x09E4U,
	0x1852U, 0x2130U, 0x0625U, 0x20FBU, 0x0A2AU, 0x2894U, 0x1C03U, 0x2E0BU, 0x18B0U, 0x1229U, 0x178AU, 0x2490U, 0x2114U, 0x2970U, 0x2E2FU, 0x0406U,
	0x2CEAU, 0x0982U, 0x24F6U, 0x0B39U, 0x16B0U, 0x2FECU, 0x0460U, 0x09E7U, 0x2C97U, 0x08FDU, 0x00AAU, 0x19EFU, 0x10C1U, 0x26FEU, 0x0096U, 0x2D79U,
	0x1E63U, 0x25B4U, 0x1555U, 0x247FU, 0x2E94U, 0x2C90U, 0x0787U, 0x03F7U, 0x055BU, 0x2FE9U, 0x0500U, 0x2D9BU, 0x15ABU, 0x13AFU, 0x264CU, 0x0388U,
	0x270CU, 0x2E60U, 0x26DFU, 0x1255U, 0x2274U, 0x17FAU, 0x115BU, 0x0D5AU, 0x113BU, 0x0636U, 0x04C7U, 0x26E3U, 0x289EU, 0x1C12U, 0x070AU, 0x0613U,
	0x2CC7U, 0x13B3U, 0x0576U, 0x23EFU, 0x1964U, 0x2253U, 0x2987U, 0x1A0FU, 0x1D92U, 0x2D12U, 0x2C73U, 0x18F5U, 0x0BF9U, 0x05E2U, 0x1647U, 0x1E7EU,
	0x2DBFU, 0x1B09U, 0x2E3FU, 0x0798U, 0x2E03U, 0x1235U, 0x150AU, 0x25C3U, 0x2121U, 0x0E56U, 0x137BU, 0x26BCU, 0x22E1U, 0x124CU, 0x003FU, 0x140FU,
	0x25B8U, 0x2A83U, 0x14E5U, 0x0B81U, 0x2148U, 0x1D0AU, 0x2361U, 0x2EDCU, 0x087BU, 0x2269U, 0x04F1U, 0x2442U, 0x159AU, 0x15E4U, 0x2099U, 0x1FFEU,
	0x2D57U, 0x03D4U, 0x13DAU, 0x11EEU, 0x034CU, 0x1452U, 0x1457U, 0x0FD2U, 0x0237U, 0x2484U, 0x14A9U, 0x161EU, 0x2104U, 0x25DEU, 0x0C95U, 0x10B1U,
	0x0C30U, 0x1828U, 0x17C6U, 0x19F3U, 0x2158U, 0x209CU, 0x14FAU, 0x2231U, 0x0F59U, 0x06AAU, 0x0C9DU, 0x127AU, 0x07E5U, 0x24F1U, 0x0DF4U, 0x0502U,
	0x08A5U, 0x1FC8U, 0x2124U, 0x2D02U, 0x2F29U, 0x2FCFU, 0x1A6BU, 0x0301U, 0x034DU, 0x0E8BU, 0x2871U, 0x0007U, 0x1108U, 0x0CD5U, 0x23AFU, 0x1C43U
};

const std::vector<ushort> RLWEQ12289N2048::OmegasInvMontgomery =
{
	0x0FEBU, 0x14C3U, 0x1F1DU, 0x1CCDU, 0x020AU, 0x2788U, 0x2343U, 0x13D7U, 0x26D9U, 0x2B03U, 0x284CU, 0x1A3BU, 0x2C07U, 0x1725U, 0x0411U, 0x0DBAU,
	0x1E8EU, 0x12B5U, 0x128DU, 0x1A60U, 0x2F6EU, 0x0ECDU, 0x1EA0U, 0x1AB1U, 0x20EDU, 0x1545U, 0x041AU, 0x11B8U, 0x0EEAU, 0x181BU, 0x04A6U, 0x0A7BU,
	0x1808U, 0x1354U, 0x2E71U, 0x2941U, 0x1809U, 0x191BU, 0x0E3BU, 0x1527U, 0x0038U, 0x2382U, 0x1456U, 0x1A68U, 0x06A6U, 0x283EU, 0x2D73U, 0x0DEDU,
	0x2183U, 0x17CDU, 0x14DBU, 0x1ABBU, 0x0F94U, 0x2E2DU, 0x013CU, 0x017EU, 0x03CDU, 0x04E6U, 0x054FU, 0x1AC6U, 0x0782U, 0x0F27U, 0x0F9EU, 0x07F1U,
	0x1C40U, 0x125AU, 0x0D75U, 0x1D55U, 0x1CD1U, 0x2800U, 0x2F41U, 0x2AD8U, 0x1FB8U, 0x0C37U, 0x1479U, 0x2499U, 0x03F2U, 0x1AA5U, 0x0D9AU, 0x0313U,
	0x0ACEU, 0x2AD6U, 0x2FCDU, 0x239BU, 0x02A5U, 0x16F2U, 0x22F9U, 0x185AU, 0x1712U, 0x2638U, 0x01AFU, 0x29D6U, 0x208CU, 0x24EAU, 0x084FU, 0x2F6AU,
	0x0E12U, 0x184DU, 0x01A5U, 0x2011U, 0x0CBFU, 0x21F1U, 0x1844U, 0x1DF1U, 0x15DAU, 0x0BD5U, 0x12AEU, 0x1903U, 0x025DU, 0x2703U, 0x01F8U, 0x1F8CU,
	0x1074U, 0x2C32U, 0x2293U, 0x0B1CU, 0x2F73U, 0x2BB0U, 0x0D95U, 0x1631U, 0x07A4U, 0x1391U, 0x1889U, 0x2C8CU, 0x2F10U, 0x2FC7U, 0x2235U, 0x2C16U,
	0x1EB0U, 0x171FU, 0x1B78U, 0x0EFAU, 0x292EU, 0x23CEU, 0x0BEEU, 0x1A93U, 0x0B84U, 0x263AU, 0x29E3U, 0x196BU, 0x0040U, 0x21B9U, 0x02ABU, 0x099BU,
	0x0527U, 0x23B3U, 0x2D3CU, 0x2033U, 0x1F71U, 0x220FU, 0x0343U, 0x17B1U, 0x2012U, 0x0422U, 0x01B9U, 0x039AU, 0x0458U, 0x27E3U, 0x285BU, 0x10E2U,
	0x1F37U, 0x2300U, 0x2F59U, 0x257DU, 0x29C7U, 0x07AAU, 0x1C0FU, 0x1749U, 0x0F74U, 0x0550U, 0x17E7U, 0x14B1U, 0x17EAU, 0x2606U, 0x04B0U, 0x1440U,
	0x2051U, 0x2014U, 0x249AU, 0x214FU, 0x17D3U, 0x0127U, 0x197BU, 0x028CU, 0x047AU, 0x2C4DU, 0x0145U, 0x057CU, 0x2B7AU, 0x189BU, 0x2171U, 0x0FD1U,
	0x0DC9U, 0x2297U, 0x00DAU, 0x0B5CU, 0x0939U, 0x0733U, 0x242BU, 0x1013U, 0x2086U, 0x0240U, 0x098FU, 0x1803U, 0x0B42U, 0x28F4U, 0x07A2U, 0x0803U,
	0x1D80U, 0x2AF4U, 0x1ACCU, 0x1D5BU, 0x2E3CU, 0x1714U, 0x2E5FU, 0x2145U, 0x190DU, 0x2718U, 0x2812U, 0x1B2CU, 0x0F97U, 0x0F81U, 0x009CU, 0x2532U,
	0x1B08U, 0x27F8U, 0x1E74U, 0x0C82U, 0x2EA3U, 0x2A19U, 0x28EAU, 0x1AFAU, 0x29D2U, 0x1736U, 0x09C4U, 0x2A30U, 0x05CBU, 0x171BU, 0x2B12U, 0x2FD0U,
	0x25A2U, 0x1667U, 0x1915U, 0x254FU, 0x2440U, 0x2964U, 0x02D3U, 0x00AEU, 0x1292U, 0x0742U, 0x01AAU, 0x0CF3U, 0x2EA6U, 0x0B6DU, 0x284AU, 0x0EADU,
	0x2456U, 0x187BU, 0x0E3EU, 0x267CU, 0x25FBU, 0x088BU, 0x268BU, 0x186AU, 0x2C17U, 0x1393U, 0x10BCU, 0x1C21U, 0x0EC4U, 0x2C96U, 0x1C91U, 0x0647U,
	0x2B4AU, 0x2351U, 0x2B71U, 0x149DU, 0x1DDCU, 0x2E6DU, 0x27A2U, 0x0429U, 0x1000U, 0x2E14U, 0x1ABDU, 0x26B4U, 0x2889U, 0x2A9FU, 0x2E4EU, 0x1F10U,
	0x2E7BU, 0x0305U, 0x213FU, 0x0EF9U, 0x2E47U, 0x26A0U, 0x1C14U, 0x042BU, 0x24A1U, 0x19BFU, 0x2E9FU, 0x12FDU, 0x2650U, 0x1394U, 0x24D6U, 0x2BECU,
	0x2189U, 0x0A76U, 0x139BU, 0x0221U, 0x0601U, 0x2F0FU, 0x1FD2U, 0x126AU, 0x2A61U, 0x214EU, 0x0BFAU, 0x2FE6U, 0x29A1U, 0x1C25U, 0x03F9U, 0x1315U,
	0x131FU, 0x05CCU, 0x144BU, 0x0ADCU, 0x25ACU, 0x202CU, 0x2700U, 0x1C4FU, 0x1EC3U, 0x24E2U, 0x2783U, 0x1114U, 0x22DDU, 0x0699U, 0x0CC7U, 0x2028U,
	0x0E34U, 0x1CB7U, 0x0A90U, 0x14ABU, 0x067FU, 0x06F1U, 0x0592U, 0x1DD3U, 0x0071U, 0x1CCAU, 0x0876U, 0x20B6U, 0x23B4U, 0x00A0U, 0x2FFEU, 0x1EACU,
	0x2468U, 0x2077U, 0x0A7EU, 0x0CAFU, 0x0942U, 0x0B31U, 0x224BU, 0x1B2DU, 0x0FD0U, 0x08C9U, 0x24BDU, 0x2B80U, 0x151FU, 0x238FU, 0x29A3U, 0x27B3U,
	0x0882U, 0x0608U, 0x1A4AU, 0x2E5DU, 0x1CD8U, 0x2070U, 0x0DCBU, 0x2E25U, 0x22B9U, 0x26A2U, 0x1447U, 0x23C1U, 0x00F3U, 0x0BC8U, 0x2D62U, 0x0BB8U,
	0x2462U, 0x2DCEU, 0x0BBEU, 0x2549U, 0x12D5U, 0x0A4FU, 0x03B5U, 0x0A41U, 0x193DU, 0x1C62U, 0x1E12U, 0x1660U, 0x2301U, 0x1691U, 0x0547U, 0x1C8FU,
	0x141AU, 0x0FCBU, 0x0001U, 0x05C7U, 0x2D2FU, 0x0519U, 0x1668U, 0x1026U, 0x0C7BU, 0x191DU, 0x066EU, 0x04BCU, 0x0E25U, 0x2610U, 0x0DB0U, 0x222BU,
	0x08F6U, 0x0426U, 0x2220U, 0x12C5U, 0x23C2U, 0x2181U, 0x1D13U, 0x2546U, 0x0C81U, 0x0BC6U, 0x052EU, 0x1C23U, 0x0492U, 0x26F2U, 0x2C46U, 0x0316U,
	0x2FB0U, 0x0C13U, 0x10E0U, 0x2C19U, 0x093EU, 0x2416U, 0x1320U, 0x0B93U, 0x073DU, 0x008CU, 0x1DFEU, 0x02D6U, 0x2B68U, 0x109FU, 0x2531U, 0x299EU,
	0x033BU, 0x197AU, 0x03B9U, 0x215DU, 0x0076U, 0x09ACU, 0x276CU, 0x1C36U, 0x24ECU, 0x1B03U, 0x1EFFU, 0x2F7FU, 0x26A5U, 0x1E9DU, 0x2321U, 0x0F6DU,
	0x0220U, 0x169FU, 0x2EAEU, 0x09A4U, 0x2C03U, 0x0009U, 0x24E7U, 0x2E21U, 0x2978U, 0x1F4BU, 0x1C84U, 0x1B2EU, 0x0565U, 0x09DDU, 0x1051U, 0x2201U,
	0x227EU, 0x21CCU, 0x0091U, 0x15A6U, 0x1717U, 0x131AU, 0x20A5U, 0x2556U, 0x2186U, 0x2922U, 0x143BU, 0x0E6EU, 0x22CBU, 0x2E9EU, 0x1087U, 0x09F4U,
	0x0B41U, 0x232DU, 0x27D8U, 0x1C1DU, 0x2328U, 0x07DDU, 0x2D28U, 0x0CA9U, 0x2A6DU, 0x06A0U, 0x097AU, 0x2EB3U, 0x167BU, 0x1DE9U, 0x1124U, 0x04ECU,
	0x13BEU, 0x0C52U, 0x232CU, 0x1EF9U, 0x2FFAU, 0x0790U, 0x2176U, 0x2CB4U, 0x2D00U, 0x1596U, 0x0032U, 0x00D8U, 0x02FFU, 0x0EDDU, 0x1039U, 0x275CU,
	0x2AFFU, 0x220DU, 0x0B10U, 0x281CU, 0x1D87U, 0x2364U, 0x2957U, 0x20A8U, 0x0DD0U, 0x1B07U, 0x0F65U, 0x0EA9U, 0x160EU, 0x183BU, 0x17D9U, 0x23D1U,
	0x1F50U, 0x236CU, 0x0A23U, 0x0EFDU, 0x19E3U, 0x1B58U, 0x0B7DU, 0x2DCAU, 0x202FU, 0x1BAAU, 0x1BAFU, 0x2CB5U, 0x1E13U, 0x1C27U, 0x2C2DU, 0x02AAU,
	0x1003U, 0x0F68U, 0x1A1DU, 0x1A67U, 0x0BBFU, 0x2B10U, 0x0D98U, 0x2786U, 0x0125U, 0x0CA0U, 0x12F7U, 0x0EB9U, 0x2480U, 0x1B1CU, 0x057EU, 0x0A49U,
	0x1BF2U, 0x2FC2U, 0x1DB5U, 0x0D20U, 0x0945U, 0x1C86U, 0x21ABU, 0x0EE0U, 0x0A3EU, 0x1AF7U, 0x1DCCU, 0x01FEU, 0x2869U, 0x01C2U, 0x14F8U, 0x0242U,
	0x1183U, 0x19BAU, 0x2A1FU, 0x2408U, 0x170CU, 0x038EU, 0x02EFU, 0x126FU, 0x15F2U, 0x067AU, 0x0DAEU, 0x169DU, 0x0C12U, 0x2A8BU, 0x1C4EU, 0x033AU,
	0x29EEU, 0x28F7U, 0x13EFU, 0x0763U, 0x091EU, 0x2B3AU, 0x29CBU, 0x1EC6U, 0x22A7U, 0x1EA6U, 0x1807U, 0x0D8DU, 0x1DACU, 0x0922U, 0x01A1U, 0x08F5U,
	0x2C79U, 0x09B5U, 0x1C52U, 0x1A56U, 0x0266U, 0x2B01U, 0x0018U, 0x2AA6U, 0x2C0AU, 0x287AU, 0x0371U, 0x016DU, 0x0B82U, 0x1AACU, 0x0A4DU, 0x119EU,
	0x0288U, 0x2F6BU, 0x0903U, 0x1F40U, 0x1612U, 0x2F57U, 0x2704U, 0x036AU, 0x261AU, 0x2BA1U, 0x0015U, 0x1951U, 0x24C8U, 0x0B0BU, 0x267FU, 0x0317U,
	0x2BFBU, 0x01D2U, 0x0691U, 0x0EEDU, 0x0B71U, 0x1877U, 0x1DD8U, 0x1751U, 0x01F6U, 0x13FEU, 0x076DU, 0x25D7U, 0x0F06U, 0x29DCU, 0x0ED1U, 0x17AFU,
	0x261DU, 0x0CF5U, 0x2F76U, 0x0D04U, 0x07FEU, 0x0B7CU, 0x05C9U, 0x0B8DU, 0x295CU, 0x0D8AU, 0x1259U, 0x0DFAU, 0x0212U, 0x25BFU, 0x1198U, 0x030AU,
	0x2C2BU, 0x271DU, 0x2C92U, 0x0A21U, 0x1EDBU, 0x1F87U, 0x2283U, 0x0EAEU, 0x1690U, 0x0739U, 0x0CC4U, 0x0ED3U, 0x2FF9U, 0x01C9U, 0x11ABU, 0x10CDU,
	0x05FAU, 0x069EU, 0x1147U, 0x0F1DU, 0x06C6U, 0x211AU, 0x16C8U, 0x2ABBU, 0x2CA0U, 0x2B02U, 0x1432U, 0x0A70U, 0x0C2CU, 0x00BDU, 0x06E3U, 0x08A1U,
	0x13D6U, 0x06F7U, 0x1E2CU, 0x1C93U, 0x09AEU, 0x0B18U, 0x0BCBU, 0x1062U, 0x074CU, 0x2734U, 0x1ADEU, 0x2557U, 0x2B79U, 0x12D4U, 0x11A6U, 0x23EBU,
	0x28A7U, 0x17EDU, 0x280EU, 0x0410U, 0x1ADFU, 0x2B1EU, 0x06FEU, 0x149BU, 0x2C51U, 0x12A2U, 0x14A7U, 0x0E55U, 0x1239U, 0x151EU, 0x2435U, 0x19D8U,
	0x0447U, 0x25AEU, 0x0BE5U, 0x1695U, 0x04D9U, 0x111AU, 0x0D7BU, 0x0FFEU, 0x1FF0U, 0x2FB9U, 0x28CFU, 0x0F00U, 0x0A98U, 0x12E2U, 0x0B0CU, 0x1100U,
	0x1D7EU, 0x1F66U, 0x2B37U, 0x158EU, 0x016CU, 0x26C9U, 0x242DU, 0x1BA1U, 0x0C31U, 0x1DA0U, 0x25D9U, 0x0421U, 0x2438U, 0x2B2DU, 0x147EU, 0x117BU,
	0x1463U, 0x0581U, 0x00CCU, 0x1A7CU, 0x00B4U, 0x1FD7U, 0x0A81U, 0x1E04U, 0x01CFU, 0x22B2U, 0x0F8DU, 0x05BCU, 0x0540U, 0x241FU, 0x0806U, 0x09B3U,
	0x03E2U, 0x1E37U, 0x00EFU, 0x24ADU, 0x2E01U, 0x123EU, 0x1AA9U, 0x132AU, 0x0697U, 0x0196U, 0x0092U, 0x1B6DU, 0x1445U, 0x1833U, 0x070CU, 0x057BU,
	0x1F76U, 0x0EF1U, 0x2239U, 0x1331U, 0x0D41U, 0x10EFU, 0x0D2FU, 0x08F3U, 0x247EU, 0x0F8EU, 0x15E9U, 0x027CU, 0x1628U, 0x1E6EU, 0x026EU, 0x2938U,
	0x22F7U, 0x0CCCU, 0x275DU, 0x258FU, 0x2E07U, 0x04E7U, 0x1969U, 0x2A91U, 0x2B74U, 0x25F2U, 0x22B1U, 0x286BU, 0x0AD8U, 0x049AU, 0x0DB7U, 0x1A9BU,
	0x0177U, 0x0654U, 0x11E2U, 0x2E88U, 0x01A9U, 0x072CU, 0x2778U, 0x0188U, 0x0AF0U, 0x2F40U, 0x08B7U, 0x1835U, 0x2C66U, 0x2BF3U, 0x1047U, 0x183CU,
	0x1BD6U, 0x1E01U, 0x138AU, 0x2FEDU, 0x05F2U, 0x0867U, 0x22F2U, 0x1FEAU, 0x163AU, 0x266AU, 0x2EAFU, 0x0F6BU, 0x2931U, 0x0522U, 0x0B4EU, 0x0E46U,
	0x279DU, 0x1747U, 0x0F77U, 0x16A5U, 0x134BU, 0x13FBU, 0x2B21U, 0x2677U, 0x0E28U, 0x0764U, 0x0D10U, 0x15DEU, 0x19A5U, 0x052DU, 0x2868U, 0x2BFCU,
	0x0C63U, 0x1E78U, 0x0B6EU, 0x0722U, 0x0470U, 0x2288U, 0x235BU, 0x0E7CU, 0x22E2U, 0x237CU, 0x2BBDU, 0x1BA8U, 0x0788U, 0x01D0U, 0x0E5EU, 0x1F58U,
	0x1134U, 0x015AU, 0x2A94U, 0x27EDU, 0x1D19U, 0x17EFU, 0x2041U, 0x23A6U, 0x2A0BU, 0x107EU, 0x2DE5U, 0x007DU, 0x22D9U, 0x1F7EU, 0x2D9DU, 0x108EU,
	0x2246U, 0x2E4BU, 0x1C3CU, 0x2B3FU, 0x1071U, 0x1ADDU, 0x2333U, 0x1769U, 0x097DU, 0x1007U, 0x0600U, 0x2948U, 0x245BU, 0x055DU, 0x2D34U, 0x21FCU,
	0x0774U, 0x1E47U, 0x2289U, 0x0157U, 0x1BA6U, 0x28B7U, 0x1D8AU, 0x04B8U, 0x1AD9U, 0x0874U, 0x083EU, 0x2D35U, 0x01A0U, 0x032EU, 0x2958U, 0x266FU,
	0x193FU, 0x27F0U, 0x0DA7U, 0x1E2DU, 0x1FD0U, 0x06DCU, 0x0F79U, 0x2233U, 0x1FB1U, 0x13C7U, 0x05EEU, 0x214CU, 0x271EU, 0x099DU, 0x19ECU, 0x1F56U,
	0x189EU, 0x15DCU, 0x0F31U, 0x0243U, 0x18B3U, 0x2F2DU, 0x0AD1U, 0x0C2AU, 0x0498U, 0x199BU, 0x2B06U, 0x1A7DU, 0x2B9CU, 0x1D05U, 0x2A5CU, 0x046BU,
	0x2E41U, 0x03F6U, 0x1D54U, 0x1CC5U, 0x2AD2U, 0x0E17U, 0x1470U, 0x209BU, 0x2FBDU, 0x272DU, 0x1E2BU, 0x16CCU, 0x0C80U, 0x05FFU, 0x2564U, 0x003CU,
	0x1199U, 0x08D1U, 0x0589U, 0x19D5U, 0x23F2U, 0x16CBU, 0x1313U, 0x207AU, 0x1363U, 0x0EA0U, 0x2621U, 0x2411U, 0x192CU, 0x1A2DU, 0x019CU, 0x1C13U
};

const std::vector<ushort> RLWEQ12289N2048::PsisBitrevMontgomery =
{
	0x0FEBU, 0x1B3EU, 0x1334U, 0x10E4U, 0x1C2AU, 0x0CBEU, 0x0879U, 0x2DF7U, 0x2247U, 0x2BF0U, 0x18DCU, 0x03FAU, 0x15C6U, 0x07B5U, 0x04FEU, 0x0928U,
	0x2586U, 0x2B5BU, 0x17E6U, 0x2117U, 0x1E49U, 0x2BE7U, 0x1ABCU, 0x0F14U, 0x1550U, 0x1161U, 0x2134U, 0x0093U, 0x15A1U, 0x1D74U, 0x1D4CU, 0x1173U,
	0x2810U, 0x2063U, 0x20DAU, 0x287FU, 0x153BU, 0x2AB2U, 0x2B1BU, 0x2C34U, 0x2E83U, 0x2EC5U, 0x01D4U, 0x206DU, 0x1546U, 0x1B26U, 0x1834U, 0x0E7EU,
	0x2214U, 0x028EU, 0x07C3U, 0x295BU, 0x1599U, 0x1BABU, 0x0C7FU, 0x2FC9U, 0x1ADAU, 0x21C6U, 0x16E6U, 0x17F8U, 0x06C0U, 0x0190U, 0x1CADU, 0x17F9U,
	0x03EBU, 0x0DCCU, 0x003AU, 0x00F1U, 0x0375U, 0x1778U, 0x1C70U, 0x285DU, 0x19D0U, 0x226CU, 0x0451U, 0x008EU, 0x24E5U, 0x0D6EU, 0x03CFU, 0x1F8DU,
	0x1075U, 0x2E09U, 0x08FEU, 0x2DA4U, 0x16FEU, 0x1D53U, 0x242CU, 0x1A27U, 0x1210U, 0x17BDU, 0x0E10U, 0x2342U, 0x0FF0U, 0x2E5CU, 0x17B4U, 0x21EFU,
	0x0097U, 0x27B2U, 0x0B17U, 0x0F75U, 0x062BU, 0x2E52U, 0x09C9U, 0x18EFU, 0x17A7U, 0x0D08U, 0x190FU, 0x2D5CU, 0x0C66U, 0x0034U, 0x052BU, 0x2533U,
	0x2CEEU, 0x2267U, 0x155CU, 0x2C0FU, 0x0B68U, 0x1B88U, 0x23CAU, 0x1049U, 0x0529U, 0x00C0U, 0x0801U, 0x1330U, 0x12ACU, 0x228CU, 0x1DA7U, 0x13C1U,
	0x2154U, 0x07B7U, 0x2494U, 0x015BU, 0x230EU, 0x2E57U, 0x28BFU, 0x1D6FU, 0x2F53U, 0x2D2EU, 0x069DU, 0x0BC1U, 0x0AB2U, 0x16ECU, 0x199AU, 0x0A5FU,
	0x0031U, 0x04EFU, 0x18E6U, 0x2A36U, 0x05D1U, 0x263DU, 0x18CBU, 0x062FU, 0x1507U, 0x0717U, 0x05E8U, 0x015EU, 0x237FU, 0x118DU, 0x0809U, 0x14F9U,
	0x0ACFU, 0x2F65U, 0x2080U, 0x206AU, 0x14D5U, 0x07EFU, 0x08E9U, 0x16F4U, 0x0EBCU, 0x01A2U, 0x18EDU, 0x01C5U, 0x12A6U, 0x1535U, 0x050DU, 0x1281U,
	0x27FEU, 0x285FU, 0x070DU, 0x24BFU, 0x17FEU, 0x2672U, 0x2DC1U, 0x0F7BU, 0x1FEEU, 0x0BD6U, 0x28CEU, 0x26C8U, 0x24A5U, 0x2F27U, 0x0D6AU, 0x2238U,
	0x2030U, 0x0E90U, 0x1766U, 0x0487U, 0x2A85U, 0x2EBCU, 0x03B4U, 0x2B87U, 0x2D75U, 0x1686U, 0x2EDAU, 0x182EU, 0x0EB2U, 0x0B67U, 0x0FEDU, 0x0FB0U,
	0x1BC1U, 0x2B51U, 0x09FBU, 0x1817U, 0x1B50U, 0x181AU, 0x2AB1U, 0x208DU, 0x18B8U, 0x13F2U, 0x2857U, 0x063AU, 0x0A84U, 0x00A8U, 0x0D01U, 0x10CAU,
	0x1F1FU, 0x07A6U, 0x081EU, 0x2BA9U, 0x2C67U, 0x2E48U, 0x2BDFU, 0x0FEFU, 0x1850U, 0x2CBEU, 0x0DF2U, 0x1090U, 0x0FCEU, 0x02C5U, 0x0C4EU, 0x2ADAU,
	0x2666U, 0x2D56U, 0x0E48U, 0x2FC1U, 0x1696U, 0x061EU, 0x09C7U, 0x247DU, 0x156EU, 0x2413U, 0x0C33U, 0x06D3U, 0x2107U, 0x1489U, 0x18E2U, 0x1151U,
	0x2B15U, 0x1EDDU, 0x1218U, 0x1986U, 0x014EU, 0x2687U, 0x2961U, 0x0594U, 0x2358U, 0x02D9U, 0x2824U, 0x0CD9U, 0x13E4U, 0x0829U, 0x0CD4U, 0x24C0U,
	0x260DU, 0x1F7AU, 0x0163U, 0x0D36U, 0x2193U, 0x1BC6U, 0x06DFU, 0x0E7BU, 0x0AABU, 0x0F5CU, 0x1CE7U, 0x18EAU, 0x1A5BU, 0x2F70U, 0x0E35U, 0x0D83U,
	0x0E00U, 0x1FB0U, 0x2624U, 0x2A9CU, 0x14D3U, 0x137DU, 0x10B6U, 0x0689U, 0x01E0U, 0x0B1AU, 0x2FF8U, 0x03FEU, 0x265DU, 0x0153U, 0x1962U, 0x2DE1U,
	0x2094U, 0x0CE0U, 0x1164U, 0x095CU, 0x0082U, 0x1102U, 0x14FEU, 0x0B15U, 0x13CBU, 0x0895U, 0x2655U, 0x2F8BU, 0x0EA4U, 0x2C48U, 0x1687U, 0x2CC6U,
	0x0663U, 0x0AD0U, 0x1F62U, 0x0499U, 0x2D2BU, 0x1203U, 0x2F75U, 0x28C4U, 0x246EU, 0x1CE1U, 0x0BEBU, 0x26C3U, 0x03E8U, 0x1F21U, 0x23EEU, 0x0051U,
	0x2CEBU, 0x03BBU, 0x090FU, 0x2B6FU, 0x13DEU, 0x2AD3U, 0x243BU, 0x2380U, 0x0ABBU, 0x12EEU, 0x0E80U, 0x0C3FU, 0x1D3CU, 0x0DE1U, 0x2BDBU, 0x270BU,
	0x0DD6U, 0x2251U, 0x09F1U, 0x21DCU, 0x2B45U, 0x2993U, 0x16E4U, 0x2386U, 0x1FDBU, 0x1999U, 0x2AE8U, 0x02D2U, 0x2A3AU, 0x3000U, 0x2036U, 0x1BE7U,
	0x1372U, 0x2ABAU, 0x1970U, 0x0D00U, 0x19A1U, 0x11EFU, 0x139FU, 0x16C4U, 0x25C0U, 0x2C4CU, 0x25B2U, 0x1D2CU, 0x0AB8U, 0x2443U, 0x0233U, 0x0B9FU,
	0x2449U, 0x029FU, 0x2439U, 0x2F0EU, 0x0C40U, 0x1BBAU, 0x095FU, 0x0D48U, 0x01DCU, 0x2236U, 0x0F91U, 0x1329U, 0x01A4U, 0x15B7U, 0x29F9U, 0x277FU,
	0x084EU, 0x065EU, 0x0C72U, 0x1AE2U, 0x0481U, 0x0B44U, 0x2738U, 0x2031U, 0x14D4U, 0x0DB6U, 0x24D0U, 0x26BFU, 0x2352U, 0x2583U, 0x0F8AU, 0x0B99U,
	0x1155U, 0x0003U, 0x2F61U, 0x0C4DU, 0x0F4BU, 0x278BU, 0x1337U, 0x2F90U, 0x122EU, 0x2A6FU, 0x2910U, 0x2982U, 0x1B56U, 0x2571U, 0x134AU, 0x21CDU,
	0x0FD9U, 0x233AU, 0x2968U, 0x0D24U, 0x1EEDU, 0x087EU, 0x0B1FU, 0x113EU, 0x13B2U, 0x0901U, 0x0FD5U, 0x0A55U, 0x2525U, 0x1BB6U, 0x2A35U, 0x1CE2U,
	0x1CECU, 0x2C08U, 0x13DCU, 0x0660U, 0x001BU, 0x2407U, 0x0EB3U, 0x05A0U, 0x1D97U, 0x102FU, 0x00F2U, 0x2A00U, 0x2DE0U, 0x1C66U, 0x258BU, 0x0E78U,
	0x0415U, 0x0B2BU, 0x1C6DU, 0x09B1U, 0x1D04U, 0x0162U, 0x1642U, 0x0B60U, 0x2BD6U, 0x13EDU, 0x0961U, 0x01BAU, 0x2108U, 0x0EC2U, 0x2CFCU, 0x0186U,
	0x10F1U, 0x01B3U, 0x0562U, 0x0778U, 0x094DU, 0x1544U, 0x01EDU, 0x2001U, 0x2BD8U, 0x085FU, 0x0194U, 0x1225U, 0x1B64U, 0x0490U, 0x0CB0U, 0x04B7U,
	0x29BAU, 0x1370U, 0x036BU, 0x213DU, 0x13E0U, 0x1F45U, 0x1C6EU, 0x03EAU, 0x1797U, 0x0976U, 0x2776U, 0x0A06U, 0x0985U, 0x21C3U, 0x1786U, 0x0BABU,
	0x13EEU, 0x2E65U, 0x15D4U, 0x16D5U, 0x0BF0U, 0x09E0U, 0x2161U, 0x1C9EU, 0x0F87U, 0x1CEEU, 0x1936U, 0x0C0FU, 0x162CU, 0x2A78U, 0x2730U, 0x1E68U,
	0x2FC5U, 0x0A9DU, 0x2A02U, 0x2381U, 0x1935U, 0x11D6U, 0x08D4U, 0x0044U, 0x0F66U, 0x1B91U, 0x21EAU, 0x052FU, 0x133CU, 0x12ADU, 0x2C0BU, 0x01C0U,
	0x2B96U, 0x05A5U, 0x12FCU, 0x0465U, 0x1584U, 0x04FBU, 0x1666U, 0x2B69U, 0x23D7U, 0x2530U, 0x00D4U, 0x174EU, 0x2DBEU, 0x20D0U, 0x1A25U, 0x1763U,
	0x10ABU, 0x1615U, 0x2664U, 0x08E3U, 0x0EB5U, 0x2A13U, 0x1C3AU, 0x1050U, 0x0DCEU, 0x2088U, 0x2925U, 0x1031U, 0x11D4U, 0x225AU, 0x0811U, 0x16C2U,
	0x0992U, 0x06A9U, 0x2CD3U, 0x2E61U, 0x02CCU, 0x27C3U, 0x278DU, 0x1528U, 0x2B49U, 0x1277U, 0x074AU, 0x145BU, 0x2EAAU, 0x0D78U, 0x11BAU, 0x288DU,
	0x0E05U, 0x02CDU, 0x2AA4U, 0x0BA6U, 0x06B9U, 0x2A01U, 0x1FFAU, 0x2684U, 0x1898U, 0x0CCEU, 0x1524U, 0x1F90U, 0x04C2U, 0x13C5U, 0x01B6U, 0x0DBBU,
	0x1F73U, 0x0264U, 0x1083U, 0x0D28U, 0x2F84U, 0x021CU, 0x1F83U, 0x05F6U, 0x0C5BU, 0x0FC0U, 0x1812U, 0x12E8U, 0x0814U, 0x056DU, 0x2EA7U, 0x1ECDU,
	0x10A9U, 0x21A3U, 0x2E31U, 0x2879U, 0x1459U, 0x0444U, 0x0C85U, 0x0D1FU, 0x2185U, 0x0CA6U, 0x0D79U, 0x2B91U, 0x28DFU, 0x2493U, 0x1189U, 0x239EU,
	0x0405U, 0x0799U, 0x2AD4U, 0x165CU, 0x1A23U, 0x22F1U, 0x289DU, 0x21D9U, 0x098AU, 0x04E0U, 0x1C06U, 0x1CB6U, 0x195CU, 0x208AU, 0x18BAU, 0x0864U,
	0x21BBU, 0x24B3U, 0x2ADFU, 0x06D0U, 0x2096U, 0x0152U, 0x0997U, 0x19C7U, 0x1017U, 0x0D0FU, 0x279AU, 0x2A0FU, 0x0014U, 0x1C77U, 0x1200U, 0x142BU,
	0x17C5U, 0x1FBAU, 0x040EU, 0x039BU, 0x17CCU, 0x274AU, 0x00C1U, 0x2511U, 0x2E79U, 0x0889U, 0x28D5U, 0x2E58U, 0x0179U, 0x1E1FU, 0x29ADU, 0x2E8AU,
	0x1566U, 0x224AU, 0x2B67U, 0x2529U, 0x0796U, 0x0D50U, 0x0A0FU, 0x048DU, 0x0570U, 0x1698U, 0x2B1AU, 0x01FAU, 0x0A72U, 0x08A4U, 0x2335U, 0x0D0AU,
	0x06C9U, 0x2D93U, 0x1193U, 0x19D9U, 0x2D85U, 0x1A18U, 0x2073U, 0x0B83U, 0x270EU, 0x22D2U, 0x1F12U, 0x22C0U, 0x1CD0U, 0x0DC8U, 0x2110U, 0x108BU,
	0x2A86U, 0x28F5U, 0x17CEU, 0x1BBCU, 0x1494U, 0x2F6FU, 0x2E6BU, 0x296AU, 0x1CD7U, 0x1558U, 0x1DC3U, 0x0200U, 0x0B54U, 0x2F12U, 0x11CAU, 0x2C1FU,
	0x264EU, 0x27FBU, 0x0BE2U, 0x2AC1U, 0x2A45U, 0x2074U, 0x0D4FU, 0x2E32U, 0x11FDU, 0x2580U, 0x102AU, 0x2F4DU, 0x1585U, 0x2F35U, 0x2A80U, 0x1B9EU,
	0x1E86U, 0x1B83U, 0x04D4U, 0x0BC9U, 0x2BE0U, 0x0A28U, 0x1261U, 0x23D0U, 0x1460U, 0x0BD4U, 0x0938U, 0x2E95U, 0x1A73U, 0x04CAU, 0x109BU, 0x1283U,
	0x1F01U, 0x24F5U, 0x1D1FU, 0x2569U, 0x2101U, 0x0732U, 0x0048U, 0x1011U, 0x2003U, 0x2286U, 0x1EE7U, 0x2B28U, 0x196CU, 0x241CU, 0x0A53U, 0x2BBAU,
	0x1629U, 0x0BCCU, 0x1AE3U, 0x1DC8U, 0x21ACU, 0x1B5AU, 0x1D5FU, 0x03B0U, 0x1B66U, 0x2903U, 0x04E3U, 0x1522U, 0x2BF1U, 0x07F3U, 0x1814U, 0x075AU,
	0x0C16U, 0x1E5BU, 0x1D2DU, 0x0488U, 0x0AAAU, 0x1523U, 0x08CDU, 0x28B5U, 0x1F9FU, 0x2436U, 0x24E9U, 0x2653U, 0x136EU, 0x11D5U, 0x290AU, 0x1C2BU,
	0x2760U, 0x291EU, 0x2F44U, 0x23D5U, 0x2591U, 0x1BCFU, 0x04FFU, 0x0361U, 0x0546U, 0x1939U, 0x0EE7U, 0x293BU, 0x20E4U, 0x1EBAU, 0x2963U, 0x2A07U,
	0x1F34U, 0x1E56U, 0x2E38U, 0x0008U, 0x212EU, 0x233DU, 0x28C8U, 0x1971U, 0x2153U, 0x0D7EU, 0x107AU, 0x1126U, 0x25E0U, 0x036FU, 0x08E4U, 0x03D6U,
	0x2CF7U, 0x1E69U, 0x0A42U, 0x2DEFU, 0x2207U, 0x1DA8U, 0x2277U, 0x06A5U, 0x2474U, 0x2A38U, 0x2485U, 0x2803U, 0x22FDU, 0x008BU, 0x230CU, 0x09E4U,
	0x1852U, 0x2130U, 0x0625U, 0x20FBU, 0x0A2AU, 0x2894U, 0x1C03U, 0x2E0BU, 0x18B0U, 0x1229U, 0x178AU, 0x2490U, 0x2114U, 0x2970U, 0x2E2FU, 0x0406U,
	0x2CEAU, 0x0982U, 0x24F6U, 0x0B39U, 0x16B0U, 0x2FECU, 0x0460U, 0x09E7U, 0x2C97U, 0x08FDU, 0x00AAU, 0x19EFU, 0x10C1U, 0x26FEU, 0x0096U, 0x2D79U,
	0x1E63U, 0x25B4U, 0x1555U, 0x247FU, 0x2E94U, 0x2C90U, 0x0787U, 0x03F7U, 0x055BU, 0x2FE9U, 0x0500U, 0x2D9BU, 0x15ABU, 0x13AFU, 0x264CU, 0x0388U,
	0x270CU, 0x2E60U, 0x26DFU, 0x1255U, 0x2274U, 0x17FAU, 0x115BU, 0x0D5AU, 0x113BU, 0x0636U, 0x04C7U, 0x26E3U, 0x289EU, 0x1C12U, 0x070AU, 0x0613U,
	0x2CC7U, 0x13B3U, 0x0576U, 0x23EFU, 0x1964U, 0x2253U, 0x2987U, 0x1A0FU, 0x1D92U, 0x2D12U, 0x2C73U, 0x18F5U, 0x0BF9U, 0x05E2U, 0x1647U, 0x1E7EU,
	0x2DBFU, 0x1B09U, 0x2E3FU, 0x0798U, 0x2E03U, 0x1235U, 0x150AU, 0x25C3U, 0x2121U, 0x0E56U, 0x137BU, 0x26BCU, 0x22E1U, 0x124CU, 0x003FU, 0x140FU,
	0x25B8U, 0x2A83U, 0x14E5U, 0x0B81U, 0x2148U, 0x1D0AU, 0x2361U, 0x2EDCU, 0x087BU, 0x2269U, 0x04F1U, 0x2442U, 0x159AU, 0x15E4U, 0x2099U, 0x1FFEU,
	0x2D57U, 0x03D4U, 0x13DAU, 0x11EEU, 0x034CU, 0x1452U, 0x1457U, 0x0FD2U, 0x0237U, 0x2484U, 0x14A9U, 0x161EU, 0x2104U, 0x25DEU, 0x0C95U, 0x10B1U,
	0x0C30U, 0x1828U, 0x17C6U, 0x19F3U, 0x2158U, 0x209CU, 0x14FAU, 0x2231U, 0x0F59U, 0x06AAU, 0x0C9DU, 0x127AU, 0x07E5U, 0x24F1U, 0x0DF4U, 0x0502U,
	0x08A5U, 0x1FC8U, 0x2124U, 0x2D02U, 0x2F29U, 0x2FCFU, 0x1A6BU, 0x0301U, 0x034DU, 0x0E8BU, 0x2871U, 0x0007U, 0x1108U, 0x0CD5U, 0x23AFU, 0x1C43U,
	0x1C96U, 0x0CD7U, 0x1344U, 0x1476U, 0x02A2U, 0x2A64U, 0x0B5AU, 0x0C68U, 0x0D42U, 0x194BU, 0x0B27U, 0x1307U, 0x1CA4U, 0x1BF7U, 0x0CAAU, 0x2761U,
	0x0256U, 0x016EU, 0x13C2U, 0x0C93U, 0x2998U, 0x17DAU, 0x2806U, 0x2A28U, 0x09BEU, 0x287BU, 0x1138U, 0x178BU, 0x16B7U, 0x077BU, 0x0113U, 0x2B5DU,
	0x0A6EU, 0x1FC0U, 0x02CEU, 0x1C35U, 0x0661U, 0x165EU, 0x272FU, 0x242FU, 0x22D4U, 0x2D66U, 0x1AF3U, 0x215AU, 0x0824U, 0x08FFU, 0x2040U, 0x1222U,
	0x0517U, 0x08BCU, 0x1E35U, 0x0F70U, 0x156FU, 0x1E4CU, 0x204DU, 0x2709U, 0x2CD4U, 0x289AU, 0x1AC3U, 0x16A4U, 0x24BBU, 0x100FU, 0x179DU, 0x16CDU,
	0x10A0U, 0x25A1U, 0x094AU, 0x2699U, 0x2DBBU, 0x0224U, 0x0DD8U, 0x16C3U, 0x023AU, 0x132FU, 0x20F6U, 0x16BEU, 0x188EU, 0x1693U, 0x0C24U, 0x2D7BU,
	0x02AFU, 0x0F4AU, 0x20A7U, 0x2F1EU, 0x1E9BU, 0x0232U, 0x2AEEU, 0x1029U, 0x1481U, 0x0D31U, 0x0084U, 0x0574U, 0x1D63U, 0x1C95U, 0x0BC0U, 0x2F2BU,
	0x182FU, 0x2B61U, 0x16A6U, 0x09B0U, 0x0CDEU, 0x1AFBU, 0x1129U, 0x0E32U, 0x09ABU, 0x063DU, 0x1352U, 0x2396U, 0x1C4CU, 0x0854U, 0x13DFU, 0x250CU,
	0x11F8U, 0x1262U, 0x0BAAU, 0x1E42U, 0x239FU, 0x18B1U, 0x1B3CU, 0x2BA4U, 0x138DU, 0x1EC0U, 0x2823U, 0x12A0U, 0x2D7DU, 0x184FU, 0x0FA6U, 0x29D9U,
	0x1658U, 0x1C49U, 0x0B95U, 0x0792U, 0x2D21U, 0x1BC8U, 0x2675U, 0x06AEU, 0x1423U, 0x1C38U, 0x1F20U, 0x01DFU, 0x0679U, 0x1BB9U, 0x2995U, 0x292FU,
	0x07D9U, 0x0A43U, 0x0CC1U, 0x0282U, 0x2E75U, 0x1FA5U, 0x086EU, 0x0D82U, 0x2E0EU, 0x02A9U, 0x0223U, 0x080DU, 0x0F39U, 0x2F87U, 0x296BU, 0x2BD0U,
	0x0B1EU, 0x1705U, 0x2465U, 0x20DFU, 0x260CU, 0x2541U, 0x1D4AU, 0x1D01U, 0x1C10U, 0x12F1U, 0x0DE0U, 0x188CU, 0x2C87U, 0x056BU, 0x0F11U, 0x269AU,
	0x078CU, 0x1715U, 0x010FU, 0x1278U, 0x179AU, 0x2822U, 0x03C2U, 0x0AA6U, 0x0D03U, 0x053CU, 0x28DCU, 0x05E7U, 0x0E4EU, 0x0D17U, 0x15EFU, 0x0ADBU,
	0x1795U, 0x1504U, 0x2F43U, 0x299CU, 0x0F29U, 0x2BF5U, 0x07D1U, 0x087AU, 0x2797U, 0x0B63U, 0x00C2U, 0x1F4AU, 0x1A76U, 0x2376U, 0x1CE8U, 0x1323U,
	0x21D2U, 0x2FD5U, 0x192BU, 0x1B9BU, 0x0FB9U, 0x1C16U, 0x1635U, 0x267AU, 0x0563U, 0x01B1U, 0x15CDU, 0x0F45U, 0x2F1CU, 0x1AE8U, 0x051EU, 0x104CU,
	0x1BDDU, 0x1990U, 0x2CC8U, 0x0DECU, 0x2C5AU, 0x1961U, 0x1692U, 0x1D3AU, 0x24BCU, 0x0A48U, 0x2BB7U, 0x0702U, 0x17F1U, 0x118BU, 0x1874U, 0x1CC6U,
	0x2636U, 0x22A0U, 0x097CU, 0x25C1U, 0x0DF3U, 0x0AC9U, 0x10D7U, 0x07E6U, 0x0E8CU, 0x26EDU, 0x1421U, 0x27C6U, 0x0A03U, 0x19E0U, 0x0C1DU, 0x25EBU,
	0x2639U, 0x114BU, 0x15C9U, 0x2661U, 0x057DU, 0x2B7FU, 0x1066U, 0x24B0U, 0x08FAU, 0x14BFU, 0x0DA2U, 0x2EB7U, 0x2F74U, 0x2E8BU, 0x2DEAU, 0x12A1U,
	0x17F5U, 0x2A70U, 0x08DAU, 0x0D9BU, 0x206FU, 0x229FU, 0x29B2U, 0x11A7U, 0x055AU, 0x05AFU, 0x20E7U, 0x0D65U, 0x187DU, 0x18C8U, 0x0671U, 0x19F0U,
	0x2DF5U, 0x0315U, 0x1BA4U, 0x12D8U, 0x25BAU, 0x1EF5U, 0x0D18U, 0x1BECU, 0x1CDFU, 0x1721U, 0x2E90U, 0x13ABU, 0x24C5U, 0x064AU, 0x209DU, 0x08E2U,
	0x2799U, 0x2FD6U, 0x28F6U, 0x2FB5U, 0x14D2U, 0x1944U, 0x2C9DU, 0x1654U, 0x2B73U, 0x0FD6U, 0x237DU, 0x1D1BU, 0x1838U, 0x2763U, 0x0B8CU, 0x0B90U,
	0x15D6U, 0x0B47U, 0x2698U, 0x2C7EU, 0x1BBDU, 0x126CU, 0x1995U, 0x2742U, 0x057FU, 0x1FF1U, 0x0899U, 0x051AU, 0x1025U, 0x1C2FU, 0x2100U, 0x0CF9U,
	0x117DU, 0x08F0U, 0x2360U, 0x04A2U, 0x2E7EU, 0x1BA7U, 0x2D55U, 0x0F62U, 0x07EAU, 0x080EU, 0x1274U, 0x160DU, 0x2E84U, 0x28FEU, 0x15EEU, 0x10A2U,
	0x273BU, 0x0EDCU, 0x1791U, 0x2C20U, 0x2DE9U, 0x1868U, 0x1A71U, 0x1058U, 0x09F8U, 0x296CU, 0x1F04U, 0x13A0U, 0x0326U, 0x2FD8U, 0x188BU, 0x27E8U,
	0x1D32U, 0x17A6U, 0x22DBU, 0x04F5U, 0x2AB4U, 0x0F38U, 0x2467U, 0x1551U, 0x0BA0U, 0x2807U, 0x0962U, 0x2BF4U, 0x076FU, 0x2E9DU, 0x2A2AU, 0x2C6EU,
	0x2F93U, 0x0B75U, 0x2D03U, 0x0916U, 0x1636U, 0x20B3U, 0x002FU, 0x107DU, 0x1C3BU, 0x0A89U, 0x0E2CU, 0x1181U, 0x1343U, 0x1A3DU, 0x28BEU, 0x2336U,
	0x0477U, 0x1509U, 0x1E38U, 0x2E1CU, 0x28A6U, 0x1DDBU, 0x17D7U, 0x17BEU, 0x25E3U, 0x221BU, 0x1531U, 0x0476U, 0x0804U, 0x01DBU, 0x0D0DU, 0x2B78U,
	0x268FU, 0x007BU, 0x1661U, 0x184BU, 0x02F6U, 0x2522U, 0x13BFU, 0x1DE8U, 0x194FU, 0x0BA3U, 0x036DU, 0x15AFU, 0x10AFU, 0x2EFAU, 0x16CAU, 0x29B9U,
	0x19B4U, 0x042CU, 0x1185U, 0x0AB9U, 0x13DBU, 0x0C27U, 0x17EEU, 0x22E0U, 0x2772U, 0x2122U, 0x1910U, 0x2795U, 0x22CEU, 0x200FU, 0x0259U, 0x201AU,
	0x21B4U, 0x1D23U, 0x2E2CU, 0x155BU, 0x0453U, 0x2501U, 0x1A9FU, 0x269CU, 0x0D16U, 0x277AU, 0x26C2U, 0x29DDU, 0x08B9U, 0x0C3EU, 0x0323U, 0x112CU,
	0x175AU, 0x19DAU, 0x0D5DU, 0x0D51U, 0x258CU, 0x08B1U, 0x007FU, 0x2257U, 0x1521U, 0x00E4U, 0x0081U, 0x16C9U, 0x0A2CU, 0x1D06U, 0x1436U, 0x0E75U,
	0x168BU, 0x15AAU, 0x1CAEU, 0x1232U, 0x2D4EU, 0x07D2U, 0x1EF4U, 0x100EU, 0x1573U, 0x0730U, 0x10B3U, 0x17DEU, 0x12EDU, 0x2B0DU, 0x2826U, 0x014BU,
	0x1EA7U, 0x1CE0U, 0x2C21U, 0x12A9U, 0x2ED0U, 0x21F3U, 0x0D86U, 0x1077U, 0x071BU, 0x03DEU, 0x21C5U, 0x1AEEU, 0x0645U, 0x281FU, 0x0462U, 0x2E5AU,
	0x010DU, 0x1E06U, 0x1EE2U, 0x180AU, 0x0966U, 0x14D8U, 0x186DU, 0x1536U, 0x0C92U, 0x2206U, 0x1991U, 0x0E5DU, 0x2CFAU, 0x0D14U, 0x168FU, 0x2E8FU,
	0x2665U, 0x031CU, 0x2A2FU, 0x0F8BU, 0x1968U, 0x0B37U, 0x19EDU, 0x0AE4U, 0x0749U, 0x1A22U, 0x2E5EU, 0x1483U, 0x148CU, 0x2DA6U, 0x1D9EU, 0x17BFU,
	0x0AE1U, 0x2769U, 0x0A4CU, 0x242AU, 0x1212U, 0x0C2FU, 0x0643U, 0x03ACU, 0x1D51U, 0x2491U, 0x21F4U, 0x2B6BU, 0x0347U, 0x0134U, 0x0FD7U, 0x2EC8U,
	0x0B55U, 0x294BU, 0x25E4U, 0x1C54U, 0x1AF1U, 0x2CE8U, 0x0532U, 0x2CC3U, 0x25F3U, 0x25ADU, 0x06CAU, 0x27CCU, 0x0AE5U, 0x104DU, 0x2AB3U, 0x14FFU,
	0x085AU, 0x210CU, 0x0DA5U, 0x1D62U, 0x12AAU, 0x2E1AU, 0x2574U, 0x0356U, 0x2E8DU, 0x2500U, 0x0AD4U, 0x1282U, 0x2913U, 0x182DU, 0x06BBU, 0x1E73U,
	0x2EC2U, 0x12D3U, 0x1420U, 0x2D8DU, 0x239CU, 0x2A06U, 0x0EEFU, 0x2B04U, 0x0043U, 0x2CF4U, 0x02B2U, 0x2DF6U, 0x030EU, 0x2A7DU, 0x1625U, 0x22E8U,
	0x2951U, 0x0202U, 0x04EDU, 0x0B5DU, 0x1BFCU, 0x267BU, 0x2BE1U, 0x0461U, 0x1A89U, 0x15B3U, 0x1ACEU, 0x0718U, 0x2B2EU, 0x1E71U, 0x2898U, 0x0EBBU,
	0x0B03U, 0x22FFU, 0x15B2U, 0x1B3FU, 0x1230U, 0x1EE1U, 0x2143U, 0x09ECU, 0x1E31U, 0x268CU, 0x1856U, 0x0A14U, 0x2B95U, 0x0B6CU, 0x2EE3U, 0x1430U,
	0x14CAU, 0x177BU, 0x1BD0U, 0x04A9U, 0x0F85U, 0x287CU, 0x2103U, 0x2BA5U, 0x0712U, 0x07DCU, 0x2CDFU, 0x190EU, 0x1FA7U, 0x25FFU, 0x05B5U, 0x07FDU,
	0x26D7U, 0x108CU, 0x1D93U, 0x274BU, 0x27EBU, 0x0621U, 0x0927U, 0x00C9U, 0x23A2U, 0x075CU, 0x2789U, 0x2C44U, 0x0334U, 0x0EF7U, 0x11F1U, 0x0AD2U,
	0x0E79U, 0x04AFU, 0x163BU, 0x03D0U, 0x0F98U, 0x1AB9U, 0x1EE9U, 0x1F9AU, 0x213AU, 0x0DEAU, 0x29FBU, 0x1BF1U, 0x0C60U, 0x22DEU, 0x1C92U, 0x23F3U,
	0x0D44U, 0x0DBDU, 0x035AU, 0x2372U, 0x1700U, 0x11C5U, 0x1C5FU, 0x2A92U, 0x1EECU, 0x0E45U, 0x2706U, 0x2109U, 0x2C3AU, 0x123DU, 0x035FU, 0x068FU,
	0x262CU, 0x2C65U, 0x007CU, 0x03ABU, 0x2A27U, 0x0DC2U, 0x2250U, 0x27F2U, 0x111DU, 0x2385U, 0x19C8U, 0x20A3U, 0x1D38U, 0x24FDU, 0x0B74U, 0x0635U,
	0x0F52U, 0x2F1BU, 0x0FEAU, 0x2105U, 0x1BA3U, 0x189FU, 0x1EFCU, 0x11D7U, 0x1E57U, 0x0B06U, 0x1422U, 0x21FFU, 0x206BU, 0x09BAU, 0x094BU, 0x20D2U,
	0x225EU, 0x0711U, 0x0728U, 0x18C5U, 0x04E9U, 0x2279U, 0x119CU, 0x15DBU, 0x1176U, 0x0160U, 0x26ADU, 0x132DU, 0x123BU, 0x0F55U, 0x0E5CU, 0x1C37U,
	0x035CU, 0x17E4U, 0x05F0U, 0x0327U, 0x16BBU, 0x2060U, 0x217AU, 0x1C32U, 0x134FU, 0x04EAU, 0x29F1U, 0x25B6U, 0x1C55U, 0x0456U, 0x08C5U, 0x26ECU,
	0x170FU, 0x1B1EU, 0x29DFU, 0x2DB2U, 0x090DU, 0x06FCU, 0x0B88U, 0x22ACU, 0x1060U, 0x1759U, 0x12E5U, 0x2944U, 0x2237U, 0x285EU, 0x2743U, 0x10A5U,
	0x2C7FU, 0x03A2U, 0x2E45U, 0x14EFU, 0x2470U, 0x1153U, 0x041EU, 0x072DU, 0x133FU, 0x0158U, 0x0857U, 0x0260U, 0x1974U, 0x25E5U, 0x1B20U, 0x0D64U,
	0x0F7CU, 0x2C7AU, 0x2C1DU, 0x29C5U, 0x0531U, 0x0289U, 0x18CEU, 0x24DBU, 0x005CU, 0x2C88U, 0x1932U, 0x232BU, 0x1C8EU, 0x0B0EU, 0x0277U, 0x02CBU,
	0x1E3FU, 0x05ABU, 0x11BCU, 0x1CFFU, 0x0419U, 0x2410U, 0x0CD3U, 0x2A87U, 0x1832U, 0x1A0CU, 0x22F3U, 0x0A50U, 0x0468U, 0x0BB0U, 0x10B8U, 0x2AFCU,
	0x1F3AU, 0x2BADU, 0x16D1U, 0x0148U, 0x1042U, 0x04A7U, 0x27E6U, 0x2304U, 0x162FU, 0x1923U, 0x037CU, 0x1F08U, 0x10C0U, 0x2CC5U, 0x1C7DU, 0x0D43U,
	0x1369U, 0x2EB8U, 0x248AU, 0x0B20U, 0x0302U, 0x0FCFU, 0x14F2U, 0x2068U, 0x0675U, 0x02D4U, 0x092EU, 0x0859U, 0x2A68U, 0x1643U, 0x2CCFU, 0x157CU,
	0x250EU, 0x1094U, 0x0BE8U, 0x0817U, 0x20B2U, 0x1F92U, 0x2C64U, 0x0F9CU, 0x041BU, 0x1882U, 0x0506U, 0x0AF1U, 0x0C18U, 0x12CDU, 0x1560U, 0x14F3U,
	0x1154U, 0x05CAU, 0x1B47U, 0x1C18U, 0x121DU, 0x2CA4U, 0x235DU, 0x15F7U, 0x0409U, 0x207EU, 0x1B3AU, 0x0731U, 0x0EDBU, 0x0E8DU, 0x1806U, 0x283BU,
	0x2DC2U, 0x09B4U, 0x0A8BU, 0x0838U, 0x258DU, 0x02EAU, 0x1499U, 0x128CU, 0x1B8FU, 0x2C29U, 0x0CFCU, 0x2DADU, 0x1851U, 0x26F7U, 0x220CU, 0x00C5U,
	0x10CBU, 0x1D39U, 0x0996U, 0x1F8EU, 0x1477U, 0x16F6U, 0x2785U, 0x135FU, 0x2265U, 0x0EA1U, 0x03DBU, 0x0A3AU, 0x212CU, 0x2ECBU, 0x0094U, 0x0906U,
	0x0BB9U, 0x279BU, 0x1FE2U, 0x2129U, 0x20EFU, 0x0F2EU, 0x167CU, 0x0C51U, 0x0C49U, 0x17BCU, 0x2E46U, 0x0F28U, 0x0AD7U, 0x012DU, 0x014CU, 0x0214U,
	0x0370U, 0x045AU, 0x17F0U, 0x1752U, 0x0E54U, 0x1A6EU, 0x2E89U, 0x0C1BU, 0x0E2DU, 0x0BBAU, 0x1EA3U, 0x03FBU, 0x25ECU, 0x1E1DU, 0x0A17U, 0x0656U,
	0x0A58U, 0x0ED7U, 0x289CU, 0x27A0U, 0x146CU, 0x2682U, 0x0A6BU, 0x0114U, 0x0BACU, 0x12B4U, 0x0A95U, 0x2E74U, 0x1598U, 0x2172U, 0x2866U, 0x0F93U,
	0x22C9U, 0x0CF1U, 0x2DDAU, 0x0F0FU, 0x272AU, 0x1111U, 0x11DEU, 0x1895U, 0x2ACEU, 0x0905U, 0x1F00U, 0x2ABCU, 0x0988U, 0x106EU, 0x23D3U, 0x0C4BU,
	0x13A6U, 0x1E54U, 0x0EA2U, 0x07D5U, 0x16FCU, 0x28E1U, 0x2BF9U, 0x09BCU, 0x0534U, 0x2135U, 0x251BU, 0x257BU, 0x23A7U, 0x1A7AU, 0x2C09U, 0x0D4EU,
	0x1266U, 0x06EDU, 0x0EA8U, 0x152CU, 0x0D69U, 0x27FFU, 0x1B0DU, 0x1B27U, 0x2753U, 0x1437U, 0x19F7U, 0x011FU, 0x1A3AU, 0x2E13U, 0x16E9U, 0x06A3U
};

const std::vector<ushort> RLWEQ12289N2048::PsisInvMontgomery =
{
	0x0080U, 0x27D2U, 0x198FU, 0x2617U, 0x1601U, 0x2984U, 0x0F10U, 0x237EU, 0x07E4U, 0x015DU, 0x20D1U, 0x1A8FU, 0x15B9U, 0x191EU, 0x15B0U, 0x0B11U,
	0x1684U, 0x2604U, 0x1858U, 0x0098U, 0x1D49U, 0x275AU, 0x1E3BU, 0x1121U, 0x0D4CU, 0x11E3U, 0x0C25U, 0x155FU, 0x1C9FU, 0x1DF8U, 0x288AU, 0x28CCU,
	0x2FD4U, 0x19C1U, 0x0424U, 0x26BDU, 0x0924U, 0x04E8U, 0x18B5U, 0x01C6U, 0x04BAU, 0x20E6U, 0x0B57U, 0x03CAU, 0x2A3EU, 0x116CU, 0x2261U, 0x2AFDU,
	0x0B96U, 0x0623U, 0x2472U, 0x14CBU, 0x1595U, 0x10EBU, 0x1900U, 0x16DBU, 0x1DD4U, 0x2057U, 0x2C1CU, 0x0B9DU, 0x2111U, 0x2E78U, 0x0A80U, 0x1429U,
	0x08B0U, 0x1FD3U, 0x1E0CU, 0x07C2U, 0x1C4AU, 0x1947U, 0x15B1U, 0x1CA1U, 0x1117U, 0x1DB0U, 0x1824U, 0x2F6CU, 0x1767U, 0x2861U, 0x28CBU, 0x1E44U,
	0x1F2EU, 0x0C78U, 0x26F1U, 0x0A51U, 0x0ACAU, 0x17AEU, 0x2737U, 0x2798U, 0x0F04U, 0x10C2U, 0x18FFU, 0x054BU, 0x2341U, 0x28ABU, 0x2C50U, 0x0CCAU,
	0x26F3U, 0x2D71U, 0x2FF1U, 0x0706U, 0x26CFU, 0x253EU, 0x0340U, 0x12D0U, 0x2E1FU, 0x1F91U, 0x1704U, 0x1DD5U, 0x01E6U, 0x26AFU, 0x0349U, 0x20DDU,
	0x2D4BU, 0x049EU, 0x1530U, 0x1340U, 0x2CF6U, 0x2FEEU, 0x0257U, 0x0715U, 0x0E39U, 0x03DCU, 0x1657U, 0x0FC4U, 0x1C7CU, 0x2755U, 0x266DU, 0x2C42U,
	0x06EFU, 0x12E7U, 0x1206U, 0x02C8U, 0x177CU, 0x1929U, 0x16DCU, 0x2F64U, 0x1AEAU, 0x23C8U, 0x0B69U, 0x1FE4U, 0x2896U, 0x0B87U, 0x1EB9U, 0x15D3U,
	0x01B4U, 0x18A1U, 0x228EU, 0x113CU, 0x0772U, 0x0F67U, 0x1B4EU, 0x0FE3U, 0x2CE1U, 0x0F25U, 0x1446U, 0x25F6U, 0x127DU, 0x1C8DU, 0x01DEU, 0x2A32U,
	0x2EB1U, 0x037BU, 0x2EEBU, 0x0E06U, 0x143FU, 0x0B08U, 0x0877U, 0x26D8U, 0x034AU, 0x026CU, 0x27DEU, 0x2C4BU, 0x14FCU, 0x1213U, 0x2714U, 0x00F4U,
	0x0CE7U, 0x1438U, 0x201BU, 0x2E72U, 0x0122U, 0x04B6U, 0x0AA7U, 0x210BU, 0x251AU, 0x2B0EU, 0x1620U, 0x09E8U, 0x26E1U, 0x1157U, 0x0198U, 0x0CEBU,
	0x2A77U, 0x0A67U, 0x0D22U, 0x0052U, 0x0002U, 0x2320U, 0x2527U, 0x1F59U, 0x2F99U, 0x2DA7U, 0x243DU, 0x020EU, 0x1520U, 0x1A46U, 0x23C4U, 0x252BU,
	0x0597U, 0x19E5U, 0x0C57U, 0x236DU, 0x2D5BU, 0x2D99U, 0x1E62U, 0x1E03U, 0x29B6U, 0x1D1EU, 0x0439U, 0x1785U, 0x2736U, 0x1608U, 0x1471U, 0x1916U,
	0x1933U, 0x0678U, 0x2923U, 0x27A4U, 0x21C0U, 0x2FA8U, 0x1511U, 0x02DBU, 0x1525U, 0x1214U, 0x08A3U, 0x2B88U, 0x0493U, 0x1404U, 0x1EEEU, 0x2890U,
	0x0229U, 0x0F46U, 0x17CAU, 0x02ECU, 0x1FAFU, 0x15D9U, 0x0B12U, 0x2814U, 0x2097U, 0x1004U, 0x0064U, 0x1C1CU, 0x2178U, 0x1F42U, 0x1BB1U, 0x1A6FU,
	0x23C5U, 0x06BAU, 0x002AU, 0x1191U, 0x0C23U, 0x2240U, 0x2779U, 0x2EA0U, 0x28F2U, 0x2B26U, 0x0B97U, 0x17B3U, 0x1F05U, 0x0C77U, 0x1561U, 0x0FBEU,
	0x131EU, 0x17E2U, 0x2864U, 0x2D7AU, 0x0DFDU, 0x0632U, 0x0BDCU, 0x236AU, 0x28ACU, 0x0DDFU, 0x075DU, 0x1E9FU, 0x2D3DU, 0x2EC4U, 0x0124U, 0x27D6U,
	0x2FCEU, 0x1063U, 0x24B2U, 0x28B4U, 0x0A5CU, 0x0BF6U, 0x0C00U, 0x2B9DU, 0x255CU, 0x0215U, 0x000DU, 0x244CU, 0x1979U, 0x23BFU, 0x2D5DU, 0x20B8U,
	0x1388U, 0x0D5BU, 0x294EU, 0x1AC4U, 0x2876U, 0x1993U, 0x0C55U, 0x004DU, 0x0834U, 0x0E40U, 0x1ECAU, 0x205DU, 0x0579U, 0x1B10U, 0x1F1AU, 0x2D40U,
	0x0372U, 0x20DEU, 0x0EDAU, 0x2F32U, 0x0CDCU, 0x130CU, 0x2BC9U, 0x2A0CU, 0x035EU, 0x11A5U, 0x1B5CU, 0x15BEU, 0x10ECU, 0x2A90U, 0x116EU, 0x1580U,
	0x2023U, 0x2AEFU, 0x05BBU, 0x2218U, 0x0907U, 0x17A3U, 0x260BU, 0x0345U, 0x0A9EU, 0x12FEU, 0x25EEU, 0x1600U, 0x17F4U, 0x147DU, 0x2BD2U, 0x0818U,
	0x028AU, 0x26B3U, 0x1988U, 0x0B29U, 0x0BFBU, 0x03CEU, 0x107CU, 0x2BB9U, 0x0111U, 0x2A2DU, 0x06E2U, 0x1E9CU, 0x288EU, 0x0F0AU, 0x1A20U, 0x2872U,
	0x0354U, 0x2209U, 0x219DU, 0x0904U, 0x12F4U, 0x0651U, 0x1C41U, 0x0B3AU, 0x1685U, 0x0793U, 0x12EBU, 0x2845U, 0x1D15U, 0x262DU, 0x1859U, 0x1228U,
	0x17DCU, 0x1F06U, 0x1E07U, 0x0FF4U, 0x076AU, 0x12EAU, 0x16B5U, 0x2282U, 0x2E81U, 0x188DU, 0x1355U, 0x1DBEU, 0x1DFFU, 0x1377U, 0x02D1U, 0x2589U,
	0x1855U, 0x2BEAU, 0x2D90U, 0x1055U, 0x1ED7U, 0x14A8U, 0x1EF2U, 0x0ECEU, 0x1C76U, 0x1DF7U, 0x16FAU, 0x2E39U, 0x0827U, 0x19F5U, 0x0551U, 0x2C9FU,
	0x081DU, 0x2A59U, 0x0B92U, 0x1FE5U, 0x0A25U, 0x061AU, 0x1665U, 0x159FU, 0x0087U, 0x12BFU, 0x2395U, 0x1BCCU, 0x1495U, 0x2149U, 0x15E3U, 0x2AAFU,
	0x21D3U, 0x2D51U, 0x0DFCU, 0x24A3U, 0x1149U, 0x2BBEU, 0x28E0U, 0x0F0CU, 0x0D3FU, 0x1D98U, 0x22ADU, 0x21A1U, 0x1F43U, 0x2D41U, 0x1502U, 0x1B71U,
	0x0686U, 0x2EFEU, 0x0BAFU, 0x0D2AU, 0x2CD0U, 0x049BU, 0x1081U, 0x2387U, 0x15F1U, 0x0089U, 0x05DEU, 0x18BBU, 0x0B24U, 0x142DU, 0x1EEFU, 0x0A1FU,
	0x2CBDU, 0x06F2U, 0x1796U, 0x01BFU, 0x19CDU, 0x16E0U, 0x15A2U, 0x0536U, 0x0278U, 0x0A99U, 0x1B30U, 0x110EU, 0x0FA3U, 0x18F8U, 0x1A5EU, 0x193BU,
	0x02F5U, 0x2DBCU, 0x1505U, 0x2020U, 0x2640U, 0x1602U, 0x0B13U, 0x09A3U, 0x1B2AU, 0x07B0U, 0x0030U, 0x1AEFU, 0x1B96U, 0x2049U, 0x2641U, 0x2792U,
	0x05A6U, 0x014FU, 0x1AF6U, 0x0683U, 0x2A4FU, 0x1BF6U, 0x2626U, 0x2D6CU, 0x0822U, 0x2227U, 0x2072U, 0x2642U, 0x0921U, 0x0039U, 0x28FCU, 0x1AC2U,
	0x0556U, 0x246DU, 0x1CFDU, 0x00B5U, 0x0A8EU, 0x1A04U, 0x1CBCU, 0x0B3DU, 0x1B34U, 0x274DU, 0x29F0U, 0x27A9U, 0x198EU, 0x1487U, 0x1B6EU, 0x01D7U,
	0x0F44U, 0x24ABU, 0x0DC6U, 0x0056U, 0x1641U, 0x0D6CU, 0x03D7U, 0x1E89U, 0x2AE5U, 0x161FU, 0x2859U, 0x2C4EU, 0x19ABU, 0x01CCU, 0x0E18U, 0x0058U,
	0x0960U, 0x0292U, 0x2330U, 0x1E21U, 0x288BU, 0x0A5BU, 0x2A67U, 0x116DU, 0x03F0U, 0x2590U, 0x0342U, 0x05EFU, 0x2345U, 0x0EE9U, 0x169CU, 0x1B7BU,
	0x2623U, 0x28BDU, 0x1869U, 0x0B22U, 0x210EU, 0x29C9U, 0x1AC7U, 0x2D25U, 0x094CU, 0x235AU, 0x2FB2U, 0x04ADU, 0x2C9BU, 0x21DFU, 0x100CU, 0x2CE2U,
	0x20B5U, 0x0ED9U, 0x1DA2U, 0x1249U, 0x1B60U, 0x2BFDU, 0x2B39U, 0x0940U, 0x109EU, 0x10CCU, 0x089BU, 0x2F0BU, 0x2FFBU, 0x26A3U, 0x208EU, 0x01F7U,
	0x0138U, 0x070EU, 0x234CU, 0x29D7U, 0x20A2U, 0x1130U, 0x24B7U, 0x2082U, 0x1F3CU, 0x1253U, 0x0AFCU, 0x25BCU, 0x07F2U, 0x0738U, 0x04DCU, 0x05F9U,
	0x12E1U, 0x08A8U, 0x2356U, 0x1973U, 0x1A61U, 0x1DEAU, 0x22AFU, 0x14C0U, 0x1469U, 0x1C99U, 0x149AU, 0x1917U, 0x2AC3U, 0x010BU, 0x20CFU, 0x2770U,
	0x2093U, 0x29C6U, 0x1618U, 0x0D6BU, 0x2248U, 0x23F6U, 0x0338U, 0x1653U, 0x2986U, 0x022FU, 0x18A4U, 0x273DU, 0x00F5U, 0x1E77U, 0x0ECBU, 0x17C7U,
	0x2E3EU, 0x2FF6U, 0x2ED5U, 0x0BAEU, 0x2B9BU, 0x023CU, 0x0CEFU, 0x10B5U, 0x24B4U, 0x1BD3U, 0x2F83U, 0x2B4FU, 0x0B98U, 0x2943U, 0x1998U, 0x0423U,
	0x152DU, 0x0E91U, 0x0D3CU, 0x18E9U, 0x02F3U, 0x0A9CU, 0x1FDFU, 0x00C7U, 0x26A8U, 0x185CU, 0x16D7U, 0x0795U, 0x060AU, 0x1D6BU, 0x0C6DU, 0x25C5U,
	0x15FFU, 0x0664U, 0x19EAU, 0x0425U, 0x084CU, 0x03B7U, 0x2C95U, 0x1881U, 0x0099U, 0x2ED9U, 0x21EDU, 0x15E7U, 0x10EDU, 0x0C1FU, 0x0C01U, 0x0D2CU,
	0x1FEFU, 0x29C2U, 0x2FDAU, 0x231FU, 0x1397U, 0x24C6U, 0x07ECU, 0x2DDBU, 0x256AU, 0x07F0U, 0x1419U, 0x0FB6U, 0x16A1U, 0x1349U, 0x0B02U, 0x2F1AU,
	0x1765U, 0x0541U, 0x03A4U, 0x2EECU, 0x1F96U, 0x0ED2U, 0x02B4U, 0x0843U, 0x25ABU, 0x2D69U, 0x0373U, 0x026DU, 0x096DU, 0x26DEU, 0x0CA8U, 0x11DFU,
	0x25E7U, 0x2B13U, 0x0DEEU, 0x1EC8U, 0x2D3EU, 0x1053U, 0x2BB8U, 0x1F82U, 0x2F9AU, 0x0F36U, 0x1ED0U, 0x29BBU, 0x14ECU, 0x1919U, 0x1DE2U, 0x2632U,
	0x1027U, 0x2708U, 0x1E39U, 0x1E02U, 0x1826U, 0x228BU, 0x0C8DU, 0x17B9U, 0x2863U, 0x1BEAU, 0x136AU, 0x0E86U, 0x0C10U, 0x2497U, 0x2E8EU, 0x0CD8U,
	0x2CCEU, 0x117CU, 0x1B5BU, 0x042EU, 0x1659U, 0x02E3U, 0x11A2U, 0x16ADU, 0x2605U, 0x29E8U, 0x2B2CU, 0x14F5U, 0x2726U, 0x1D0EU, 0x0B3FU, 0x0E53U,
	0x1C73U, 0x1948U, 0x2741U, 0x1734U, 0x08C3U, 0x1D7CU, 0x16F7U, 0x298AU, 0x186EU, 0x02F0U, 0x05EDU, 0x0025U, 0x19C3U, 0x2744U, 0x1BE3U, 0x287DU,
	0x0480U, 0x165BU, 0x2603U, 0x06C8U, 0x0605U, 0x259DU, 0x278EU, 0x1F68U, 0x1703U, 0x0C45U, 0x0753U, 0x2F03U, 0x037DU, 0x220AU, 0x032CU, 0x0397U,
	0x0AA0U, 0x061DU, 0x1B14U, 0x0558U, 0x178CU, 0x1223U, 0x200EU, 0x0A26U, 0x17AAU, 0x10F8U, 0x0D4BU, 0x0053U, 0x1192U, 0x1DB3U, 0x1CD3U, 0x1F25U,
	0x2E6CU, 0x27C5U, 0x2544U, 0x0C9EU, 0x2243U, 0x2C28U, 0x1E59U, 0x0FF6U, 0x2A8AU, 0x0810U, 0x060DU, 0x221AU, 0x2C27U, 0x0CC9U, 0x1563U, 0x02DDU,
	0x0844U, 0x073AU, 0x27FCU, 0x2B20U, 0x0239U, 0x0840U, 0x20FCU, 0x0DAFU, 0x1C6FU, 0x0309U, 0x0CF4U, 0x0883U, 0x0993U, 0x2230U, 0x2E7FU, 0x256EU,
	0x1E2FU, 0x2E66U, 0x1E67U, 0x15D1U, 0x0E95U, 0x237BU, 0x0335U, 0x11A4U, 0x09CCU, 0x1B2BU, 0x1940U, 0x2AC4U, 0x129BU, 0x1B62U, 0x1F1CU, 0x205FU,
	0x2899U, 0x1036U, 0x0E72U, 0x2CD8U, 0x0118U, 0x151AU, 0x10E8U, 0x1451U, 0x2722U, 0x06CFU, 0x20F3U, 0x2FA3U, 0x1D43U, 0x1DFCU, 0x0EC8U, 0x1318U,
	0x0E84U, 0x18F1U, 0x2F71U, 0x0F35U, 0x0D40U, 0x2F28U, 0x1D40U, 0x194DU, 0x1F0FU, 0x2C14U, 0x0F20U, 0x1C78U, 0x1116U, 0x0C20U, 0x1D91U, 0x07BFU,
	0x179BU, 0x298EU, 0x2EADU, 0x1D3DU, 0x149EU, 0x2F56U, 0x150FU, 0x0FBCU, 0x1FFFU, 0x22BCU, 0x090BU, 0x2DE2U, 0x1057U, 0x11F6U, 0x09CEU, 0x0E4AU,
	0x0E66U, 0x1A1CU, 0x1233U, 0x1908U, 0x1358U, 0x226DU, 0x0DB8U, 0x2A7CU, 0x0235U, 0x2202U, 0x06AFU, 0x2EFFU, 0x1D3FU, 0x07BDU, 0x247CU, 0x0467U,
	0x0F54U, 0x1DA5U, 0x16F8U, 0x0B19U, 0x1301U, 0x2A9DU, 0x05B9U, 0x2EF9U, 0x13E1U, 0x284BU, 0x2673U, 0x059FU, 0x1662U, 0x10F0U, 0x10CEU, 0x2BBBU,
	0x2431U, 0x1F53U, 0x263BU, 0x1E34U, 0x2634U, 0x0346U, 0x1C2EU, 0x0D91U, 0x1D9AU, 0x15CCU, 0x16C7U, 0x0E9BU, 0x2CD9U, 0x12A8U, 0x0FADU, 0x0894U,
	0x141DU, 0x25F5U, 0x00EDU, 0x21FAU, 0x0A32U, 0x2A66U, 0x2FDEU, 0x095DU, 0x2DE4U, 0x0376U, 0x071CU, 0x2927U, 0x0DE2U, 0x0C0CU, 0x0E58U, 0x1441U,
	0x2E28U, 0x2D9EU, 0x1630U, 0x02E2U, 0x0012U, 0x1C1AU, 0x2E59U, 0x2A1CU, 0x2C59U, 0x1AD7U, 0x261FU, 0x127EU, 0x2E1DU, 0x2C72U, 0x21DEU, 0x2E7DU,
	0x024EU, 0x2909U, 0x0F0DU, 0x1ECFU, 0x182BU, 0x1A59U, 0x216DU, 0x1E16U, 0x275FU, 0x1609U, 0x2601U, 0x13A9U, 0x10DFU, 0x0644U, 0x27F6U, 0x21C2U,
	0x22C7U, 0x0A37U, 0x2234U, 0x14BDU, 0x0FBAU, 0x2CE0U, 0x2D96U, 0x19B3U, 0x2E4AU, 0x12B1U, 0x1DBAU, 0x07C0U, 0x292BU, 0x2421U, 0x2659U, 0x1D09U,
	0x1371U, 0x2974U, 0x1616U, 0x1A4CU, 0x2D22U, 0x049DU, 0x03A0U, 0x18ADU, 0x0549U, 0x0021U, 0x0384U, 0x0CF7U, 0x0D32U, 0x294DU, 0x0934U, 0x2DE3U,
	0x21E7U, 0x0C89U, 0x017AU, 0x0E16U, 0x0D39U, 0x143AU, 0x133AU, 0x2398U, 0x207BU, 0x044EU, 0x084DU, 0x1547U, 0x2728U, 0x102DU, 0x0065U, 0x2DACU,
	0x1C0BU, 0x16EEU, 0x1B7DU, 0x1942U, 0x1DE3U, 0x07C1U, 0x0ABAU, 0x1EB4U, 0x1E05U, 0x1CD5U, 0x1244U, 0x2392U, 0x171DU, 0x24DCU, 0x0A44U, 0x167FU,
	0x2E36U, 0x0378U, 0x2A3CU, 0x1E4DU, 0x2D3BU, 0x0BA4U, 0x0BFEU, 0x087DU, 0x0035U, 0x12BDU, 0x0075U, 0x26A6U, 0x253DU, 0x21B1U, 0x183DU, 0x0672U,
	0x1FC5U, 0x1831U, 0x23B7U, 0x00DFU, 0x1C1FU, 0x2627U, 0x0EFBU, 0x02B5U, 0x19D3U, 0x203EU, 0x2515U, 0x033FU, 0x0140U, 0x038BU, 0x27E5U, 0x1738U,
	0x1F02U, 0x07C8U, 0x25A8U, 0x28BAU, 0x13BAU, 0x1B69U, 0x0A09U, 0x2A65U, 0x1E4EU, 0x0ECAU, 0x0637U, 0x03AAU, 0x0849U, 0x2F09U, 0x0CDBU, 0x017CU,
	0x0135U, 0x025FU, 0x0392U, 0x12D2U, 0x213EU, 0x14B7U, 0x065CU, 0x1D6DU, 0x2F8DU, 0x1AEBU, 0x0557U, 0x05FCU, 0x1790U, 0x2862U, 0x0A5AU, 0x18D7U,
	0x16DAU, 0x0C44U, 0x25C4U, 0x046FU, 0x0BD1U, 0x223EU, 0x0459U, 0x0979U, 0x0999U, 0x2B8EU, 0x0DF1U, 0x2377U, 0x1CF7U, 0x2758U, 0x2B1CU, 0x1BFBU,
	0x1DF4U, 0x124BU, 0x0E7FU, 0x2123U, 0x1A91U, 0x08D8U, 0x0E44U, 0x0508U, 0x0AA9U, 0x142AU, 0x1A40U, 0x1A66U, 0x15B8U, 0x078EU, 0x1B1DU, 0x1365U,
	0x16B8U, 0x2731U, 0x1E3AU, 0x2F92U, 0x12B9U, 0x1A37U, 0x0C59U, 0x168CU, 0x2281U, 0x1CF1U, 0x1DFAU, 0x1BA9U, 0x1DF2U, 0x1F2CU, 0x1959U, 0x01CAU,
	0x1AF9U, 0x0B32U, 0x1A08U, 0x02FAU, 0x258AU, 0x29E5U, 0x267DU, 0x253CU, 0x1021U, 0x1DAAU, 0x0EC6U, 0x1FF9U, 0x195EU, 0x2999U, 0x2FD9U, 0x118FU,
	0x1904U, 0x2D1AU, 0x0820U, 0x2F08U, 0x2B4CU, 0x06E9U, 0x0989U, 0x0293U, 0x04BFU, 0x18B4U, 0x2037U, 0x0A27U, 0x293AU, 0x0B8BU, 0x04F7U, 0x001FU,
	0x1065U, 0x17D1U, 0x1DDAU, 0x29B5U, 0x0B8EU, 0x09A6U, 0x1FD9U, 0x276AU, 0x1735U, 0x1A53U, 0x180FU, 0x0EA3U, 0x2956U, 0x1741U, 0x2D0FU, 0x06F4U,
	0x0AB5U, 0x26E6U, 0x0925U, 0x1678U, 0x1348U, 0x2973U, 0x0486U, 0x1FB9U, 0x0575U, 0x04D1U, 0x04CDU, 0x1E8FU, 0x0442U, 0x2592U, 0x2662U, 0x2B16U,
	0x129DU, 0x0E81U, 0x1442U, 0x0FB7U, 0x2831U, 0x0DDCU, 0x02AEU, 0x2EE6U, 0x1638U, 0x2F60U, 0x04ABU, 0x097BU, 0x2CB9U, 0x20B4U, 0x2D4AU, 0x230FU,
	0x1A9DU, 0x1B94U, 0x2D2AU, 0x011AU, 0x0839U, 0x060EU, 0x03A9U, 0x26BAU, 0x0475U, 0x152FU, 0x01B0U, 0x0262U, 0x0841U, 0x028BU, 0x0842U, 0x141BU,
	0x02D5U, 0x0BC7U, 0x02A1U, 0x0A9AU, 0x2CC0U, 0x0BA1U, 0x074FU, 0x18C4U, 0x1931U, 0x1359U, 0x03FCU, 0x084BU, 0x2228U, 0x0201U, 0x20D5U, 0x00CDU,
	0x0005U, 0x27CFU, 0x14E0U, 0x065DU, 0x2EFDU, 0x2A20U, 0x1297U, 0x0523U, 0x04CFU, 0x11AEU, 0x2969U, 0x14EAU, 0x25FAU, 0x28BCU, 0x06D9U, 0x108FU,
	0x2962U, 0x29FDU, 0x1BF4U, 0x0306U, 0x0845U, 0x18CAU, 0x228FU, 0x22CCU, 0x0205U, 0x0713U, 0x1B1AU, 0x0EB6U, 0x26FFU, 0x102CU, 0x1ED6U, 0x0318U,
	0x245FU, 0x1722U, 0x1CAAU, 0x1F24U, 0x1CDCU, 0x2D32U, 0x2D98U, 0x0CD2U, 0x2370U, 0x0209U, 0x1D52U, 0x0566U, 0x1D67U, 0x262FU, 0x0B78U, 0x074EU,
	0x0734U, 0x1E9EU, 0x1BADU, 0x0430U, 0x0978U, 0x280AU, 0x00FAU, 0x1645U, 0x23ABU, 0x1E24U, 0x2D3AU, 0x2A15U, 0x116BU, 0x10D1U, 0x0069U, 0x13EAU,
	0x0657U, 0x259FU, 0x1AADU, 0x148EU, 0x065BU, 0x0BDDU, 0x04F9U, 0x233FU, 0x058BU, 0x0729U, 0x1D72U, 0x275BU, 0x2FCBU, 0x0BB4U, 0x04F8U, 0x11AFU,
	0x0AF8U, 0x0F7DU, 0x1DA6U, 0x2888U, 0x05ACU, 0x0AADU, 0x2A69U, 0x048CU, 0x2917U, 0x14E8U, 0x02DAU, 0x0395U, 0x1781U, 0x10F7U, 0x2BBCU, 0x05C0U,
	0x19E6U, 0x1DE7U, 0x1E00U, 0x2507U, 0x2D65U, 0x1D35U, 0x1821U, 0x2ABDU, 0x27AEU, 0x115CU, 0x2967U, 0x21CBU, 0x00D3U, 0x0963U, 0x0741U, 0x12E9U,
	0x0525U, 0x27EFU, 0x06D4U, 0x18C1U, 0x1482U, 0x23A0U, 0x1CF8U, 0x08E7U, 0x25AFU, 0x13A7U, 0x1DC0U, 0x111EU, 0x089DU, 0x222AU, 0x2521U, 0x15FBU,
	0x2026U, 0x2F9EU, 0x2575U, 0x091CU, 0x086BU, 0x141CU, 0x1465U, 0x065AU, 0x2A4EU, 0x0A66U, 0x2B93U, 0x05BFU, 0x0856U, 0x2354U, 0x2654U, 0x253BU,
	0x2E92U, 0x2317U, 0x171AU, 0x202DU, 0x1A8BU, 0x2F7BU, 0x2ED2U, 0x06FFU, 0x0BE1U, 0x1B38U, 0x0D8BU, 0x143CU, 0x0659U, 0x18BEU, 0x0FD3U, 0x03E6U,
	0x05F3U, 0x0983U, 0x2936U, 0x254DU, 0x1AABU, 0x216FU, 0x1135U, 0x1C85U, 0x0561U, 0x2599U, 0x114FU, 0x051BU, 0x0852U, 0x0D15U, 0x0C07U, 0x168AU,
	0x2F62U, 0x27CBU, 0x2EA2U, 0x1C11U, 0x204CU, 0x2AF0U, 0x174BU, 0x1CABU, 0x00B3U, 0x176FU, 0x24DEU, 0x2D64U, 0x0BA5U, 0x1D8EU, 0x0310U, 0x27E2U,
	0x1289U, 0x2F49U, 0x20C4U, 0x2644U, 0x2C41U, 0x2560U, 0x1854U, 0x1A5AU, 0x02FCU, 0x18A9U, 0x1F0BU, 0x15D5U, 0x24D4U, 0x0DC7U, 0x11E6U, 0x10D4U,
	0x0518U, 0x03A3U, 0x1D5CU, 0x2503U, 0x1726U, 0x02E8U, 0x0970U, 0x2B8DU, 0x2C62U, 0x28E4U, 0x254BU, 0x278CU, 0x2C49U, 0x21DDU, 0x1CEDU, 0x07BBU,
	0x015CU, 0x0F41U, 0x1FFCU, 0x1E0DU, 0x1952U, 0x16DDU, 0x10F3U, 0x157DU, 0x1B74U, 0x0B35U, 0x1EB7U, 0x22B4U, 0x0C8EU, 0x2949U, 0x22F6U, 0x1396U,
	0x1336U, 0x0D59U, 0x062EU, 0x259EU, 0x091DU, 0x19FBU, 0x0EAFU, 0x0C11U, 0x0626U, 0x2921U, 0x0484U, 0x2C9AU, 0x104FU, 0x1579U, 0x0535U, 0x20E9U,
	0x1006U, 0x2384U, 0x1142U, 0x10D0U, 0x1EDAU, 0x1957U, 0x0EABU, 0x25D3U, 0x1BDAU, 0x1A70U, 0x0554U, 0x014DU, 0x27D7U, 0x115DU, 0x0AF6U, 0x1C5EU,
	0x2880U, 0x092FU, 0x0614U, 0x0D07U, 0x062CU, 0x027EU, 0x13F7U, 0x2AA3U, 0x0F17U, 0x0E6BU, 0x11EAU, 0x2713U, 0x1F65U, 0x1254U, 0x1C8CU, 0x204FU,
	0x2F9FU, 0x0704U, 0x03AFU, 0x0017U, 0x13E8U, 0x1338U, 0x0078U, 0x2B55U, 0x14F6U, 0x08B5U, 0x17A1U, 0x02EBU, 0x0E1FU, 0x1B46U, 0x1366U, 0x2848U,
	0x21C4U, 0x15E6U, 0x2F5EU, 0x118CU, 0x1455U, 0x0D60U, 0x211CU, 0x2FA4U, 0x2ED3U, 0x188FU, 0x0674U, 0x12E4U, 0x0D57U, 0x130FU, 0x0077U, 0x19C5U,
	0x1A63U, 0x1109U, 0x17D5U, 0x0418U, 0x1401U, 0x1A3FU, 0x08D6U, 0x1B25U, 0x0FE2U, 0x1B51U, 0x1492U, 0x1C9AU, 0x262AU, 0x13AAU, 0x226FU, 0x00D7U,
	0x1FA2U, 0x218EU, 0x219AU, 0x0455U, 0x233BU, 0x1F4DU, 0x1CDDU, 0x0EC1U, 0x282BU, 0x047EU, 0x233CU, 0x00DCU, 0x1770U, 0x066DU, 0x27F7U, 0x0351U,
	0x1D5AU, 0x01E3U, 0x2200U, 0x1390U, 0x09D8U, 0x2DE7U, 0x0825U, 0x26D6U, 0x102BU, 0x0D46U, 0x0885U, 0x2CB3U, 0x1756U, 0x1DD7U, 0x2506U, 0x1BD5U,
	0x22A2U, 0x2075U, 0x2AF1U, 0x28DBU, 0x173EU, 0x2860U, 0x173BU, 0x23B1U, 0x2782U, 0x0CACU, 0x281EU, 0x1033U, 0x09C3U, 0x0D1EU, 0x1A14U, 0x15B6U,
	0x146FU, 0x25F7U, 0x240DU, 0x1720U, 0x298BU, 0x29FEU, 0x2D84U, 0x2D9AU, 0x2FF2U, 0x1896U, 0x2162U, 0x1CEAU, 0x030CU, 0x11A3U, 0x283DU, 0x2098U,
	0x2194U, 0x2AF8U, 0x13C8U, 0x2144U, 0x1E15U, 0x15CFU, 0x1B76U, 0x2E55U, 0x13DDU, 0x120CU, 0x0C26U, 0x26EFU, 0x1732U, 0x15A4U, 0x2856U, 0x279FU,
	0x29F2U, 0x1AC8U, 0x0EB4U, 0x03DFU, 0x1B06U, 0x2F7EU, 0x0380U, 0x26B9U, 0x22E6U, 0x1A9CU, 0x0A04U, 0x0296U, 0x096EU, 0x086DU, 0x073BU, 0x098BU,
	0x25B3U, 0x29E6U, 0x080CU, 0x1FCFU, 0x07CDU, 0x1D76U, 0x0D99U, 0x1A17U, 0x1A65U, 0x0428U, 0x0CFBU, 0x2371U, 0x1399U, 0x17E5U, 0x2D13U, 0x1D33U,
	0x2502U, 0x0596U, 0x0855U, 0x11C4U, 0x2BC1U, 0x2D8FU, 0x2EC6U, 0x2444U, 0x1CFCU, 0x1F26U, 0x0FFBU, 0x2258U, 0x1CF0U, 0x0C6AU, 0x2116U, 0x2646U,
	0x1F60U, 0x1A86U, 0x07ACU, 0x19F2U, 0x00A2U, 0x0CE5U, 0x2119U, 0x2AF5U, 0x0F19U, 0x018AU, 0x0710U, 0x166BU, 0x1EFDU, 0x0FFAU, 0x10C8U, 0x225DU,
	0x14BEU, 0x214AU, 0x2773U, 0x2542U, 0x197FU, 0x2D1DU, 0x0CCFU, 0x1EC1U, 0x1250U, 0x064DU, 0x0602U, 0x20EEU, 0x07D4U, 0x0863U, 0x179FU, 0x0FCCU,
	0x18F9U, 0x2BEEU, 0x13CEU, 0x2AA2U, 0x2D88U, 0x13D8U, 0x1A3EU, 0x2747U, 0x2092U, 0x1836U, 0x1B85U, 0x15BFU, 0x227CU, 0x2523U, 0x091AU, 0x154CU,
	0x1EF6U, 0x250DU, 0x06C2U, 0x2CA8U, 0x162AU, 0x2985U, 0x20A0U, 0x1E11U, 0x2F91U, 0x0129U, 0x1FA4U, 0x14ADU, 0x16C0U, 0x23AEU, 0x22D3U, 0x1CF3U,
	0x1119U, 0x10CFU, 0x0D4AU, 0x1EC4U, 0x16FFU, 0x2607U, 0x1D07U, 0x2052U, 0x044DU, 0x26BEU, 0x1AB4U, 0x2F7CU, 0x1061U, 0x0192U, 0x038DU, 0x1B04U,
	0x0C5EU, 0x0E5AU, 0x0760U, 0x234EU, 0x1CF6U, 0x15C8U, 0x0088U, 0x244FU, 0x1E28U, 0x1378U, 0x1461U, 0x201CU, 0x1001U, 0x2BB6U, 0x2C63U, 0x0A73U,
	0x1FDEU, 0x1F38U, 0x2C15U, 0x20B0U, 0x170BU, 0x08C2U, 0x0BECU, 0x1C64U, 0x01DDU, 0x18A2U, 0x041DU, 0x0BCFU, 0x2F1FU, 0x0F33U, 0x1A21U, 0x0A01U,
	0x2DE8U, 0x19B5U, 0x2169U, 0x07D7U, 0x0D12U, 0x0758U, 0x26D1U, 0x185DU, 0x2867U, 0x0228U, 0x2DB7U, 0x1D37U, 0x0B40U, 0x1FE3U, 0x1706U, 0x10F4U,
	0x270DU, 0x1607U, 0x02E1U, 0x1E83U, 0x2187U, 0x06ACU, 0x2A50U, 0x2D86U, 0x20B9U, 0x2518U, 0x07EEU, 0x20FAU, 0x1A90U, 0x2749U, 0x13B1U, 0x0D5CU,
	0x0ADDU, 0x1557U, 0x2022U, 0x195FU, 0x0B28U, 0x2A6CU, 0x093BU, 0x18D0U, 0x2BEDU, 0x023EU, 0x000EU, 0x05DBU, 0x140CU, 0x1B6BU, 0x2D29U, 0x1F8BU,
	0x0DA6U, 0x0E62U, 0x03DDU, 0x27E7U, 0x0A57U, 0x1428U, 0x2721U, 0x2540U, 0x2660U, 0x07F6U, 0x1D77U, 0x1F29U, 0x14AAU, 0x1211U, 0x03F4U, 0x0BCEU,
	0x1D8FU, 0x14A0U, 0x2275U, 0x0A35U, 0x2F15U, 0x1F97U, 0x2062U, 0x2D48U, 0x2FF0U, 0x2577U, 0x2C3CU, 0x2D92U, 0x0374U, 0x13FDU, 0x0400U, 0x1E8AU,
	0x0C74U, 0x10B2U, 0x2005U, 0x2C1AU, 0x187EU, 0x2BEBU, 0x0F1FU, 0x0AE8U, 0x1683U, 0x1474U, 0x1DC5U, 0x08ECU, 0x1D7DU, 0x2887U, 0x241DU, 0x101AU,
	0x02BCU, 0x04C0U, 0x2A44U, 0x1ACAU, 0x01D3U, 0x2906U, 0x0A5EU, 0x2F16U, 0x0126U, 0x1AF5U, 0x24F4U, 0x2FBCU, 0x244AU, 0x265AU, 0x2E99U, 0x0E04U,
	0x2120U, 0x15E2U, 0x191FU, 0x2740U, 0x05A4U, 0x0E30U, 0x25D0U, 0x172BU, 0x2AB7U, 0x1E50U, 0x01E9U, 0x2B5EU, 0x2303U, 0x07E1U, 0x2CAFU, 0x0117U,
	0x038AU, 0x1655U, 0x1CA5U, 0x2756U, 0x07FCU, 0x26D5U, 0x2E9CU, 0x12B3U, 0x10D9U, 0x2CE7U, 0x1883U, 0x23B9U, 0x23FFU, 0x1145U, 0x157FU, 0x0E93U,
	0x005BU, 0x0E0FU, 0x224CU, 0x0A34U, 0x1D85U, 0x2504U, 0x28B6U, 0x2D7CU, 0x011CU, 0x2B59U, 0x2B35U, 0x2302U, 0x2652U, 0x021BU, 0x096BU, 0x03BEU,
	0x1782U, 0x2287U, 0x264FU, 0x2D6DU, 0x19B2U, 0x1CBAU, 0x181EU, 0x260EU, 0x07F4U, 0x2A58U, 0x2A03U, 0x2552U, 0x1279U, 0x064EU, 0x1792U, 0x1B81U
};

const std::vector<ushort> RLWEQ12289N2048::BitRevTable =
{
	0x0000U, 0x0400U, 0x0200U, 0x0600U, 0x0100U, 0x0500U, 0x0300U, 0x0700U, 0x0080U, 0x0480U, 0x0280U, 0x0680U, 0x0180U, 0x0580U, 0x0380U, 0x0780U,
	0x0040U, 0x0440U, 0x0240U, 0x0640U, 0x0140U, 0x0540U, 0x0340U, 0x0740U, 0x00C0U, 0x04C0U, 0x02C0U, 0x06C0U, 0x01C0U, 0x05C0U, 0x03C0U, 0x07C0U,
	0x0020U, 0x0420U, 0x0220U, 0x0620U, 0x0120U, 0x0520U, 0x0320U, 0x0720U, 0x00A0U, 0x04A0U, 0x02A0U, 0x06A0U, 0x01A0U, 0x05A0U, 0x03A0U, 0x07A0U,
	0x0060U, 0x0460U, 0x0260U, 0x0660U, 0x0160U, 0x0560U, 0x0360U, 0x0760U, 0x00E0U, 0x04E0U, 0x02E0U, 0x06E0U, 0x01E0U, 0x05E0U, 0x03E0U, 0x07E0U,
	0x0010U, 0x0410U, 0x0210U, 0x0610U, 0x0110U, 0x0510U, 0x0310U, 0x0710U, 0x0090U, 0x0490U, 0x0290U, 0x0690U, 0x0190U, 0x0590U, 0x0390U, 0x0790U,
	0x0050U, 0x0450U, 0x0250U, 0x0650U, 0x0150U, 0x0550U, 0x0350U, 0x0750U, 0x00D0U, 0x04D0U, 0x02D0U, 0x06D0U, 0x01D0U, 0x05D0U, 0x03D0U, 0x07D0U,
	0x0030U, 0x0430U, 0x0230U, 0x0630U, 0x0130U, 0x0530U, 0x0330U, 0x0730U, 0x00B0U, 0x04B0U, 0x02B0U, 0x06B0U, 0x01B0U, 0x05B0U, 0x03B0U, 0x07B0U,
	0x0070U, 0x0470U, 0x0270U, 0x0670U, 0x0170U, 0x0570U, 0x0370U, 0x0770U, 0x00F0U, 0x04F0U, 0x02F0U, 0x06F0U, 0x01F0U, 0x05F0U, 0x03F0U, 0x07F0U,
	0x0008U, 0x0408U, 0x0208U, 0x0608U, 0x0108U, 0x0508U, 0x0308U, 0x0708U, 0x0088U, 0x0488U, 0x0288U, 0x0688U, 0x0188U, 0x0588U, 0x0388U, 0x0788U,
	0x0048U, 0x0448U, 0x0248U, 0x0648U, 0x0148U, 0x0548U, 0x0348U, 0x0748U, 0x00C8U, 0x04C8U, 0x02C8U, 0x06C8U, 0x01C8U, 0x05C8U, 0x03C8U, 0x07C8U,
	0x0028U, 0x0428U, 0x0228U, 0x0628U, 0x0128U, 0x0528U, 0x0328U, 0x0728U, 0x00A8U, 0x04A8U, 0x02A8U, 0x06A8U, 0x01A8U, 0x05A8U, 0x03A8U, 0x07A8U,
	0x0068U, 0x0468U, 0x0268U, 0x0668U, 0x0168U, 0x0568U, 0x0368U, 0x0768U, 0x00E8U, 0x04E8U, 0x02E8U, 0x06E8U, 0x01E8U, 0x05E8U, 0x03E8U, 0x07E8U,
	0x0018U, 0x0418U, 0x0218U, 0x0618U, 0x0118U, 0x0518U, 0x0318U, 0x0718U, 0x0098U, 0x0498U, 0x0298U, 0x0698U, 0x0198U, 0x0598U, 0x0398U, 0x0798U,
	0x0058U, 0x0458U, 0x0258U, 0x0658U, 0x0158U, 0x0558U, 0x0358U, 0x0758U, 0x00D8U, 0x04D8U, 0x02D8U, 0x06D8U, 0x01D8U, 0x05D8U, 0x03D8U, 0x07D8U,
	0x0038U, 0x0438U, 0x0238U, 0x0638U, 0x0138U, 0x0538U, 0x0338U, 0x0738U, 0x00B8U, 0x04B8U, 0x02B8U, 0x06B8U, 0x01B8U, 0x05B8U, 0x03B8U, 0x07B8U,
	0x0078U, 0x0478U, 0x0278U, 0x0678U, 0x0178U, 0x0578U, 0x0378U, 0x0778U, 0x00F8U, 0x04F8U, 0x02F8U, 0x06F8U, 0x01F8U, 0x05F8U, 0x03F8U, 0x07F8U,
	0x0004U, 0x0404U, 0x0204U, 0x0604U, 0x0104U, 0x0504U, 0x0304U, 0x0704U, 0x0084U, 0x0484U, 0x0284U, 0x0684U, 0x0184U, 0x0584U, 0x0384U, 0x0784U,
	0x0044U, 0x0444U, 0x0244U, 0x0644U, 0x0144U, 0x0544U, 0x0344U, 0x0744U, 0x00C4U, 0x04C4U, 0x02C4U, 0x06C4U, 0x01C4U, 0x05C4U, 0x03C4U, 0x07C4U,
	0x0024U, 0x0424U, 0x0224U, 0x0624U, 0x0124U, 0x0524U, 0x0324U, 0x0724U, 0x00A4U, 0x04A4U, 0x02A4U, 0x06A4U, 0x01A4U, 0x05A4U, 0x03A4U, 0x07A4U,
	0x0064U, 0x0464U, 0x0264U, 0x0664U, 0x0164U, 0x0564U, 0x0364U, 0x0764U, 0x00E4U, 0x04E4U, 0x02E4U, 0x06E4U, 0x01E4U, 0x05E4U, 0x03E4U, 0x07E4U,
	0x0014U, 0x0414U, 0x0214U, 0x0614U, 0x0114U, 0x0514U, 0x0314U, 0x0714U, 0x0094U, 0x0494U, 0x0294U, 0x0694U, 0x0194U, 0x0594U, 0x0394U, 0x0794U,
	0x0054U, 0x0454U, 0x0254U, 0x0654U, 0x0154U, 0x0554U, 0x0354U, 0x0754U, 0x00D4U, 0x04D4U, 0x02D4U, 0x06D4U, 0x01D4U, 0x05D4U, 0x03D4U, 0x07D4U,
	0x0034U, 0x0434U, 0x0234U, 0x0634U, 0x0134U, 0x0534U, 0x0334U, 0x0734U, 0x00B4U, 0x04B4U, 0x02B4U, 0x06B4U, 0x01B4U, 0x05B4U, 0x03B4U, 0x07B4U,
	0x0074U, 0x0474U, 0x0274U, 0x0674U, 0x0174U, 0x0574U, 0x0374U, 0x0774U, 0x00F4U, 0x04F4U, 0x02F4U, 0x06F4U, 0x01F4U, 0x05F4U, 0x03F4U, 0x07F4U,
	0x000CU, 0x040CU, 0x020CU, 0x060CU, 0x010CU, 0x050CU, 0x030CU, 0x070CU, 0x008CU, 0x048CU, 0x028CU, 0x068CU, 0x018CU, 0x058CU, 0x038CU, 0x078CU,
	0x004CU, 0x044CU, 0x024CU, 0x064CU, 0x014CU, 0x054CU, 0x034CU, 0x074CU, 0x00CCU, 0x04CCU, 0x02CCU, 0x06CCU, 0x01CCU, 0x05CCU, 0x03CCU, 0x07CCU,
	0x002CU, 0x042CU, 0x022CU, 0x062CU, 0x012CU, 0x052CU, 0x032CU, 0x072CU, 0x00ACU, 0x04ACU, 0x02ACU, 0x06ACU, 0x01ACU, 0x05ACU, 0x03ACU, 0x07ACU,
	0x006CU, 0x046CU, 0x026CU, 0x066CU, 0x016CU, 0x056CU, 0x036CU, 0x076CU, 0x00ECU, 0x04ECU, 0x02ECU, 0x06ECU, 0x01ECU, 0x05ECU, 0x03ECU, 0x07ECU,
	0x001CU, 0x041CU, 0x021CU, 0x061CU, 0x011CU, 0x051CU, 0x031CU, 0x071CU, 0x009CU, 0x049CU, 0x029CU, 0x069CU, 0x019CU, 0x059CU, 0x039CU, 0x079CU,
	0x005CU, 0x045CU, 0x025CU, 0x065CU, 0x015CU, 0x055CU, 0x035CU, 0x075CU, 0x00DCU, 0x04DCU, 0x02DCU, 0x06DCU, 0x01DCU, 0x05DCU, 0x03DCU, 0x07DCU,
	0x003CU, 0x043CU, 0x023CU, 0x063CU, 0x013CU, 0x053CU, 0x033CU, 0x073CU, 0x00BCU, 0x04BCU, 0x02BCU, 0x06BCU, 0x01BCU, 0x05BCU, 0x03BCU, 0x07BCU,
	0x007CU, 0x047CU, 0x027CU, 0x067CU, 0x017CU, 0x057CU, 0x037CU, 0x077CU, 0x00FCU, 0x04FCU, 0x02FCU, 0x06FCU, 0x01FCU, 0x05FCU, 0x03FCU, 0x07FCU,
	0x0002U, 0x0402U, 0x0202U, 0x0602U, 0x0102U, 0x0502U, 0x0302U, 0x0702U, 0x0082U, 0x0482U, 0x0282U, 0x0682U, 0x0182U, 0x0582U, 0x0382U, 0x0782U,
	0x0042U, 0x0442U, 0x0242U, 0x0642U, 0x0142U, 0x0542U, 0x0342U, 0x0742U, 0x00C2U, 0x04C2U, 0x02C2U, 0x06C2U, 0x01C2U, 0x05C2U, 0x03C2U, 0x07C2U,
	0x0022U, 0x0422U, 0x0222U, 0x0622U, 0x0122U, 0x0522U, 0x0322U, 0x0722U, 0x00A2U, 0x04A2U, 0x02A2U, 0x06A2U, 0x01A2U, 0x05A2U, 0x03A2U, 0x07A2U,
	0x0062U, 0x0462U, 0x0262U, 0x0662U, 0x0162U, 0x0562U, 0x0362U, 0x0762U, 0x00E2U, 0x04E2U, 0x02E2U, 0x06E2U, 0x01E2U, 0x05E2U, 0x03E2U, 0x07E2U,
	0x0012U, 0x0412U, 0x0212U, 0x0612U, 0x0112U, 0x0512U, 0x0312U, 0x0712U, 0x0092U, 0x0492U, 0x0292U, 0x0692U, 0x0192U, 0x0592U, 0x0392U, 0x0792U,
	0x0052U, 0x0452U, 0x0252U, 0x0652U, 0x0152U, 0x0552U, 0x0352U, 0x0752U, 0x00D2U, 0x04D2U, 0x02D2U, 0x06D2U, 0x01D2U, 0x05D2U, 0x03D2U, 0x07D2U,
	0x0032U, 0x0432U, 0x0232U, 0x0632U, 0x0132U, 0x0532U, 0x0332U, 0x0732U, 0x00B2U, 0x04B2U, 0x02B2U, 0x06B2U, 0x01B2U, 0x05B2U, 0x03B2U, 0x07B2U,
	0x0072U, 0x0472U, 0x0272U, 0x0672U, 0x0172U, 0x0572U, 0x0372U, 0x0772U, 0x00F2U, 0x04F2U, 0x02F2U, 0x06F2U, 0x01F2U, 0x05F2U, 0x03F2U, 0x07F2U,
	0x000AU, 0x040AU, 0x020AU, 0x060AU, 0x010AU, 0x050AU, 0x030AU, 0x070AU, 0x008AU, 0x048AU, 0x028AU, 0x068AU, 0x018AU, 0x058AU, 0x038AU, 0x078AU,
	0x004AU, 0x044AU, 0x024AU, 0x064AU, 0x014AU, 0x054AU, 0x034AU, 0x074AU, 0x00CAU, 0x04CAU, 0x02CAU, 0x06CAU, 0x01CAU, 0x05CAU, 0x03CAU, 0x07CAU,
	0x002AU, 0x042AU, 0x022AU, 0x062AU, 0x012AU, 0x052AU, 0x032AU, 0x072AU, 0x00AAU, 0x04AAU, 0x02AAU, 0x06AAU, 0x01AAU, 0x05AAU, 0x03AAU, 0x07AAU,
	0x006AU, 0x046AU, 0x026AU, 0x066AU, 0x016AU, 0x056AU, 0x036AU, 0x076AU, 0x00EAU, 0x04EAU, 0x02EAU, 0x06EAU, 0x01EAU, 0x05EAU, 0x03EAU, 0x07EAU,
	0x001AU, 0x041AU, 0x021AU, 0x061AU, 0x011AU, 0x051AU, 0x031AU, 0x071AU, 0x009AU, 0x049AU, 0x029AU, 0x069AU, 0x019AU, 0x059AU, 0x039AU, 0x079AU,
	0x005AU, 0x045AU, 0x025AU, 0x065AU, 0x015AU, 0x055AU, 0x035AU, 0x075AU, 0x00DAU, 0x04DAU, 0x02DAU, 0x06DAU, 0x01DAU, 0x05DAU, 0x03DAU, 0x07DAU,
	0x003AU, 0x043AU, 0x023AU, 0x063AU, 0x013AU, 0x053AU, 0x033AU, 0x073AU, 0x00BAU, 0x04BAU, 0x02BAU, 0x06BAU, 0x01BAU, 0x05BAU, 0x03BAU, 0x07BAU,
	0x007AU, 0x047AU, 0x027AU, 0x067AU, 0x017AU, 0x057AU, 0x037AU, 0x077AU, 0x00FAU, 0x04FAU, 0x02FAU, 0x06FAU, 0x01FAU, 0x05FAU, 0x03FAU, 0x07FAU,
	0x0006U, 0x0406U, 0x0206U, 0x0606U, 0x0106U, 0x0506U, 0x0306U, 0x0706U, 0x0086U, 0x0486U, 0x0286U, 0x0686U, 0x0186U, 0x0586U, 0x0386U, 0x0786U,
	0x0046U, 0x0446U, 0x0246U, 0x0646U, 0x0146U, 0x0546U, 0x0346U, 0x0746U, 0x00C6U, 0x04C6U, 0x02C6U, 0x06C6U, 0x01C6U, 0x05C6U, 0x03C6U, 0x07C6U,
	0x0026U, 0x0426U, 0x0226U, 0x0626U, 0x0126U, 0x0526U, 0x0326U, 0x0726U, 0x00A6U, 0x04A6U, 0x02A6U, 0x06A6U, 0x01A6U, 0x05A6U, 0x03A6U, 0x07A6U,
	0x0066U, 0x0466U, 0x0266U, 0x0666U, 0x0166U, 0x0566U, 0x0366U, 0x0766U, 0x00E6U, 0x04E6U, 0x02E6U, 0x06E6U, 0x01E6U, 0x05E6U, 0x03E6U, 0x07E6U,
	0x0016U, 0x0416U, 0x0216U, 0x0616U, 0x0116U, 0x0516U, 0x0316U, 0x0716U, 0x0096U, 0x0496U, 0x0296U, 0x0696U, 0x0196U, 0x0596U, 0x0396U, 0x0796U,
	0x0056U, 0x0456U, 0x0256U, 0x0656U, 0x0156U, 0x0556U, 0x0356U, 0x0756U, 0x00D6U, 0x04D6U, 0x02D6U, 0x06D6U, 0x01D6U, 0x05D6U, 0x03D6U, 0x07D6U,
	0x0036U, 0x0436U, 0x0236U, 0x0636U, 0x0136U, 0x0536U, 0x0336U, 0x0736U, 0x00B6U, 0x04B6U, 0x02B6U, 0x06B6U, 0x01B6U, 0x05B6U, 0x03B6U, 0x07B6U,
	0x0076U, 0x0476U, 0x0276U, 0x0676U, 0x0176U, 0x0576U, 0x0376U, 0x0776U, 0x00F6U, 0x04F6U, 0x02F6U, 0x06F6U, 0x01F6U, 0x05F6U, 0x03F6U, 0x07F6U,
	0x000EU, 0x040EU, 0x020EU, 0x060EU, 0x010EU, 0x050EU, 0x030EU, 0x070EU, 0x008EU, 0x048EU, 0x028EU, 0x068EU, 0x018EU, 0x058EU, 0x038EU, 0x078EU,
	0x004EU, 0x044EU, 0x024EU, 0x064EU, 0x014EU, 0x054EU, 0x034EU, 0x074EU, 0x00CEU, 0x04CEU, 0x02CEU, 0x06CEU, 0x01CEU, 0x05CEU, 0x03CEU, 0x07CEU,
	0x002EU, 0x042EU, 0x022EU, 0x062EU, 0x012EU, 0x052EU, 0x032EU, 0x072EU, 0x00AEU, 0x04AEU, 0x02AEU, 0x06AEU, 0x01AEU, 0x05AEU, 0x03AEU, 0x07AEU,
	0x006EU, 0x046EU, 0x026EU, 0x066EU, 0x016EU, 0x056EU, 0x036EU, 0x076EU, 0x00EEU, 0x04EEU, 0x02EEU, 0x06EEU, 0x01EEU, 0x05EEU, 0x03EEU, 0x07EEU,
	0x001EU, 0x041EU, 0x021EU, 0x061EU, 0x011EU, 0x051EU, 0x031EU, 0x071EU, 0x009EU, 0x049EU, 0x029EU, 0x069EU, 0x019EU, 0x059EU, 0x039EU, 0x079EU,
	0x005EU, 0x045EU, 0x025EU, 0x065EU, 0x015EU, 0x055EU, 0x035EU, 0x075EU, 0x00DEU, 0x04DEU, 0x02DEU, 0x06DEU, 0x01DEU, 0x05DEU, 0x03DEU, 0x07DEU,
	0x003EU, 0x043EU, 0x023EU, 0x063EU, 0x013EU, 0x053EU, 0x033EU, 0x073EU, 0x00BEU, 0x04BEU, 0x02BEU, 0x06BEU, 0x01BEU, 0x05BEU, 0x03BEU, 0x07BEU,
	0x007EU, 0x047EU, 0x027EU, 0x067EU, 0x017EU, 0x057EU, 0x037EU, 0x077EU, 0x00FEU, 0x04FEU, 0x02FEU, 0x06FEU, 0x01FEU, 0x05FEU, 0x03FEU, 0x07FEU,
	0x0001U, 0x0401U, 0x0201U, 0x0601U, 0x0101U, 0x0501U, 0x0301U, 0x0701U, 0x0081U, 0x0481U, 0x0281U, 0x0681U, 0x0181U, 0x0581U, 0x0381U, 0x0781U,
	0x0041U, 0x0441U, 0x0241U, 0x0641U, 0x0141U, 0x0541U, 0x0341U, 0x0741U, 0x00C1U, 0x04C1U, 0x02C1U, 0x06C1U, 0x01C1U, 0x05C1U, 0x03C1U, 0x07C1U,
	0x0021U, 0x0421U, 0x0221U, 0x0621U, 0x0121U, 0x0521U, 0x0321U, 0x0721U, 0x00A1U, 0x04A1U, 0x02A1U, 0x06A1U, 0x01A1U, 0x05A1U, 0x03A1U, 0x07A1U,
	0x0061U, 0x0461U, 0x0261U, 0x0661U, 0x0161U, 0x0561U, 0x0361U, 0x0761U, 0x00E1U, 0x04E1U, 0x02E1U, 0x06E1U, 0x01E1U, 0x05E1U, 0x03E1U, 0x07E1U,
	0x0011U, 0x0411U, 0x0211U, 0x0611U, 0x0111U, 0x0511U, 0x0311U, 0x0711U, 0x0091U, 0x0491U, 0x0291U, 0x0691U, 0x0191U, 0x0591U, 0x0391U, 0x0791U,
	0x0051U, 0x0451U, 0x0251U, 0x0651U, 0x0151U, 0x0551U, 0x0351U, 0x0751U, 0x00D1U, 0x04D1U, 0x02D1U, 0x06D1U, 0x01D1U, 0x05D1U, 0x03D1U, 0x07D1U,
	0x0031U, 0x0431U, 0x0231U, 0x0631U, 0x0131U, 0x0531U, 0x0331U, 0x0731U, 0x00B1U, 0x04B1U, 0x02B1U, 0x06B1U, 0x01B1U, 0x05B1U, 0x03B1U, 0x07B1U,
	0x0071U, 0x0471U, 0x0271U, 0x0671U, 0x0171U, 0x0571U, 0x0371U, 0x0771U, 0x00F1U, 0x04F1U, 0x02F1U, 0x06F1U, 0x01F1U, 0x05F1U, 0x03F1U, 0x07F1U,
	0x0009U, 0x0409U, 0x0209U, 0x0609U, 0x0109U, 0x0509U, 0x0309U, 0x0709U, 0x0089U, 0x0489U, 0x0289U, 0x0689U, 0x0189U, 0x0589U, 0x0389U, 0x0789U,
	0x0049U, 0x0449U, 0x0249U, 0x0649U, 0x0149U, 0x0549U, 0x0349U, 0x0749U, 0x00C9U, 0x04C9U, 0x02C9U, 0x06C9U, 0x01C9U, 0x05C9U, 0x03C9U, 0x07C9U,
	0x0029U, 0x0429U, 0x0229U, 0x0629U, 0x0129U, 0x0529U, 0x0329U, 0x0729U, 0x00A9U, 0x04A9U, 0x02A9U, 0x06A9U, 0x01A9U, 0x05A9U, 0x03A9U, 0x07A9U,
	0x0069U, 0x0469U, 0x0269U, 0x0669U, 0x0169U, 0x0569U, 0x0369U, 0x0769U, 0x00E9U, 0x04E9U, 0x02E9U, 0x06E9U, 0x01E9U, 0x05E9U, 0x03E9U, 0x07E9U,
	0x0019U, 0x0419U, 0x0219U, 0x0619U, 0x0119U, 0x0519U, 0x0319U, 0x0719U, 0x0099U, 0x0499U, 0x0299U, 0x0699U, 0x0199U, 0x0599U, 0x0399U, 0x0799U,
	0x0059U, 0x0459U, 0x0259U, 0x0659U, 0x0159U, 0x0559U, 0x0359U, 0x0759U, 0x00D9U, 0x04D9U, 0x02D9U, 0x06D9U, 0x01D9U, 0x05D9U, 0x03D9U, 0x07D9U,
	0x0039U, 0x0439U, 0x0239U, 0x0639U, 0x0139U, 0x0539U, 0x0339U, 0x0739U, 0x00B9U, 0x04B9U, 0x02B9U, 0x06B9U, 0x01B9U, 0x05B9U, 0x03B9U, 0x07B9U,
	0x0079U, 0x0479U, 0x0279U, 0x0679U, 0x0179U, 0x0579U, 0x0379U, 0x0779U, 0x00F9U, 0x04F9U, 0x02F9U, 0x06F9U, 0x01F9U, 0x05F9U, 0x03F9U, 0x07F9U,
	0x0005U, 0x0405U, 0x0205U, 0x0605U, 0x0105U, 0x0505U, 0x0305U, 0x0705U, 0x0085U, 0x0485U, 0x0285U, 0x0685U, 0x0185U, 0x0585U, 0x0385U, 0x0785U,
	0x0045U, 0x0445U, 0x0245U, 0x0645U, 0x0145U, 0x0545U, 0x0345U, 0x0745U, 0x00C5U, 0x04C5U, 0x02C5U, 0x06C5U, 0x01C5U, 0x05C5U, 0x03C5U, 0x07C5U,
	0x0025U, 0x0425U, 0x0225U, 0x0625U, 0x0125U, 0x0525U, 0x0325U, 0x0725U, 0x00A5U, 0x04A5U, 0x02A5U, 0x06A5U, 0x01A5U, 0x05A5U, 0x03A5U, 0x07A5U,
	0x0065U, 0x0465U, 0x0265U, 0x0665U, 0x0165U, 0x0565U, 0x0365U, 0x0765U, 0x00E5U, 0x04E5U, 0x02E5U, 0x06E5U, 0x01E5U, 0x05E5U, 0x03E5U, 0x07E5U,
	0x0015U, 0x0415U, 0x0215U, 0x0615U, 0x0115U, 0x0515U, 0x0315U, 0x0715U, 0x0095U, 0x0495U, 0x0295U, 0x0695U, 0x0195U, 0x0595U, 0x0395U, 0x0795U,
	0x0055U, 0x0455U, 0x0255U, 0x0655U, 0x0155U, 0x0555U, 0x0355U, 0x0755U, 0x00D5U, 0x04D5U, 0x02D5U, 0x06D5U, 0x01D5U, 0x05D5U, 0x03D5U, 0x07D5U,
	0x0035U, 0x0435U, 0x0235U, 0x0635U, 0x0135U, 0x0535U, 0x0335U, 0x0735U, 0x00B5U, 0x04B5U, 0x02B5U, 0x06B5U, 0x01B5U, 0x05B5U, 0x03B5U, 0x07B5U,
	0x0075U, 0x0475U, 0x0275U, 0x0675U, 0x0175U, 0x0575U, 0x0375U, 0x0775U, 0x00F5U, 0x04F5U, 0x02F5U, 0x06F5U, 0x01F5U, 0x05F5U, 0x03F5U, 0x07F5U,
	0x000DU, 0x040DU, 0x020DU, 0x060DU, 0x010DU, 0x050DU, 0x030DU, 0x070DU, 0x008DU, 0x048DU, 0x028DU, 0x068DU, 0x018DU, 0x058DU, 0x038DU, 0x078DU,
	0x004DU, 0x044DU, 0x024DU, 0x064DU, 0x014DU, 0x054DU, 0x034DU, 0x074DU, 0x00CDU, 0x04CDU, 0x02CDU, 0x06CDU, 0x01CDU, 0x05CDU, 0x03CDU, 0x07CDU,
	0x002DU, 0x042DU, 0x022DU, 0x062DU, 0x012DU, 0x052DU, 0x032DU, 0x072DU, 0x00ADU, 0x04ADU, 0x02ADU, 0x06ADU, 0x01ADU, 0x05ADU, 0x03ADU, 0x07ADU,
	0x006DU, 0x046DU, 0x026DU, 0x066DU, 0x016DU, 0x056DU, 0x036DU, 0x076DU, 0x00EDU, 0x04EDU, 0x02EDU, 0x06EDU, 0x01EDU, 0x05EDU, 0x03EDU, 0x07EDU,
	0x001DU, 0x041DU, 0x021DU, 0x061DU, 0x011DU, 0x051DU, 0x031DU, 0x071DU, 0x009DU, 0x049DU, 0x029DU, 0x069DU, 0x019DU, 0x059DU, 0x039DU, 0x079DU,
	0x005DU, 0x045DU, 0x025DU, 0x065DU, 0x015DU, 0x055DU, 0x035DU, 0x075DU, 0x00DDU, 0x04DDU, 0x02DDU, 0x06DDU, 0x01DDU, 0x05DDU, 0x03DDU, 0x07DDU,
	0x003DU, 0x043DU, 0x023DU, 0x063DU, 0x013DU, 0x053DU, 0x033DU, 0x073DU, 0x00BDU, 0x04BDU, 0x02BDU, 0x06BDU, 0x01BDU, 0x05BDU, 0x03BDU, 0x07BDU,
	0x007DU, 0x047DU, 0x027DU, 0x067DU, 0x017DU, 0x057DU, 0x037DU, 0x077DU, 0x00FDU, 0x04FDU, 0x02FDU, 0x06FDU, 0x01FDU, 0x05FDU, 0x03FDU, 0x07FDU,
	0x0003U, 0x0403U, 0x0203U, 0x0603U, 0x0103U, 0x0503U, 0x0303U, 0x0703U, 0x0083U, 0x0483U, 0x0283U, 0x0683U, 0x0183U, 0x0583U, 0x0383U, 0x0783U,
	0x0043U, 0x0443U, 0x0243U, 0x0643U, 0x0143U, 0x0543U, 0x0343U, 0x0743U, 0x00C3U, 0x04C3U, 0x02C3U, 0x06C3U, 0x01C3U, 0x05C3U, 0x03C3U, 0x07C3U,
	0x0023U, 0x0423U, 0x0223U, 0x0623U, 0x0123U, 0x0523U, 0x0323U, 0x0723U, 0x00A3U, 0x04A3U, 0x02A3U, 0x06A3U, 0x01A3U, 0x05A3U, 0x03A3U, 0x07A3U,
	0x0063U, 0x0463U, 0x0263U, 0x0663U, 0x0163U, 0x0563U, 0x0363U, 0x0763U, 0x00E3U, 0x04E3U, 0x02E3U, 0x06E3U, 0x01E3U, 0x05E3U, 0x03E3U, 0x07E3U,
	0x0013U, 0x0413U, 0x0213U, 0x0613U, 0x0113U, 0x0513U, 0x0313U, 0x0713U, 0x0093U, 0x0493U, 0x0293U, 0x0693U, 0x0193U, 0x0593U, 0x0393U, 0x0793U,
	0x0053U, 0x0453U, 0x0253U, 0x0653U, 0x0153U, 0x0553U, 0x0353U, 0x0753U, 0x00D3U, 0x04D3U, 0x02D3U, 0x06D3U, 0x01D3U, 0x05D3U, 0x03D3U, 0x07D3U,
	0x0033U, 0x0433U, 0x0233U, 0x0633U, 0x0133U, 0x0533U, 0x0333U, 0x0733U, 0x00B3U, 0x04B3U, 0x02B3U, 0x06B3U, 0x01B3U, 0x05B3U, 0x03B3U, 0x07B3U,
	0x0073U, 0x0473U, 0x0273U, 0x0673U, 0x0173U, 0x0573U, 0x0373U, 0x0773U, 0x00F3U, 0x04F3U, 0x02F3U, 0x06F3U, 0x01F3U, 0x05F3U, 0x03F3U, 0x07F3U,
	0x000BU, 0x040BU, 0x020BU, 0x060BU, 0x010BU, 0x050BU, 0x030BU, 0x070BU, 0x008BU, 0x048BU, 0x028BU, 0x068BU, 0x018BU, 0x058BU, 0x038BU, 0x078BU,
	0x004BU, 0x044BU, 0x024BU, 0x064BU, 0x014BU, 0x054BU, 0x034BU, 0x074BU, 0x00CBU, 0x04CBU, 0x02CBU, 0x06CBU, 0x01CBU, 0x05CBU, 0x03CBU, 0x07CBU,
	0x002BU, 0x042BU, 0x022BU, 0x062BU, 0x012BU, 0x052BU, 0x032BU, 0x072BU, 0x00ABU, 0x04ABU, 0x02ABU, 0x06ABU, 0x01ABU, 0x05ABU, 0x03ABU, 0x07ABU,
	0x006BU, 0x046BU, 0x026BU, 0x066BU, 0x016BU, 0x056BU, 0x036BU, 0x076BU, 0x00EBU, 0x04EBU, 0x02EBU, 0x06EBU, 0x01EBU, 0x05EBU, 0x03EBU, 0x07EBU,
	0x001BU, 0x041BU, 0x021BU, 0x061BU, 0x011BU, 0x051BU, 0x031BU, 0x071BU, 0x009BU, 0x049BU, 0x029BU, 0x069BU, 0x019BU, 0x059BU, 0x039BU, 0x079BU,
	0x005BU, 0x045BU, 0x025BU, 0x065BU, 0x015BU, 0x055BU, 0x035BU, 0x075BU, 0x00DBU, 0x04DBU, 0x02DBU, 0x06DBU, 0x01DBU, 0x05DBU, 0x03DBU, 0x07DBU,
	0x003BU, 0x043BU, 0x023BU, 0x063BU, 0x013BU, 0x053BU, 0x033BU, 0x073BU, 0x00BBU, 0x04BBU, 0x02BBU, 0x06BBU, 0x01BBU, 0x05BBU, 0x03BBU, 0x07BBU,
	0x007BU, 0x047BU, 0x027BU, 0x067BU, 0x017BU, 0x057BU, 0x037BU, 0x077BU, 0x00FBU, 0x04FBU, 0x02FBU, 0x06FBU, 0x01FBU, 0x05FBU, 0x03FBU, 0x07FBU,
	0x0007U, 0x0407U, 0x0207U, 0x0607U, 0x0107U, 0x0507U, 0x0307U, 0x0707U, 0x0087U, 0x0487U, 0x0287U, 0x0687U, 0x0187U, 0x0587U, 0x0387U, 0x0787U,
	0x0047U, 0x0447U, 0x0247U, 0x0647U, 0x0147U, 0x0547U, 0x0347U, 0x0747U, 0x00C7U, 0x04C7U, 0x02C7U, 0x06C7U, 0x01C7U, 0x05C7U, 0x03C7U, 0x07C7U,
	0x0027U, 0x0427U, 0x0227U, 0x0627U, 0x0127U, 0x0527U, 0x0327U, 0x0727U, 0x00A7U, 0x04A7U, 0x02A7U, 0x06A7U, 0x01A7U, 0x05A7U, 0x03A7U, 0x07A7U,
	0x0067U, 0x0467U, 0x0267U, 0x0667U, 0x0167U, 0x0567U, 0x0367U, 0x0767U, 0x00E7U, 0x04E7U, 0x02E7U, 0x06E7U, 0x01E7U, 0x05E7U, 0x03E7U, 0x07E7U,
	0x0017U, 0x0417U, 0x0217U, 0x0617U, 0x0117U, 0x0517U, 0x0317U, 0x0717U, 0x0097U, 0x0497U, 0x0297U, 0x0697U, 0x0197U, 0x0597U, 0x0397U, 0x0797U,
	0x0057U, 0x0457U, 0x0257U, 0x0657U, 0x0157U, 0x0557U, 0x0357U, 0x0757U, 0x00D7U, 0x04D7U, 0x02D7U, 0x06D7U, 0x01D7U, 0x05D7U, 0x03D7U, 0x07D7U,
	0x0037U, 0x0437U, 0x0237U, 0x0637U, 0x0137U, 0x0537U, 0x0337U, 0x0737U, 0x00B7U, 0x04B7U, 0x02B7U, 0x06B7U, 0x01B7U, 0x05B7U, 0x03B7U, 0x07B7U,
	0x0077U, 0x0477U, 0x0277U, 0x0677U, 0x0177U, 0x0577U, 0x0377U, 0x0777U, 0x00F7U, 0x04F7U, 0x02F7U, 0x06F7U, 0x01F7U, 0x05F7U, 0x03F7U, 0x07F7U,
	0x000FU, 0x040FU, 0x020FU, 0x060FU, 0x010FU, 0x050FU, 0x030FU, 0x070FU, 0x008FU, 0x048FU, 0x028FU, 0x068FU, 0x018FU, 0x058FU, 0x038FU, 0x078FU,
	0x004FU, 0x044FU, 0x024FU, 0x064FU, 0x014FU, 0x054FU, 0x034FU, 0x074FU, 0x00CFU, 0x04CFU, 0x02CFU, 0x06CFU, 0x01CFU, 0x05CFU, 0x03CFU, 0x07CFU,
	0x002FU, 0x042FU, 0x022FU, 0x062FU, 0x012FU, 0x052FU, 0x032FU, 0x072FU, 0x00AFU, 0x04AFU, 0x02AFU, 0x06AFU, 0x01AFU, 0x05AFU, 0x03AFU, 0x07AFU,
	0x006FU, 0x046FU, 0x026FU, 0x066FU, 0x016FU, 0x056FU, 0x036FU, 0x076FU, 0x00EFU, 0x04EFU, 0x02EFU, 0x06EFU, 0x01EFU, 0x05EFU, 0x03EFU, 0x07EFU,
	0x001FU, 0x041FU, 0x021FU, 0x061FU, 0x011FU, 0x051FU, 0x031FU, 0x071FU, 0x009FU, 0x049FU, 0x029FU, 0x069FU, 0x019FU, 0x059FU, 0x039FU, 0x079FU,
	0x005FU, 0x045FU, 0x025FU, 0x065FU, 0x015FU, 0x055FU, 0x035FU, 0x075FU, 0x00DFU, 0x04DFU, 0x02DFU, 0x06DFU, 0x01DFU, 0x05DFU, 0x03DFU, 0x07DFU,
	0x003FU, 0x043FU, 0x023FU, 0x063FU, 0x013FU, 0x053FU, 0x033FU, 0x073FU, 0x00BFU, 0x04BFU, 0x02BFU, 0x06BFU, 0x01BFU, 0x05BFU, 0x03BFU, 0x07BFU,
	0x007FU, 0x047FU, 0x027FU, 0x067FU, 0x017FU, 0x057FU, 0x037FU, 0x077FU, 0x00FFU, 0x04FFU, 0x02FFU, 0x06FFU, 0x01FFU, 0x05FFU, 0x03FFU, 0x07FFU
};

//~~~Public Functions~~~//

void RLWEQ12289N2048::CpaDecrypt(std::vector<byte> &Secret, const std::vector<byte> &CipherText, const std::vector<byte> &PrivateKey)
{
	std::array<ushort, RLWE_N> vprime;
	std::array<ushort, RLWE_N> uhat;
	std::array<ushort, RLWE_N> tmp;
	std::array<ushort, RLWE_N> shat;

	PolyFromBytes(shat, PrivateKey);
	DecodeC(uhat, vprime, CipherText);

	PolyMulPointwise(tmp, shat, uhat);
	PolyInvNtt(tmp);
	PolySub(tmp, tmp, vprime);

	PolyToMessage(Secret, tmp);
}

void RLWEQ12289N2048::CpaEncrypt(std::vector<byte> &CipherText, std::vector<byte> &Secret, const std::vector<byte> &PublicKey, const std::vector<byte> &Coin)
{
	std::array<ushort, RLWE_N> sprime;
	std::array<ushort, RLWE_N> eprime;
	std::array<ushort, RLWE_N> vprime;
	std::array<ushort, RLWE_N> ahat;
	std::array<ushort, RLWE_N> bhat;
	std::array<ushort, RLWE_N> eprimeprime;
	std::array<ushort, RLWE_N> uhat;
	std::array<ushort, RLWE_N> v;
	std::vector<byte> seed(RLWE_SEED_SIZE);

	PolyFromMessage(v, Secret);

	DecodePk(bhat, seed, PublicKey);
	PolyUniform(ahat, seed);

	PolySample(sprime, Coin, 0);
	PolySample(eprime, Coin, 1);
	PolySample(eprimeprime, Coin, 2);

	PolyNtt(sprime);
	PolyNtt(eprime);

	PolyMulPointwise(uhat, ahat, sprime);
	PolyAdd(uhat, uhat, eprime);

	PolyMulPointwise(vprime, bhat, sprime);
	PolyInvNtt(vprime);

	PolyAdd(vprime, vprime, eprimeprime);
	PolyAdd(vprime, vprime, v);

	EncodeC(CipherText, uhat, vprime);
}

void RLWEQ12289N2048::CpaGenerate(std::vector<byte> &PublicKey, std::vector<byte> &PrivateKey, std::unique_ptr<Prng::IPrng> &Rng)
{
	std::array<ushort, RLWE_N> ahat;
	std::array<ushort, RLWE_N> ehat;
	std::array<ushort, RLWE_N> ahatshat;
	std::array<ushort, RLWE_N> bhat;
	std::array<ushort, RLWE_N> shat;
	std::vector<byte> pubk(RLWE_SEED_SIZE);
	std::vector<byte> noisek(RLWE_SEED_SIZE);
	std::vector<byte> tmpk(2 * RLWE_SEED_SIZE);

	Rng->Generate(pubk);
	XOF(pubk, 0, pubk.size(), tmpk, 0, tmpk.size(), Keccak::KECCAK256_RATE_SIZE);
	MemoryTools::Copy(tmpk, 0, pubk, 0, pubk.size());
	MemoryTools::Copy(tmpk, pubk.size(), noisek, 0, noisek.size());

	PolyUniform(ahat, pubk);

	PolySample(shat, noisek, 0);
	PolyNtt(shat);

	PolySample(ehat, noisek, 1);
	PolyNtt(ehat);

	PolyMulPointwise(ahatshat, shat, ahat);
	PolyAdd(bhat, ehat, ahatshat);

	PolyToBytes(PrivateKey, shat);
	EncodePk(PublicKey, bhat, pubk);
}

bool RLWEQ12289N2048::Decapsulate(std::vector<byte> &Secret, const std::vector<byte> &CipherText, const std::vector<byte> &PrivateKey)
{
	std::vector<byte> buf(2 * RLWE_SEED_SIZE);
	std::vector<byte> ctcmp(CIPHERTEXT_SIZE);
	// contains key, coins, qrom-hash 
	std::vector<byte> kcoinsd(3 * RLWE_SEED_SIZE);
	std::vector<byte> tmpc(2 * RLWE_SEED_SIZE);
	std::vector<byte> tmppk(PUBLICKEY_SIZE);
	size_t result;

	CpaDecrypt(buf, CipherText, PrivateKey);

	// use hash of pk stored in sk
	MemoryTools::Copy(PrivateKey, PRIVATEKEY_SIZE - (2 * RLWE_SEED_SIZE), buf, RLWE_SEED_SIZE, RLWE_SEED_SIZE);
	XOF(buf, 0, 2 * RLWE_SEED_SIZE, kcoinsd, 0, 3 * RLWE_SEED_SIZE, Keccak::KECCAK256_RATE_SIZE);

	// coins are in kcoinsd+NEWHOPE_SYMBYTES 
	MemoryTools::Copy(kcoinsd, RLWE_SEED_SIZE, tmpc, 0, 2 * RLWE_SEED_SIZE);
	MemoryTools::Copy(PrivateKey, RLWE_CPAPRIVATEKEY_SIZE, tmppk, 0, PUBLICKEY_SIZE);
	CpaEncrypt(ctcmp, buf, tmppk, tmpc);

	MemoryTools::Copy(kcoinsd, 2 * RLWE_SEED_SIZE, ctcmp, RLWE_CPACIPHERTEXT_SIZE, RLWE_SEED_SIZE);
	result = IntegerTools::Verify(CipherText, ctcmp, CipherText.size());

	// overwrite coins in kcoinsd with h(c)  
	XOF(CipherText, 0, CIPHERTEXT_SIZE, kcoinsd, RLWE_SEED_SIZE, RLWE_SEED_SIZE, Keccak::KECCAK256_RATE_SIZE);
	// overwrite pre-k with z on re-encryption failure
	IntegerTools::CMov(PrivateKey, PRIVATEKEY_SIZE - RLWE_SEED_SIZE, kcoinsd, 0, RLWE_SEED_SIZE, static_cast<byte>(result));
	// hash concatenation of pre-k and h(c) to k 
	XOF(kcoinsd, 0, 2 * RLWE_SEED_SIZE, Secret, 0, Secret.size(), Keccak::KECCAK256_RATE_SIZE);

	return (result == 0);
}

void RLWEQ12289N2048::Encapsulate(std::vector<byte> &CipherText, std::vector<byte> &Secret, const std::vector<byte> &PublicKey, std::unique_ptr<Prng::IPrng> &Rng)
{
	// contains key, coins, qrom-hash 
	std::vector<byte> kcoinsd(3 * RLWE_SEED_SIZE);
	std::vector<byte> buf(2 * RLWE_SEED_SIZE);
	std::vector<byte> tmps(2 * RLWE_SEED_SIZE);

	Rng->Generate(buf, 0, RLWE_SEED_SIZE);
	// don't release system RNG output directly
	XOF(buf, 0, RLWE_SEED_SIZE, buf, 0, RLWE_SEED_SIZE, Keccak::KECCAK256_RATE_SIZE);
	// multitarget countermeasure for coins + contributory KEM 
	XOF(PublicKey, 0, PublicKey.size(), buf, RLWE_SEED_SIZE, RLWE_SEED_SIZE, Keccak::KECCAK256_RATE_SIZE);
	XOF(buf, 0, buf.size(), kcoinsd, 0, kcoinsd.size(), Keccak::KECCAK256_RATE_SIZE);

	// coins are in kcoinsd+NEWHOPE_SYMBYTES
	MemoryTools::Copy(kcoinsd, RLWE_SEED_SIZE, tmps, 0, tmps.size());
	CpaEncrypt(CipherText, buf, PublicKey, tmps);

	// copy Targhi-Unruh hash into ct 
	MemoryTools::Copy(kcoinsd, 2 * RLWE_SEED_SIZE, CipherText, RLWE_CPACIPHERTEXT_SIZE, RLWE_SEED_SIZE);
	// overwrite coins in kcoinsd with h(c) 
	XOF(CipherText, 0, CIPHERTEXT_SIZE, kcoinsd, RLWE_SEED_SIZE, RLWE_SEED_SIZE, Keccak::KECCAK256_RATE_SIZE);
	XOF(kcoinsd, 0, 2 * SEED_SIZE, Secret, 0, Secret.size(), Keccak::KECCAK256_RATE_SIZE);
}

void RLWEQ12289N2048::Generate(std::vector<byte> &PublicKey, std::vector<byte> &PrivateKey, std::unique_ptr<Prng::IPrng> &Rng)
{
	std::vector<byte> coin(RLWE_SEED_SIZE * 2);

	// generate the public and private keys
	CpaGenerate(PublicKey, PrivateKey, Rng);

	// generate H(pk)
	XOF(PublicKey, 0, PublicKey.size(), coin, 0, RLWE_SEED_SIZE, Keccak::KECCAK256_RATE_SIZE);
	// value z for pseudo-random output on reject
	Rng->Generate(coin, RLWE_SEED_SIZE, RLWE_SEED_SIZE);

	// copy the puplic key + H(pk) to sk
	MemoryTools::Copy(PublicKey, 0, PrivateKey, RLWE_CPAPRIVATEKEY_SIZE, PUBLICKEY_SIZE);
	MemoryTools::Copy(coin, 0, PrivateKey, RLWE_CPAPRIVATEKEY_SIZE + RLWE_CPAPUBLICKEY_SIZE, 2 * RLWE_SEED_SIZE);
}

//~~~Private Functions~~~//

void RLWEQ12289N2048::BitRevVector(std::array<ushort, RLWE_N> &P)
{
	ushort i;
	ushort r;
	ushort tmp;

	for (i = 0; i < RLWE_N; ++i)
	{
		r = BitRevTable[i];

		if (i < r)
		{
			tmp = P[i];
			P[i] = P[r];
			P[r] = tmp;
		}
	}
}

void RLWEQ12289N2048::DecodeC(std::array<ushort, RLWE_N> &B, std::array<ushort, RLWE_N> &V, const std::vector<byte> &R)
{
	// De-serialize the ciphertext; inverse of encode_c

	PolyFromBytes(B, R);
	PolyDecompress(V, R);
}

void RLWEQ12289N2048::DecodePk(std::array<ushort, RLWE_N> &PublicKey, std::vector<byte> &Seed, const std::vector<byte> &R)
{
	// De-serialize the public key; inverse of encodepk

	PolyFromBytes(PublicKey, R);
	MemoryTools::Copy(R, RLWE_POLY_SIZE, Seed, 0, RLWE_SEED_SIZE);
}

void RLWEQ12289N2048::EncodeC(std::vector<byte> &R, const std::array<ushort, RLWE_N> &B, const std::array<ushort, RLWE_N> &V)
{
	// Serialize the ciphertext as concatenation of the serialization of the 
	// polynomial b and serialization of the compressed polynomial v

	PolyToBytes(R, B);
	PolyCompress(R, V);
}

void RLWEQ12289N2048::EncodePk(std::vector<byte> &R, const std::array<ushort, RLWE_N> &PublicKey, const std::vector<byte> &Seed)
{
	// Serialize the public key as concatenation of the serialization of the polynomial 
	// pk and the public seed used to generete the polynomial a

	PolyToBytes(R, PublicKey);
	MemoryTools::Copy(Seed, 0, R, RLWE_POLY_SIZE, RLWE_SEED_SIZE);
}

ushort RLWEQ12289N2048::FlipAbs(ushort X)
{
	// Computes |(x mod q) - Q/2|

	int16_t m;
	int16_t r;

	r = Freeze(X);
	r = r - (RLWE_Q / 2);
	m = r >> 15;

	return (r + m) ^ m;
}

ushort RLWEQ12289N2048::Freeze(ushort X)
{
	// Fully reduces an integer modulo q in constant time

	int16_t c;
	ushort m;
	ushort r;

	r = X % RLWE_Q;
	m = r - RLWE_Q;
	c = m;
	c >>= 15;
	r = m ^ ((r ^ m) & c);

	return r;
}

byte RLWEQ12289N2048::HammimgWeight(byte A)
{
	// Compute the Hamming weight of a byte
	byte r;

	r = A & 1;
	r += (A >> 1) & 1;
	r += (A >> 2) & 1;
	r += (A >> 3) & 1;
	r += (A >> 4) & 1;
	r += (A >> 5) & 1;
	r += (A >> 6) & 1;
	r += (A >> 7) & 1;

	return r;
}

ushort RLWEQ12289N2048::MontgomeryReduce(uint X)
{
	uint u;

	u = X * RLWE_QINV;
	u &= (1 << RLWE_RLOG) - 1;
	u *= RLWE_Q;
	X += u;

	return static_cast<ushort>(X >> RLWE_RLOG);
}

void RLWEQ12289N2048::MulCoefficients(std::array<ushort, RLWE_N> &Poly, const std::vector<ushort> &Factors)
{
	const uint RLSH = (1UL << RLWE_RLOG) - 1;
	size_t i;
	uint a;
	uint u;

	for (i = 0; i < Poly.size(); ++i)
	{
		a = Poly[i] * Factors[i];
		u = a * RLWE_QINV;
		u &= RLSH;
		u *= RLWE_Q;
		a += u;
		a >>= RLWE_RLOG;
		Poly[i] = static_cast<ushort>(a);
	}
}

void RLWEQ12289N2048::Ntt(std::array<ushort, RLWE_N> &A, const std::vector<ushort> &Omega)
{
	size_t distance;
	size_t start;
	size_t i;
	size_t j;
	size_t jTwiddle;
	ushort temp;
	ushort W;

	for (i = 0; i < 11; i += 2)
	{
		// even level
		distance = (1UL << i);

		for (start = 0; start < distance; ++start)
		{
			jTwiddle = 0;

			for (j = start; j < RLWE_N - 1; j += 2 * distance)
			{
				W = Omega[jTwiddle];
				++jTwiddle;
				temp = A[j];
				A[j] = (temp + A[j + distance]);
				A[j + distance] = MontgomeryReduce((W * (static_cast<uint>(temp) + (3 * RLWE_Q) - A[j + distance])));
			}
		}

		// odd level
		if (i + 1 < 11)
		{
			distance <<= 1UL;

			for (start = 0; start < distance; ++start)
			{
				jTwiddle = 0;

				for (j = start; j < RLWE_N - 1; j += 2 * distance)
				{
					W = Omega[jTwiddle];
					++jTwiddle;
					temp = A[j];
					A[j] = (temp + A[j + distance]) % RLWE_Q;
					A[j + distance] = MontgomeryReduce((W * (static_cast<uint>(temp) + (3 * RLWE_Q) - A[j + distance])));
				}
			}
		}
	}
}

void RLWEQ12289N2048::PolyAdd(std::array<ushort, RLWE_N> &R, const std::array<ushort, RLWE_N> &A, const std::array<ushort, RLWE_N> &B)
{
	size_t i;

	for (i = 0; i < RLWE_N; ++i)
	{
		R[i] = (A[i] + B[i]) % RLWE_Q;
	}
}

void RLWEQ12289N2048::PolyCompress(std::vector<byte> &R, const std::array<ushort, RLWE_N> &P)
{
	std::array<uint, 8> t;
	size_t i;
	size_t k;

	k = 0;

	for (i = 0; i < RLWE_N; i += 8)
	{
		t[0] = Freeze(P[i]);
		t[0] = (((t[0] << 3) + RLWE_Q / 2) / RLWE_Q) & 7;
		t[1] = Freeze(P[i + 1]);
		t[1] = (((t[1] << 3) + RLWE_Q / 2) / RLWE_Q) & 7;
		t[2] = Freeze(P[i + 2]);
		t[2] = (((t[2] << 3) + RLWE_Q / 2) / RLWE_Q) & 7;
		t[3] = Freeze(P[i + 3]);
		t[3] = (((t[3] << 3) + RLWE_Q / 2) / RLWE_Q) & 7;
		t[4] = Freeze(P[i + 4]);
		t[4] = (((t[4] << 3) + RLWE_Q / 2) / RLWE_Q) & 7;
		t[5] = Freeze(P[i + 5]);
		t[5] = (((t[5] << 3) + RLWE_Q / 2) / RLWE_Q) & 7;
		t[6] = Freeze(P[i + 6]);
		t[6] = (((t[6] << 3) + RLWE_Q / 2) / RLWE_Q) & 7;
		t[7] = Freeze(P[i + 7]);
		t[7] = (((t[7] << 3) + RLWE_Q / 2) / RLWE_Q) & 7;

		R[RLWE_POLY_SIZE + k] = t[0] | (t[1] << 3) | (t[2] << 6);
		R[RLWE_POLY_SIZE + k + 1] = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
		R[RLWE_POLY_SIZE + k + 2] = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
		k += 3;
	}
}

void RLWEQ12289N2048::PolyDecompress(std::array<ushort, RLWE_N> &R, const std::vector<byte> &A)
{
	size_t i;
	size_t k;

	k = 0;

	for (i = 0; i < RLWE_N; i += 8)
	{
		R[i] = A[RLWE_POLY_SIZE + k] & 7;
		R[i + 1] = (A[RLWE_POLY_SIZE + k] >> 3) & 7;
		R[i + 2] = (A[RLWE_POLY_SIZE + k] >> 6) | ((A[RLWE_POLY_SIZE + k + 1] << 2) & 4);
		R[i + 3] = (A[RLWE_POLY_SIZE + k + 1] >> 1) & 7;
		R[i + 4] = (A[RLWE_POLY_SIZE + k + 1] >> 4) & 7;
		R[i + 5] = (A[RLWE_POLY_SIZE + k + 1] >> 7) | ((A[RLWE_POLY_SIZE + k + 2] << 1) & 6);
		R[i + 6] = (A[RLWE_POLY_SIZE + k + 2] >> 2) & 7;
		R[i + 7] = (A[RLWE_POLY_SIZE + k + 2] >> 5);
		k += 3;

		R[i] = (static_cast<uint>(R[i]) * RLWE_Q + 4) >> 3;
		R[i + 1] = (static_cast<uint>(R[i + 1]) * RLWE_Q + 4) >> 3;
		R[i + 2] = (static_cast<uint>(R[i + 2]) * RLWE_Q + 4) >> 3;
		R[i + 3] = (static_cast<uint>(R[i + 3]) * RLWE_Q + 4) >> 3;
		R[i + 4] = (static_cast<uint>(R[i + 4]) * RLWE_Q + 4) >> 3;
		R[i + 5] = (static_cast<uint>(R[i + 5]) * RLWE_Q + 4) >> 3;
		R[i + 6] = (static_cast<uint>(R[i + 6]) * RLWE_Q + 4) >> 3;
		R[i + 7] = (static_cast<uint>(R[i + 7]) * RLWE_Q + 4) >> 3;
	}
}

void RLWEQ12289N2048::PolyFromBytes(std::array<ushort, RLWE_N> &R, const std::vector<byte> &A)
{
	size_t i;

	for (i = 0; i < RLWE_N / 4; ++i)
	{
		R[(4 * i)] = A[(7 * i)] | ((static_cast<ushort>(A[(7 * i) + 1]) & 0x3F) << 8);
		R[(4 * i) + 1] = (A[(7 * i) + 1] >> 6) | (static_cast<ushort>(A[(7 * i) + 2]) << 2) | ((static_cast<ushort>(A[(7 * i) + 3]) & 0x0F) << 10);
		R[(4 * i) + 2] = (A[(7 * i) + 3] >> 4) | (static_cast<ushort>(A[(7 * i) + 4]) << 4) | ((static_cast<ushort>(A[(7 * i) + 5]) & 0x03) << 12);
		R[(4 * i) + 3] = (A[(7 * i) + 5] >> 2) | (static_cast<ushort>(A[(7 * i) + 6]) << 6);
	}
}

void RLWEQ12289N2048::PolyFromMessage(std::array<ushort, RLWE_N> &R, const std::vector<byte> &Message)
{
	size_t i;
	size_t j;
	uint mask;

	for (i = 0; i < 32; ++i)
	{
		for (j = 0; j < 8; ++j)
		{
			mask = -((Message[i] >> j) & 1);
			R[(8 * i) + j] = mask & (RLWE_Q / 2);
			R[(8 * i) + j + 256] = mask & (RLWE_Q / 2);
			R[(8 * i) + j + 512] = mask & (RLWE_Q / 2);
			R[(8 * i) + j + 768] = mask & (RLWE_Q / 2);
			R[(8 * i) + j + 1024] = mask & (RLWE_Q / 2);
			R[(8 * i) + j + 1280] = mask & (RLWE_Q / 2);
			R[(8 * i) + j + 1536] = mask & (RLWE_Q / 2);
			R[(8 * i) + j + 1792] = mask & (RLWE_Q / 2);
		}
	}
}

void RLWEQ12289N2048::PolyInvNtt(std::array<ushort, RLWE_N> &R)
{
	BitRevVector(R);
	Ntt(R, OmegasInvMontgomery);
	MulCoefficients(R, PsisInvMontgomery);
}

void RLWEQ12289N2048::PolyMulPointwise(std::array<ushort, RLWE_N> &R, const std::array<ushort, RLWE_N> &A, const std::array<ushort, RLWE_N> &B)
{
	size_t i;
	ushort t;

	for (i = 0; i < RLWE_N; ++i)
	{
		// t is now in Montgomery domain
		t = MontgomeryReduce(0x00000C72UL * B[i]);
		// r coeffs[i] is back in normal domain
		R[i] = MontgomeryReduce(A[i] * t);
	}
}

void RLWEQ12289N2048::PolyNtt(std::array<ushort, RLWE_N> &R)
{
	MulCoefficients(R, PsisBitrevMontgomery);
	Ntt(R, OmegasMontgomery);
}

void RLWEQ12289N2048::PolySample(std::array<ushort, RLWE_N> &R, const std::vector<byte> &Seed, byte Nonce)
{
	std::vector<byte> buf(128);
	std::vector<byte> tmpk(RLWE_SEED_SIZE + 2);
	size_t i;
	size_t j;
	byte a;
	byte b;

	MemoryTools::Copy(Seed, 0, tmpk, 0, RLWE_SEED_SIZE);
	tmpk[RLWE_SEED_SIZE] = Nonce;

	// Generate noise in blocks of 64 coefficients
	for (i = 0; i < RLWE_N / 64; ++i)
	{
		tmpk[RLWE_SEED_SIZE + 1] = static_cast<byte>(i);
		XOF(tmpk, 0, tmpk.size(), buf, 0, buf.size(), Keccak::KECCAK256_RATE_SIZE);

		for (j = 0; j < 64; j++)
		{
			a = buf[(2 * j)];
			b = buf[(2 * j) + 1];
			R[(64 * i) + j] = HammimgWeight(a) + (RLWE_Q - HammimgWeight(b));
		}
	}
}

void RLWEQ12289N2048::PolySub(std::array<ushort, RLWE_N> &R, const std::array<ushort, RLWE_N> &A, const std::array<ushort, RLWE_N> &B)
{
	size_t i;

	for (i = 0; i < RLWE_N; ++i)
	{
		R[i] = (A[i] + 3 * RLWE_Q - B[i]) % RLWE_Q;
	}
}

void RLWEQ12289N2048::PolyToBytes(std::vector<byte> &R, const std::array<ushort, RLWE_N> &P)
{
	size_t i;
	ushort t0;
	ushort t1;
	ushort t2;
	ushort t3;

	for (i = 0; i < RLWE_N / 4; ++i)
	{
		t0 = Freeze(P[(4 * i)]);
		t1 = Freeze(P[(4 * i) + 1]);
		t2 = Freeze(P[(4 * i) + 2]);
		t3 = Freeze(P[(4 * i) + 3]);

		R[(7 * i)] = t0 & 0xFF;
		R[(7 * i) + 1] = (t0 >> 8) | (t1 << 6);
		R[(7 * i) + 2] = (t1 >> 2);
		R[(7 * i) + 3] = (t1 >> 10) | (t2 << 4);
		R[(7 * i) + 4] = (t2 >> 4);
		R[(7 * i) + 5] = (t2 >> 12) | (t3 << 2);
		R[(7 * i) + 6] = (t3 >> 6);
	}
}

void RLWEQ12289N2048::PolyToMessage(std::vector<byte> &Message, const std::array<ushort, RLWE_N> &X)
{
	size_t i;
	ushort t;

	MemoryTools::Clear(Message, 0, RLWE_SEED_SIZE);

	for (i = 0; i < 256; ++i)
	{
		t = FlipAbs(X[i]);
		t += FlipAbs(X[i + 256]);
		t += FlipAbs(X[i + 512]);
		t += FlipAbs(X[i + 768]);
		t += FlipAbs(X[i + 1024]);
		t += FlipAbs(X[i + 1280]);
		t += FlipAbs(X[i + 1536]);
		t += FlipAbs(X[i + 1792]);
		t = (t - (RLWE_Q * 2));
		t >>= 15;
		Message[i >> 3] |= t << (i & 7);
	}
}

void RLWEQ12289N2048::PolyUniform(std::array<ushort, RLWE_N> &A, const std::vector<byte> &Seed)
{
	std::vector<byte> buf(Keccak::KECCAK128_RATE_SIZE);
	std::vector<byte> tmpk(RLWE_SEED_SIZE + 1);
	size_t ctr;
	size_t i;
	size_t j;
	ushort val;

	ctr = 0;
	MemoryTools::Copy(Seed, 0, tmpk, 0, RLWE_SEED_SIZE);

	// generate a in blocks of 64 coefficients
	for (i = 0; i < RLWE_N / 64; ++i)
	{
		ctr = 0;
		// domain-separate the 16 independent calls
		tmpk[RLWE_SEED_SIZE] = static_cast<byte>(i);

		// very unlikely to run more than once
		while (ctr < 64)
		{
			XOF(tmpk, 0, tmpk.size(), buf, 0, buf.size(), Keccak::KECCAK128_RATE_SIZE);

			for (j = 0; j < Keccak::KECCAK128_RATE_SIZE && ctr < 64; j += 2)
			{
				val = (buf[j] | (static_cast<ushort>(buf[j + 1]) << 8));

				if (val < 5 * RLWE_Q)
				{
					A[(i * 64) + ctr] = val;
					++ctr;
				}
			}
		}
	}
}

void RLWEQ12289N2048::XOF(const std::vector<byte> &Input, size_t InOffset, size_t InLength, std::vector<byte> &Output, size_t OutOffset, size_t OutLength, size_t Rate)
{
	Keccak::XOFR24P1600(Input, InOffset, InLength, Output, OutOffset, OutLength, Rate);
}

NAMESPACE_RINGLWEEND
