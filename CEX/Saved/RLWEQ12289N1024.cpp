#include "RLWEQ12289N1024.h"
#include "IntegerTools.h"
#include "Keccak.h"
#include "MemoryTools.h"

NAMESPACE_RINGLWE

using Tools::IntegerTools;
using Digest::Keccak;
using Tools::MemoryTools;

//~~~Constant Tables~~~//

const std::string RLWEQ12289N1024::Name = "Q12289N1024";

const std::vector<ushort> RLWEQ12289N1024::OmegasMontgomery =
{
	0x0FEBU, 0x1B3EU, 0x1CCDU, 0x1F1DU, 0x0CBEU, 0x13D7U, 0x020AU, 0x0879U, 0x18DCU, 0x03FAU, 0x0411U, 0x2247U, 0x0928U, 0x2B03U, 0x15C6U, 0x07B5U,
	0x11B8U, 0x041AU, 0x1ABCU, 0x0F14U, 0x0EEAU, 0x17E6U, 0x0A7BU, 0x04A6U, 0x12B5U, 0x1E8EU, 0x1D74U, 0x1A60U, 0x1550U, 0x1161U, 0x0ECDU, 0x2F6EU,
	0x2EC5U, 0x017EU, 0x0F94U, 0x01D4U, 0x1ABBU, 0x14DBU, 0x1834U, 0x0E7EU, 0x2C34U, 0x04E6U, 0x153BU, 0x2AB2U, 0x0F9EU, 0x2810U, 0x287FU, 0x0F27U,
	0x2E71U, 0x06C0U, 0x17F9U, 0x1354U, 0x16E6U, 0x17F8U, 0x0E3BU, 0x1ADAU, 0x2214U, 0x028EU, 0x283EU, 0x06A6U, 0x1BABU, 0x1A68U, 0x0038U, 0x0C7FU,
	0x2703U, 0x025DU, 0x2E09U, 0x1F8CU, 0x15DAU, 0x242CU, 0x1903U, 0x12AEU, 0x1844U, 0x1210U, 0x2342U, 0x21F1U, 0x0FF0U, 0x2E5CU, 0x184DU, 0x0E12U,
	0x03CFU, 0x1F8DU, 0x2293U, 0x24E5U, 0x1631U, 0x0D95U, 0x0451U, 0x008EU, 0x00F1U, 0x2FC7U, 0x03EBU, 0x0DCCU, 0x1391U, 0x07A4U, 0x1778U, 0x2C8CU,
	0x1CD1U, 0x0801U, 0x2AD8U, 0x2F41U, 0x1DA7U, 0x13C1U, 0x0D75U, 0x12ACU, 0x0B68U, 0x1B88U, 0x0C37U, 0x1FB8U, 0x2C0FU, 0x1AA5U, 0x2CEEU, 0x2267U,
	0x2F6AU, 0x084FU, 0x0B17U, 0x0F75U, 0x01AFU, 0x062BU, 0x18EFU, 0x2638U, 0x16F2U, 0x02A5U, 0x0D08U, 0x185AU, 0x0ACEU, 0x052BU, 0x239BU, 0x2FCDU,
	0x07EFU, 0x1B2CU, 0x190DU, 0x08E9U, 0x0F81U, 0x0F97U, 0x2F65U, 0x2532U, 0x1281U, 0x2AF4U, 0x12A6U, 0x1535U, 0x2E5FU, 0x0EBCU, 0x01C5U, 0x1714U,
	0x0B42U, 0x070DU, 0x0803U, 0x07A2U, 0x2DC1U, 0x0F7BU, 0x098FU, 0x17FEU, 0x1FEEU, 0x0BD6U, 0x0733U, 0x0939U, 0x2F27U, 0x0B5CU, 0x0DC9U, 0x0D6AU,
	0x0C82U, 0x1E74U, 0x0809U, 0x14F9U, 0x2EA3U, 0x05E8U, 0x1AFAU, 0x28EAU, 0x2B12U, 0x0031U, 0x2A36U, 0x171BU, 0x05D1U, 0x263DU, 0x1736U, 0x29D2U,
	0x28BFU, 0x1D6FU, 0x01AAU, 0x230EU, 0x0EADU, 0x284AU, 0x2494U, 0x015BU, 0x16ECU, 0x254FU, 0x25A2U, 0x199AU, 0x2964U, 0x2440U, 0x2D2EU, 0x00AEU,
	0x0B84U, 0x09C7U, 0x196BU, 0x29E3U, 0x2D56U, 0x099BU, 0x0040U, 0x0E48U, 0x2107U, 0x1489U, 0x171FU, 0x1EB0U, 0x06D3U, 0x23CEU, 0x156EU, 0x2413U,
	0x17B1U, 0x0343U, 0x0DF2U, 0x1090U, 0x2D3CU, 0x0FCEU, 0x2ADAU, 0x23B3U, 0x0422U, 0x2012U, 0x2E48U, 0x039AU, 0x1F1FU, 0x07A6U, 0x27E3U, 0x0458U,
	0x0E90U, 0x0FD1U, 0x2B7AU, 0x1766U, 0x057CU, 0x0145U, 0x03B4U, 0x2B87U, 0x182EU, 0x0127U, 0x2D75U, 0x1686U, 0x2014U, 0x2051U, 0x0B67U, 0x214FU,
	0x17E7U, 0x1B50U, 0x208DU, 0x0550U, 0x09FBU, 0x1817U, 0x04B0U, 0x1BC1U, 0x1F37U, 0x0D01U, 0x257DU, 0x2F59U, 0x13F2U, 0x1749U, 0x29C7U, 0x2857U,
	0x0BEBU, 0x26C3U, 0x1320U, 0x246EU, 0x0051U, 0x0C13U, 0x03E8U, 0x1F21U, 0x1203U, 0x02D6U, 0x073DU, 0x2F75U, 0x109FU, 0x2B68U, 0x0AD0U, 0x299EU,
	0x0426U, 0x08F6U, 0x0DE1U, 0x12C5U, 0x0ABBU, 0x12EEU, 0x2181U, 0x23C2U, 0x0492U, 0x090FU, 0x0316U, 0x2C46U, 0x243BU, 0x2380U, 0x052EU, 0x13DEU,
	0x2386U, 0x191DU, 0x2B45U, 0x2993U, 0x0DB0U, 0x0DD6U, 0x21DCU, 0x2610U, 0x05C7U, 0x0001U, 0x2036U, 0x1BE7U, 0x2D2FU, 0x2AE8U, 0x1026U, 0x1668U,
	0x1372U, 0x2ABAU, 0x1691U, 0x2301U, 0x11EFU, 0x1660U, 0x193DU, 0x139FU, 0x25B2U, 0x1D2CU, 0x03B5U, 0x25C0U, 0x0B9FU, 0x2DCEU, 0x0AB8U, 0x2443U,
	0x276CU, 0x13CBU, 0x2F8BU, 0x09ACU, 0x0EA4U, 0x2C48U, 0x197AU, 0x033BU, 0x24ECU, 0x14FEU, 0x2F7FU, 0x1EFFU, 0x0CE0U, 0x0F6DU, 0x26A5U, 0x1164U,
	0x2A9CU, 0x09DDU, 0x0E00U, 0x1FB0U, 0x1F4BU, 0x2978U, 0x137DU, 0x1B2EU, 0x2E21U, 0x24E7U, 0x2FF8U, 0x03FEU, 0x2EAEU, 0x265DU, 0x2DE1U, 0x169FU,
	0x13E4U, 0x0829U, 0x232DU, 0x0B41U, 0x0CD9U, 0x07DDU, 0x2358U, 0x02D9U, 0x1EDDU, 0x04ECU, 0x167BU, 0x1218U, 0x2EB3U, 0x097AU, 0x2961U, 0x0594U,
	0x131AU, 0x1717U, 0x0F5CU, 0x2556U, 0x227EU, 0x0E35U, 0x15A6U, 0x0091U, 0x143BU, 0x2193U, 0x0E7BU, 0x2922U, 0x0163U, 0x0D36U, 0x1087U, 0x260DU,
	0x04B7U, 0x2351U, 0x1B64U, 0x0490U, 0x27A2U, 0x2BD8U, 0x1225U, 0x2E6DU, 0x2A9FU, 0x2889U, 0x01B3U, 0x1F10U, 0x1000U, 0x01EDU, 0x26B4U, 0x1ABDU,
	0x1797U, 0x0976U, 0x088BU, 0x25FBU, 0x21C3U, 0x267CU, 0x2456U, 0x1786U, 0x1C6EU, 0x03EAU, 0x10BCU, 0x13E0U, 0x0647U, 0x1C91U, 0x036BU, 0x213DU,
	0x24D6U, 0x0415U, 0x09B1U, 0x1394U, 0x1D04U, 0x0162U, 0x19BFU, 0x24A1U, 0x2E47U, 0x0961U, 0x042BU, 0x1C14U, 0x2CFCU, 0x0186U, 0x213FU, 0x2108U,
	0x1C66U, 0x0221U, 0x2189U, 0x258BU, 0x2F0FU, 0x0601U, 0x102FU, 0x126AU, 0x1315U, 0x03F9U, 0x13DCU, 0x0660U, 0x0BFAU, 0x001BU, 0x05A0U, 0x214EU,
	0x2439U, 0x2F0EU, 0x2D62U, 0x2449U, 0x0D48U, 0x26A2U, 0x0C40U, 0x1BBAU, 0x2236U, 0x2E25U, 0x1CD8U, 0x0F91U, 0x2E5DU, 0x1A4AU, 0x29F9U, 0x277FU,
	0x08C9U, 0x0FD0U, 0x0B44U, 0x2B80U, 0x084EU, 0x065EU, 0x238FU, 0x151FU, 0x0A7EU, 0x2352U, 0x0B99U, 0x2077U, 0x24D0U, 0x26BFU, 0x224BU, 0x14D4U,
	0x2982U, 0x06F1U, 0x122EU, 0x2A6FU, 0x1CB7U, 0x0E34U, 0x2571U, 0x14ABU, 0x20B6U, 0x0876U, 0x1337U, 0x2F90U, 0x23B4U, 0x2F61U, 0x1EACU, 0x2FFEU,
	0x131FU, 0x2A35U, 0x0ADCU, 0x144BU, 0x0901U, 0x1C4FU, 0x25ACU, 0x0FD5U, 0x2968U, 0x0D24U, 0x0CC7U, 0x0FD9U, 0x113EU, 0x24E2U, 0x1EEDU, 0x087EU
};

const std::vector<ushort> RLWEQ12289N1024::OmegasInvMontgomery =
{
	0x0FEBU, 0x14C3U, 0x10E4U, 0x1334U, 0x2788U, 0x2DF7U, 0x1C2AU, 0x2343U, 0x284CU, 0x1A3BU, 0x04FEU, 0x26D9U, 0x0DBAU, 0x2BF0U, 0x2C07U, 0x1725U,
	0x0093U, 0x2134U, 0x1EA0U, 0x1AB1U, 0x15A1U, 0x128DU, 0x1173U, 0x1D4CU, 0x2B5BU, 0x2586U, 0x181BU, 0x2117U, 0x20EDU, 0x1545U, 0x2BE7U, 0x1E49U,
	0x2382U, 0x2FC9U, 0x1599U, 0x1456U, 0x295BU, 0x07C3U, 0x2D73U, 0x0DEDU, 0x1527U, 0x21C6U, 0x1809U, 0x191BU, 0x1CADU, 0x1808U, 0x2941U, 0x0190U,
	0x20DAU, 0x0782U, 0x07F1U, 0x2063U, 0x054FU, 0x1AC6U, 0x2B1BU, 0x03CDU, 0x2183U, 0x17CDU, 0x1B26U, 0x1546U, 0x2E2DU, 0x206DU, 0x2E83U, 0x013CU,
	0x0034U, 0x0C66U, 0x2AD6U, 0x2533U, 0x17A7U, 0x22F9U, 0x2D5CU, 0x190FU, 0x09C9U, 0x1712U, 0x29D6U, 0x2E52U, 0x208CU, 0x24EAU, 0x27B2U, 0x0097U,
	0x0D9AU, 0x0313U, 0x155CU, 0x03F2U, 0x1049U, 0x23CAU, 0x1479U, 0x2499U, 0x1D55U, 0x228CU, 0x1C40U, 0x125AU, 0x00C0U, 0x0529U, 0x2800U, 0x1330U,
	0x0375U, 0x1889U, 0x285DU, 0x1C70U, 0x2235U, 0x2C16U, 0x003AU, 0x2F10U, 0x2F73U, 0x2BB0U, 0x226CU, 0x19D0U, 0x0B1CU, 0x0D6EU, 0x1074U, 0x2C32U,
	0x21EFU, 0x17B4U, 0x01A5U, 0x2011U, 0x0E10U, 0x0CBFU, 0x1DF1U, 0x17BDU, 0x1D53U, 0x16FEU, 0x0BD5U, 0x1A27U, 0x1075U, 0x01F8U, 0x2DA4U, 0x08FEU,
	0x07AAU, 0x063AU, 0x18B8U, 0x1C0FU, 0x00A8U, 0x0A84U, 0x2300U, 0x10CAU, 0x1440U, 0x2B51U, 0x17EAU, 0x2606U, 0x2AB1U, 0x0F74U, 0x14B1U, 0x181AU,
	0x0EB2U, 0x249AU, 0x0FB0U, 0x0FEDU, 0x197BU, 0x028CU, 0x2EDAU, 0x17D3U, 0x047AU, 0x2C4DU, 0x2EBCU, 0x2A85U, 0x189BU, 0x0487U, 0x2030U, 0x2171U,
	0x2BA9U, 0x081EU, 0x285BU, 0x10E2U, 0x2C67U, 0x01B9U, 0x0FEFU, 0x2BDFU, 0x0C4EU, 0x0527U, 0x2033U, 0x02C5U, 0x1F71U, 0x220FU, 0x2CBEU, 0x1850U,
	0x0BEEU, 0x1A93U, 0x0C33U, 0x292EU, 0x1151U, 0x18E2U, 0x1B78U, 0x0EFAU, 0x21B9U, 0x2FC1U, 0x2666U, 0x02ABU, 0x061EU, 0x1696U, 0x263AU, 0x247DU,
	0x2F53U, 0x02D3U, 0x0BC1U, 0x069DU, 0x1667U, 0x0A5FU, 0x0AB2U, 0x1915U, 0x2EA6U, 0x0B6DU, 0x07B7U, 0x2154U, 0x0CF3U, 0x2E57U, 0x1292U, 0x0742U,
	0x062FU, 0x18CBU, 0x09C4U, 0x2A30U, 0x18E6U, 0x05CBU, 0x2FD0U, 0x04EFU, 0x0717U, 0x1507U, 0x2A19U, 0x015EU, 0x1B08U, 0x27F8U, 0x118DU, 0x237FU,
	0x2297U, 0x2238U, 0x24A5U, 0x00DAU, 0x26C8U, 0x28CEU, 0x242BU, 0x1013U, 0x1803U, 0x2672U, 0x2086U, 0x0240U, 0x285FU, 0x27FEU, 0x28F4U, 0x24BFU,
	0x18EDU, 0x2E3CU, 0x2145U, 0x01A2U, 0x1ACCU, 0x1D5BU, 0x050DU, 0x1D80U, 0x0ACFU, 0x009CU, 0x206AU, 0x2080U, 0x2718U, 0x16F4U, 0x14D5U, 0x2812U,
	0x2783U, 0x1114U, 0x0B1FU, 0x1EC3U, 0x2028U, 0x233AU, 0x22DDU, 0x0699U, 0x202CU, 0x0A55U, 0x13B2U, 0x2700U, 0x1BB6U, 0x2525U, 0x05CCU, 0x1CE2U,
	0x0003U, 0x1155U, 0x00A0U, 0x0C4DU, 0x0071U, 0x1CCAU, 0x278BU, 0x0F4BU, 0x1B56U, 0x0A90U, 0x21CDU, 0x134AU, 0x0592U, 0x1DD3U, 0x2910U, 0x067FU,
	0x1B2DU, 0x0DB6U, 0x0942U, 0x0B31U, 0x0F8AU, 0x2468U, 0x0CAFU, 0x2583U, 0x1AE2U, 0x0C72U, 0x29A3U, 0x27B3U, 0x0481U, 0x24BDU, 0x2031U, 0x2738U,
	0x0882U, 0x0608U, 0x15B7U, 0x01A4U, 0x2070U, 0x1329U, 0x01DCU, 0x0DCBU, 0x1447U, 0x23C1U, 0x095FU, 0x22B9U, 0x0BB8U, 0x029FU, 0x00F3U, 0x0BC8U,
	0x0EB3U, 0x2A61U, 0x2FE6U, 0x2407U, 0x29A1U, 0x1C25U, 0x2C08U, 0x1CECU, 0x1D97U, 0x1FD2U, 0x2A00U, 0x00F2U, 0x0A76U, 0x0E78U, 0x2DE0U, 0x139BU,
	0x0EF9U, 0x0EC2U, 0x2E7BU, 0x0305U, 0x13EDU, 0x2BD6U, 0x26A0U, 0x01BAU, 0x0B60U, 0x1642U, 0x2E9FU, 0x12FDU, 0x1C6DU, 0x2650U, 0x2BECU, 0x0B2BU,
	0x0EC4U, 0x2C96U, 0x1370U, 0x29BAU, 0x1C21U, 0x1F45U, 0x2C17U, 0x1393U, 0x187BU, 0x0BABU, 0x0985U, 0x0E3EU, 0x0A06U, 0x2776U, 0x268BU, 0x186AU,
	0x1544U, 0x094DU, 0x2E14U, 0x2001U, 0x10F1U, 0x2E4EU, 0x0778U, 0x0562U, 0x0194U, 0x1DDCU, 0x0429U, 0x085FU, 0x2B71U, 0x149DU, 0x0CB0U, 0x2B4AU,
	0x09F4U, 0x1F7AU, 0x22CBU, 0x2E9EU, 0x06DFU, 0x2186U, 0x0E6EU, 0x1BC6U, 0x2F70U, 0x1A5BU, 0x21CCU, 0x0D83U, 0x0AABU, 0x20A5U, 0x18EAU, 0x1CE7U,
	0x2A6DU, 0x06A0U, 0x2687U, 0x014EU, 0x1DE9U, 0x1986U, 0x2B15U, 0x1124U, 0x2D28U, 0x0CA9U, 0x2824U, 0x2328U, 0x24C0U, 0x0CD4U, 0x27D8U, 0x1C1DU,
	0x1962U, 0x0220U, 0x09A4U, 0x0153U, 0x2C03U, 0x0009U, 0x0B1AU, 0x01E0U, 0x14D3U, 0x1C84U, 0x0689U, 0x10B6U, 0x1051U, 0x2201U, 0x2624U, 0x0565U,
	0x1E9DU, 0x095CU, 0x2094U, 0x2321U, 0x1102U, 0x0082U, 0x1B03U, 0x0B15U, 0x2CC6U, 0x1687U, 0x03B9U, 0x215DU, 0x2655U, 0x0076U, 0x1C36U, 0x0895U,
	0x0BBEU, 0x2549U, 0x0233U, 0x2462U, 0x0A41U, 0x2C4CU, 0x12D5U, 0x0A4FU, 0x1C62U, 0x16C4U, 0x19A1U, 0x1E12U, 0x0D00U, 0x1970U, 0x0547U, 0x1C8FU,
	0x1999U, 0x1FDBU, 0x0519U, 0x02D2U, 0x141AU, 0x0FCBU, 0x3000U, 0x2A3AU, 0x09F1U, 0x0E25U, 0x222BU, 0x2251U, 0x066EU, 0x04BCU, 0x16E4U, 0x0C7BU,
	0x1C23U, 0x2AD3U, 0x0C81U, 0x0BC6U, 0x03BBU, 0x2CEBU, 0x26F2U, 0x2B6FU, 0x0C3FU, 0x0E80U, 0x1D13U, 0x2546U, 0x1D3CU, 0x2220U, 0x270BU, 0x2BDBU,
	0x0663U, 0x2531U, 0x0499U, 0x1F62U, 0x008CU, 0x28C4U, 0x2D2BU, 0x1DFEU, 0x10E0U, 0x2C19U, 0x23EEU, 0x2FB0U, 0x0B93U, 0x1CE1U, 0x093EU, 0x2416U
};

const std::vector<ushort> RLWEQ12289N1024::PsisBitrevMontgomery =
{
	0x0FEBU, 0x1B3EU, 0x1CCDU, 0x1F1DU, 0x0CBEU, 0x13D7U, 0x020AU, 0x0879U, 0x18DCU, 0x03FAU, 0x0411U, 0x2247U, 0x0928U, 0x2B03U, 0x15C6U, 0x07B5U,
	0x11B8U, 0x041AU, 0x1ABCU, 0x0F14U, 0x0EEAU, 0x17E6U, 0x0A7BU, 0x04A6U, 0x12B5U, 0x1E8EU, 0x1D74U, 0x1A60U, 0x1550U, 0x1161U, 0x0ECDU, 0x2F6EU,
	0x2EC5U, 0x017EU, 0x0F94U, 0x01D4U, 0x1ABBU, 0x14DBU, 0x1834U, 0x0E7EU, 0x2C34U, 0x04E6U, 0x153BU, 0x2AB2U, 0x0F9EU, 0x2810U, 0x287FU, 0x0F27U,
	0x2E71U, 0x06C0U, 0x17F9U, 0x1354U, 0x16E6U, 0x17F8U, 0x0E3BU, 0x1ADAU, 0x2214U, 0x028EU, 0x283EU, 0x06A6U, 0x1BABU, 0x1A68U, 0x0038U, 0x0C7FU,
	0x2703U, 0x025DU, 0x2E09U, 0x1F8CU, 0x15DAU, 0x242CU, 0x1903U, 0x12AEU, 0x1844U, 0x1210U, 0x2342U, 0x21F1U, 0x0FF0U, 0x2E5CU, 0x184DU, 0x0E12U,
	0x03CFU, 0x1F8DU, 0x2293U, 0x24E5U, 0x1631U, 0x0D95U, 0x0451U, 0x008EU, 0x00F1U, 0x2FC7U, 0x03EBU, 0x0DCCU, 0x1391U, 0x07A4U, 0x1778U, 0x2C8CU,
	0x1CD1U, 0x0801U, 0x2AD8U, 0x2F41U, 0x1DA7U, 0x13C1U, 0x0D75U, 0x12ACU, 0x0B68U, 0x1B88U, 0x0C37U, 0x1FB8U, 0x2C0FU, 0x1AA5U, 0x2CEEU, 0x2267U,
	0x2F6AU, 0x084FU, 0x0B17U, 0x0F75U, 0x01AFU, 0x062BU, 0x18EFU, 0x2638U, 0x16F2U, 0x02A5U, 0x0D08U, 0x185AU, 0x0ACEU, 0x052BU, 0x239BU, 0x2FCDU,
	0x07EFU, 0x1B2CU, 0x190DU, 0x08E9U, 0x0F81U, 0x0F97U, 0x2F65U, 0x2532U, 0x1281U, 0x2AF4U, 0x12A6U, 0x1535U, 0x2E5FU, 0x0EBCU, 0x01C5U, 0x1714U,
	0x0B42U, 0x070DU, 0x0803U, 0x07A2U, 0x2DC1U, 0x0F7BU, 0x098FU, 0x17FEU, 0x1FEEU, 0x0BD6U, 0x0733U, 0x0939U, 0x2F27U, 0x0B5CU, 0x0DC9U, 0x0D6AU,
	0x0C82U, 0x1E74U, 0x0809U, 0x14F9U, 0x2EA3U, 0x05E8U, 0x1AFAU, 0x28EAU, 0x2B12U, 0x0031U, 0x2A36U, 0x171BU, 0x05D1U, 0x263DU, 0x1736U, 0x29D2U,
	0x28BFU, 0x1D6FU, 0x01AAU, 0x230EU, 0x0EADU, 0x284AU, 0x2494U, 0x015BU, 0x16ECU, 0x254FU, 0x25A2U, 0x199AU, 0x2964U, 0x2440U, 0x2D2EU, 0x00AEU,
	0x0B84U, 0x09C7U, 0x196BU, 0x29E3U, 0x2D56U, 0x099BU, 0x0040U, 0x0E48U, 0x2107U, 0x1489U, 0x171FU, 0x1EB0U, 0x06D3U, 0x23CEU, 0x156EU, 0x2413U,
	0x17B1U, 0x0343U, 0x0DF2U, 0x1090U, 0x2D3CU, 0x0FCEU, 0x2ADAU, 0x23B3U, 0x0422U, 0x2012U, 0x2E48U, 0x039AU, 0x1F1FU, 0x07A6U, 0x27E3U, 0x0458U,
	0x0E90U, 0x0FD1U, 0x2B7AU, 0x1766U, 0x057CU, 0x0145U, 0x03B4U, 0x2B87U, 0x182EU, 0x0127U, 0x2D75U, 0x1686U, 0x2014U, 0x2051U, 0x0B67U, 0x214FU,
	0x17E7U, 0x1B50U, 0x208DU, 0x0550U, 0x09FBU, 0x1817U, 0x04B0U, 0x1BC1U, 0x1F37U, 0x0D01U, 0x257DU, 0x2F59U, 0x13F2U, 0x1749U, 0x29C7U, 0x2857U,
	0x0BEBU, 0x26C3U, 0x1320U, 0x246EU, 0x0051U, 0x0C13U, 0x03E8U, 0x1F21U, 0x1203U, 0x02D6U, 0x073DU, 0x2F75U, 0x109FU, 0x2B68U, 0x0AD0U, 0x299EU,
	0x0426U, 0x08F6U, 0x0DE1U, 0x12C5U, 0x0ABBU, 0x12EEU, 0x2181U, 0x23C2U, 0x0492U, 0x090FU, 0x0316U, 0x2C46U, 0x243BU, 0x2380U, 0x052EU, 0x13DEU,
	0x2386U, 0x191DU, 0x2B45U, 0x2993U, 0x0DB0U, 0x0DD6U, 0x21DCU, 0x2610U, 0x05C7U, 0x0001U, 0x2036U, 0x1BE7U, 0x2D2FU, 0x2AE8U, 0x1026U, 0x1668U,
	0x1372U, 0x2ABAU, 0x1691U, 0x2301U, 0x11EFU, 0x1660U, 0x193DU, 0x139FU, 0x25B2U, 0x1D2CU, 0x03B5U, 0x25C0U, 0x0B9FU, 0x2DCEU, 0x0AB8U, 0x2443U,
	0x276CU, 0x13CBU, 0x2F8BU, 0x09ACU, 0x0EA4U, 0x2C48U, 0x197AU, 0x033BU, 0x24ECU, 0x14FEU, 0x2F7FU, 0x1EFFU, 0x0CE0U, 0x0F6DU, 0x26A5U, 0x1164U,
	0x2A9CU, 0x09DDU, 0x0E00U, 0x1FB0U, 0x1F4BU, 0x2978U, 0x137DU, 0x1B2EU, 0x2E21U, 0x24E7U, 0x2FF8U, 0x03FEU, 0x2EAEU, 0x265DU, 0x2DE1U, 0x169FU,
	0x13E4U, 0x0829U, 0x232DU, 0x0B41U, 0x0CD9U, 0x07DDU, 0x2358U, 0x02D9U, 0x1EDDU, 0x04ECU, 0x167BU, 0x1218U, 0x2EB3U, 0x097AU, 0x2961U, 0x0594U,
	0x131AU, 0x1717U, 0x0F5CU, 0x2556U, 0x227EU, 0x0E35U, 0x15A6U, 0x0091U, 0x143BU, 0x2193U, 0x0E7BU, 0x2922U, 0x0163U, 0x0D36U, 0x1087U, 0x260DU,
	0x04B7U, 0x2351U, 0x1B64U, 0x0490U, 0x27A2U, 0x2BD8U, 0x1225U, 0x2E6DU, 0x2A9FU, 0x2889U, 0x01B3U, 0x1F10U, 0x1000U, 0x01EDU, 0x26B4U, 0x1ABDU,
	0x1797U, 0x0976U, 0x088BU, 0x25FBU, 0x21C3U, 0x267CU, 0x2456U, 0x1786U, 0x1C6EU, 0x03EAU, 0x10BCU, 0x13E0U, 0x0647U, 0x1C91U, 0x036BU, 0x213DU,
	0x24D6U, 0x0415U, 0x09B1U, 0x1394U, 0x1D04U, 0x0162U, 0x19BFU, 0x24A1U, 0x2E47U, 0x0961U, 0x042BU, 0x1C14U, 0x2CFCU, 0x0186U, 0x213FU, 0x2108U,
	0x1C66U, 0x0221U, 0x2189U, 0x258BU, 0x2F0FU, 0x0601U, 0x102FU, 0x126AU, 0x1315U, 0x03F9U, 0x13DCU, 0x0660U, 0x0BFAU, 0x001BU, 0x05A0U, 0x214EU,
	0x2439U, 0x2F0EU, 0x2D62U, 0x2449U, 0x0D48U, 0x26A2U, 0x0C40U, 0x1BBAU, 0x2236U, 0x2E25U, 0x1CD8U, 0x0F91U, 0x2E5DU, 0x1A4AU, 0x29F9U, 0x277FU,
	0x08C9U, 0x0FD0U, 0x0B44U, 0x2B80U, 0x084EU, 0x065EU, 0x238FU, 0x151FU, 0x0A7EU, 0x2352U, 0x0B99U, 0x2077U, 0x24D0U, 0x26BFU, 0x224BU, 0x14D4U,
	0x2982U, 0x06F1U, 0x122EU, 0x2A6FU, 0x1CB7U, 0x0E34U, 0x2571U, 0x14ABU, 0x20B6U, 0x0876U, 0x1337U, 0x2F90U, 0x23B4U, 0x2F61U, 0x1EACU, 0x2FFEU,
	0x131FU, 0x2A35U, 0x0ADCU, 0x144BU, 0x0901U, 0x1C4FU, 0x25ACU, 0x0FD5U, 0x2968U, 0x0D24U, 0x0CC7U, 0x0FD9U, 0x113EU, 0x24E2U, 0x1EEDU, 0x087EU,
	0x0F6BU, 0x2EAFU, 0x0997U, 0x19C7U, 0x2931U, 0x2ADFU, 0x0E46U, 0x0B4EU, 0x1E01U, 0x1BD6U, 0x1C77U, 0x2FEDU, 0x1017U, 0x0D0FU, 0x0867U, 0x05F2U,
	0x1C06U, 0x1CB6U, 0x2B21U, 0x098AU, 0x0864U, 0x1747U, 0x195CU, 0x208AU, 0x22F1U, 0x15DEU, 0x0E28U, 0x289DU, 0x052DU, 0x19A5U, 0x0799U, 0x2BFCU,
	0x275DU, 0x0A72U, 0x0D0AU, 0x0CCCU, 0x2B1AU, 0x01FAU, 0x1969U, 0x0570U, 0x1566U, 0x224AU, 0x049AU, 0x0AD8U, 0x0D50U, 0x286BU, 0x2B74U, 0x0A0FU,
	0x2511U, 0x2F40U, 0x17CCU, 0x274AU, 0x1047U, 0x17C5U, 0x039BU, 0x2BF3U, 0x2E88U, 0x11E2U, 0x29ADU, 0x2E8AU, 0x01A9U, 0x28D5U, 0x0188U, 0x2778U,
	0x2110U, 0x108BU, 0x2239U, 0x1CD0U, 0x08F3U, 0x0D2FU, 0x1F12U, 0x22C0U, 0x19D9U, 0x1E6EU, 0x06C9U, 0x2D93U, 0x0F8EU, 0x247EU, 0x1A18U, 0x027CU,
	0x1AA9U, 0x1CD7U, 0x0200U, 0x123EU, 0x0B54U, 0x2F12U, 0x1E37U, 0x03E2U, 0x0697U, 0x2E6BU, 0x1B6DU, 0x0092U, 0x28F5U, 0x057BU, 0x1445U, 0x17CEU,
	0x09B3U, 0x0806U, 0x0BE2U, 0x2AC1U, 0x0F8DU, 0x2A45U, 0x2E32U, 0x22B2U, 0x1FD7U, 0x00B4U, 0x2580U, 0x1E04U, 0x1463U, 0x2A80U, 0x1A7CU, 0x00CCU,
	0x2BE0U, 0x0A28U, 0x1DA0U, 0x0C31U, 0x0BC9U, 0x2B2DU, 0x1E86U, 0x1B83U, 0x109BU, 0x1283U, 0x2B37U, 0x1A73U, 0x1BA1U, 0x242DU, 0x0938U, 0x2E95U,
	0x0788U, 0x2E31U, 0x1F58U, 0x0E5EU, 0x0C85U, 0x0D1FU, 0x2BBDU, 0x1459U, 0x2185U, 0x0CA6U, 0x2288U, 0x0470U, 0x2493U, 0x0722U, 0x0C63U, 0x1189U,
	0x1ECDU, 0x015AU, 0x0814U, 0x056DU, 0x2041U, 0x0C5BU, 0x12E8U, 0x17EFU, 0x1F7EU, 0x22D9U, 0x0264U, 0x108EU, 0x2A0BU, 0x1F83U, 0x007DU, 0x2DE5U,
	0x278DU, 0x1528U, 0x083EU, 0x02CCU, 0x266FU, 0x2958U, 0x2CD3U, 0x2E61U, 0x0D78U, 0x0157U, 0x0774U, 0x11BAU, 0x28B7U, 0x1BA6U, 0x1277U, 0x04B8U,
	0x2D34U, 0x0E05U, 0x0BA6U, 0x055DU, 0x06B9U, 0x2A01U, 0x1007U, 0x097DU, 0x1071U, 0x1524U, 0x1769U, 0x2333U, 0x01B6U, 0x0DBBU, 0x1C3CU, 0x04C2U,
	0x209BU, 0x1470U, 0x21EAU, 0x052FU, 0x1D54U, 0x133CU, 0x01C0U, 0x03F6U, 0x272DU, 0x2FBDU, 0x11D6U, 0x16CCU, 0x2FC5U, 0x0A9DU, 0x05FFU, 0x0C80U,
	0x15D4U, 0x16D5U, 0x019CU, 0x13EEU, 0x1C9EU, 0x0EA0U, 0x0BF0U, 0x09E0U, 0x1CEEU, 0x207AU, 0x23F2U, 0x1936U, 0x19D5U, 0x0589U, 0x2730U, 0x1E68U,
	0x05EEU, 0x0EB5U, 0x1050U, 0x13C7U, 0x2664U, 0x08E3U, 0x19ECU, 0x10ABU, 0x193FU, 0x0811U, 0x1E2DU, 0x0DA7U, 0x2088U, 0x2233U, 0x1FD0U, 0x2925U,
	0x174EU, 0x2F2DU, 0x23D7U, 0x2530U, 0x15DCU, 0x189EU, 0x20D0U, 0x0243U, 0x1A7DU, 0x2B06U, 0x1666U, 0x2B69U, 0x2B9CU, 0x12FCU, 0x046BU, 0x2A5CU,
	0x236CU, 0x1F50U, 0x25DEU, 0x0EFDU, 0x0237U, 0x2484U, 0x1B58U, 0x19E3U, 0x1E13U, 0x13DAU, 0x02AAU, 0x2C2DU, 0x1457U, 0x0FD2U, 0x1BAFU, 0x034CU,
	0x1D0AU, 0x0EB9U, 0x0125U, 0x2361U, 0x1B1CU, 0x2480U, 0x2A83U, 0x0A49U, 0x1FFEU, 0x0F68U, 0x159AU, 0x15E4U, 0x0D98U, 0x087BU, 0x2442U, 0x2B10U,
	0x08A5U, 0x1FC8U, 0x0EDDU, 0x02FFU, 0x2FCFU, 0x00D8U, 0x2D00U, 0x1A6BU, 0x2871U, 0x0007U, 0x2176U, 0x034DU, 0x1C43U, 0x0C52U, 0x1108U, 0x0CD5U,
	0x281CU, 0x0B10U, 0x0DF4U, 0x0502U, 0x1D87U, 0x0C9DU, 0x20A8U, 0x2957U, 0x17D9U, 0x0C30U, 0x19F3U, 0x183BU, 0x2158U, 0x209CU, 0x1B07U, 0x0DD0U,
	0x23EFU, 0x2A8BU, 0x2CC7U, 0x13B3U, 0x067AU, 0x15F2U, 0x2253U, 0x169DU, 0x126FU, 0x02EFU, 0x2C73U, 0x18F5U, 0x2A1FU, 0x0BF9U, 0x1E7EU, 0x19BAU,
	0x0A3EU, 0x150AU, 0x01FEU, 0x1DCCU, 0x1B09U, 0x0242U, 0x2869U, 0x2E3FU, 0x22E1U, 0x124CU, 0x2FC2U, 0x1BF2U, 0x26BCU, 0x1C86U, 0x2121U, 0x0E56U,
	0x2B3AU, 0x091EU, 0x0636U, 0x1EC6U, 0x29EEU, 0x070AU, 0x0763U, 0x13EFU, 0x1807U, 0x2274U, 0x0D5AU, 0x1EA6U, 0x26DFU, 0x1255U, 0x01A1U, 0x270CU,
	0x25B4U, 0x119EU, 0x0B82U, 0x1555U, 0x016DU, 0x0371U, 0x0787U, 0x03F7U, 0x2D9BU, 0x2B01U, 0x055BU, 0x2FE9U, 0x09B5U, 0x2C79U, 0x13AFU, 0x1A56U,
	0x2101U, 0x0732U, 0x2FB9U, 0x1FF0U, 0x2569U, 0x12E2U, 0x1F01U, 0x24F5U, 0x0A53U, 0x2BBAU, 0x0BE5U, 0x196CU, 0x0FFEU, 0x0D7BU, 0x1EE7U, 0x2B28U,
	0x151EU, 0x1239U, 0x0BCCU, 0x19D8U, 0x2C51U, 0x1D5FU, 0x0E55U, 0x14A7U, 0x06FEU, 0x1B66U, 0x1522U, 0x2B1EU, 0x2BF1U, 0x07F3U, 0x17EDU, 0x28A7U,
	0x11D5U, 0x1C93U, 0x13D6U, 0x290AU, 0x0B18U, 0x09AEU, 0x2436U, 0x1062U, 0x23EBU, 0x11A6U, 0x1D2DU, 0x0488U, 0x1ADEU, 0x0AAAU, 0x28B5U, 0x2734U,
	0x06C6U, 0x0EE7U, 0x2ABBU, 0x16C8U, 0x2963U, 0x2A07U, 0x1147U, 0x20E4U, 0x2591U, 0x1BCFU, 0x2B02U, 0x2CA0U, 0x23D5U, 0x00BDU, 0x2760U, 0x291EU,
	0x0D8AU, 0x295CU, 0x1DA8U, 0x0DFAU, 0x2CF7U, 0x1E69U, 0x25BFU, 0x0212U, 0x2F76U, 0x22FDU, 0x09E4U, 0x0CF5U, 0x2485U, 0x2803U, 0x05C9U, 0x2474U,
	0x0D7EU, 0x0EAEU, 0x1EDBU, 0x107AU, 0x0A21U, 0x2C92U, 0x08E4U, 0x03D6U, 0x1971U, 0x0739U, 0x212EU, 0x233DU, 0x11ABU, 0x1F34U, 0x0008U, 0x01C9U,
	0x0288U, 0x0096U, 0x1F40U, 0x0903U, 0x08FDU, 0x036AU, 0x1612U, 0x00AAU, 0x24F6U, 0x0B39U, 0x267FU, 0x2CEAU, 0x09E7U, 0x2BA1U, 0x16B0U, 0x2FECU,
	0x25D7U, 0x076DU, 0x1C03U, 0x2E0BU, 0x0F06U, 0x0625U, 0x17AFU, 0x0ED1U, 0x01D2U, 0x2BFBU, 0x2970U, 0x0EEDU, 0x18B0U, 0x1229U, 0x1877U, 0x0B71U
};

const std::vector<ushort> RLWEQ12289N1024::PsisInvMontgomery =
{
	0x0100U, 0x294AU, 0x05E6U, 0x1C46U, 0x040AU, 0x1C02U, 0x1893U, 0x1EF1U, 0x2D91U, 0x0D5EU, 0x0FA0U, 0x0917U, 0x0828U, 0x15BDU, 0x031BU, 0x2997U,
	0x05F1U, 0x156CU, 0x09EBU, 0x1CD9U, 0x041FU, 0x1C05U, 0x1F6FU, 0x2DA3U, 0x0685U, 0x07CAU, 0x0ED4U, 0x16B1U, 0x10F5U, 0x24B6U, 0x2E64U, 0x2FC6U,
	0x291DU, 0x2F05U, 0x2FDDU, 0x0DB2U, 0x0FACU, 0x2487U, 0x12EFU, 0x0990U, 0x1CCCU, 0x2667U, 0x0C58U, 0x089FU, 0x15CEU, 0x09F9U, 0x1CDBU, 0x18B2U,
	0x25D1U, 0x0567U, 0x29EBU, 0x05FDU, 0x00DBU, 0x14B2U, 0x10ACU, 0x1DD0U, 0x18D5U, 0x25D6U, 0x20D6U, 0x1268U, 0x24EBU, 0x2790U, 0x135EU, 0x1757U,
	0x2C7BU, 0x21C9U, 0x2DF9U, 0x1B24U, 0x2D06U, 0x2F94U, 0x06CCU, 0x2A1EU, 0x1A97U, 0x0AA8U, 0x1CF4U, 0x11DAU, 0x1044U, 0x100AU, 0x2B70U, 0x2F5AU,
	0x2232U, 0x2E08U, 0x0D6FU, 0x167EU, 0x2C5CU, 0x1AE9U, 0x2622U, 0x2E98U, 0x06A8U, 0x07CFU, 0x2A43U, 0x2F2FU, 0x2FE3U, 0x1B6AU, 0x2D10U, 0x0670U,
	0x07C7U, 0x07F8U, 0x07FFU, 0x0800U, 0x2A4AU, 0x2F30U, 0x222CU, 0x2050U, 0x200CU, 0x0494U, 0x0783U, 0x1C81U, 0x0AEEU, 0x1CFEU, 0x18B7U, 0x113FU,
	0x1DE5U, 0x18D8U, 0x2CB2U, 0x2F88U, 0x1B5DU, 0x1F57U, 0x26C4U, 0x20F8U, 0x2024U, 0x0B73U, 0x1D11U, 0x0427U, 0x0E4FU, 0x169EU, 0x2585U, 0x27A6U,
	0x05AAU, 0x2319U, 0x2E29U, 0x28E2U, 0x2821U, 0x2EE1U, 0x0D8EU, 0x1D5EU, 0x0432U, 0x0775U, 0x1C7FU, 0x265CU, 0x1332U, 0x02BEU, 0x14F7U, 0x1E6DU,
	0x1FC7U, 0x26D4U, 0x058CU, 0x0E82U, 0x2B38U, 0x2F52U, 0x2FE8U, 0x06D8U, 0x158DU, 0x255EU, 0x2E7CU, 0x06A4U, 0x0EAAU, 0x16ABU, 0x033DU, 0x0752U,
	0x1C7AU, 0x0AEDU, 0x2AB5U, 0x13D1U, 0x1E43U, 0x1FC1U, 0x191CU, 0x1829U, 0x2C99U, 0x065FU, 0x00E9U, 0x14B4U, 0x253FU, 0x279CU, 0x2ECEU, 0x221EU,
	0x204EU, 0x0B79U, 0x2AC9U, 0x218BU, 0x2039U, 0x0B76U, 0x23EDU, 0x12D9U, 0x1744U, 0x110AU, 0x24B9U, 0x053FU, 0x0E77U, 0x0211U, 0x2971U, 0x2F11U,
	0x1B4CU, 0x1879U, 0x037FU, 0x0E37U, 0x0FBFU, 0x0FF7U, 0x0FFFU, 0x0249U, 0x2979U, 0x215BU, 0x127BU, 0x105BU, 0x24A0U, 0x0C17U, 0x2404U, 0x276FU,
	0x27ECU, 0x05B4U, 0x29F6U, 0x2F24U, 0x06BCU, 0x1589U, 0x2C39U, 0x1AE4U, 0x0AB3U, 0x161AU, 0x17BBU, 0x111BU, 0x2B97U, 0x2884U, 0x2138U, 0x1276U,
	0x24EDU, 0x0C22U, 0x1D2AU, 0x2D50U, 0x28C3U, 0x2141U, 0x270AU, 0x2102U, 0x2701U, 0x0C6EU, 0x2AECU, 0x2190U, 0x0BA7U, 0x23F4U, 0x12DAU, 0x098DU,
	0x15F0U, 0x17B5U, 0x0363U, 0x0E33U, 0x169AU, 0x2C60U, 0x140EU, 0x09B9U, 0x2A89U, 0x2F39U, 0x06BFU, 0x1C65U, 0x0AEAU, 0x23D9U, 0x051FU, 0x154EU,
	0x2555U, 0x19E8U, 0x0A8FU, 0x23CCU, 0x2767U, 0x05A1U, 0x0E85U, 0x0213U, 0x0E03U, 0x08DCU, 0x0144U, 0x14C1U, 0x02F7U, 0x0748U, 0x159DU, 0x09F2U,
	0x1CDAU, 0x2669U, 0x20EBU, 0x126BU, 0x2BC7U, 0x0641U, 0x1C53U, 0x11C3U, 0x2BAFU, 0x2F63U, 0x06C5U, 0x2A1DU, 0x284EU, 0x05C2U, 0x29F8U, 0x13B6U,
	0x1088U, 0x2B82U, 0x2881U, 0x1A5CU, 0x03C4U, 0x1BF8U, 0x11B6U, 0x1DF6U, 0x1FB6U, 0x1FF6U, 0x1248U, 0x2BC2U, 0x1AD3U, 0x03D5U, 0x22D6U, 0x04FAU,
	0x00B6U, 0x001AU, 0x1B72U, 0x1F5AU, 0x2DA0U, 0x2FAAU, 0x2919U, 0x05DFU, 0x1C45U, 0x11C1U, 0x171CU, 0x2597U, 0x20CDU, 0x2DD5U, 0x28D6U, 0x0CB1U,
	0x241AU, 0x19BBU, 0x03ADU, 0x0762U, 0x010EU, 0x294CU, 0x1A79U, 0x2612U, 0x1A03U, 0x184AU, 0x180BU, 0x1802U, 0x036EU, 0x0759U, 0x1C7BU, 0x2D37U,
	0x2F9BU, 0x06CDU, 0x1C67U, 0x1F7DU, 0x2DA5U, 0x1B18U, 0x1196U, 0x24CDU, 0x12F9U, 0x106DU, 0x1DC7U, 0x0441U, 0x29C1U, 0x05F7U, 0x2324U, 0x274FU,
	0x2EC3U, 0x28F8U, 0x1A6DU, 0x0AA2U, 0x0F3CU, 0x2477U, 0x2E5BU, 0x1B32U, 0x2D08U, 0x1426U, 0x1098U, 0x1016U, 0x16DFU, 0x0A20U, 0x1605U, 0x17B8U,
	0x0A3FU, 0x1CE5U, 0x1F8FU, 0x26CCU, 0x1342U, 0x1753U, 0x0355U, 0x0E31U, 0x0207U, 0x2294U, 0x2E16U, 0x0D71U, 0x2B11U, 0x0627U, 0x00E1U, 0x226AU,
	0x2E10U, 0x2FBAU, 0x0DADU, 0x243EU, 0x0C09U, 0x2402U, 0x12DCU, 0x1E20U, 0x1FBCU, 0x2DAEU, 0x2FACU, 0x0DABU, 0x0FABU, 0x023DU, 0x0E09U, 0x1694U,
	0x1EA8U, 0x26ABU, 0x27D0U, 0x05B0U, 0x00D0U, 0x1B8CU, 0x0ACBU, 0x1CF9U, 0x2D49U, 0x28C2U, 0x2EF8U, 0x2224U, 0x2E06U, 0x28DDU, 0x0CB2U, 0x1663U,
	0x1EA1U, 0x26AAU, 0x0586U, 0x00CAU, 0x0DD4U, 0x1D68U, 0x0B0FU, 0x0870U, 0x2A5AU, 0x13C4U, 0x108AU, 0x1014U, 0x024CU, 0x0054U, 0x000CU, 0x1B70U,
	0x0AC7U, 0x23D4U, 0x19B1U, 0x2CD1U, 0x0667U, 0x2334U, 0x0BE3U, 0x1D21U, 0x18BCU, 0x2CAEU, 0x0662U, 0x07C5U, 0x2366U, 0x2E34U, 0x2208U, 0x2E02U,
	0x2FB8U, 0x291BU, 0x1A72U, 0x2611U, 0x27BAU, 0x1364U, 0x250FU, 0x19DEU, 0x03B2U, 0x22D1U, 0x198CU, 0x1839U, 0x112DU, 0x24BEU, 0x20AEU, 0x26F5U,
	0x20FFU, 0x2025U, 0x2DBDU, 0x21F7U, 0x2724U, 0x0C73U, 0x165AU, 0x0A0DU, 0x2A95U, 0x1AA8U, 0x1186U, 0x1038U, 0x249BU, 0x20A9U, 0x0B86U, 0x0881U,
	0x0137U, 0x0708U, 0x234BU, 0x2079U, 0x2DC9U, 0x0D66U, 0x01EAU, 0x0046U, 0x000AU, 0x06DDU, 0x00FBU, 0x0DDBU, 0x1D69U, 0x2D59U, 0x0D56U, 0x1D56U,
	0x11E8U, 0x1046U, 0x249DU, 0x053BU, 0x1552U, 0x1E7AU, 0x2D80U, 0x0680U, 0x1C5CU, 0x2657U, 0x27C4U, 0x1A41U, 0x260AU, 0x27B9U, 0x211BU, 0x2029U,
	0x26E2U, 0x058EU, 0x2315U, 0x0503U, 0x154AU, 0x2C30U, 0x0650U, 0x0E9EU, 0x2B3CU, 0x2877U, 0x137FU, 0x02C9U, 0x0E1DU, 0x244EU, 0x209EU, 0x1260U,
	0x02A0U, 0x0060U, 0x1B7CU, 0x2637U, 0x2E9BU, 0x0D84U, 0x1681U, 0x0337U, 0x299BU, 0x2F17U, 0x2904U, 0x05DCU, 0x1569U, 0x030FU, 0x0E27U, 0x2B2BU,
	0x2199U, 0x203BU, 0x2009U, 0x2DB9U, 0x28D2U, 0x138CU, 0x1082U, 0x1DCAU, 0x0B1DU, 0x0872U, 0x0EECU, 0x1D90U, 0x2683U, 0x0C5CU, 0x01C4U, 0x2966U,
	0x05EAU, 0x156BU, 0x17A2U, 0x17F3U, 0x1123U, 0x1DE1U, 0x1FB3U, 0x191AU, 0x0396U, 0x22CDU, 0x2067U, 0x04A1U, 0x153CU, 0x2C2EU, 0x21BEU, 0x04D2U,
	0x1543U, 0x2C2FU, 0x1407U, 0x09B8U, 0x083FU, 0x2A53U, 0x13C3U, 0x1E41U, 0x0B2EU, 0x0F50U, 0x0230U, 0x0050U, 0x06E7U, 0x07D8U, 0x0ED6U, 0x2B44U,
	0x1AC1U, 0x0AAEU, 0x2AACU, 0x2F3EU, 0x222EU, 0x04E2U, 0x29D8U, 0x1A8DU, 0x03CBU, 0x1BF9U, 0x03FFU, 0x22DCU, 0x12B2U, 0x1E1AU, 0x1204U, 0x104AU,
	0x1DC2U, 0x18D3U, 0x1143U, 0x170AU, 0x2C70U, 0x28A3U, 0x2818U, 0x1A4DU, 0x1179U, 0x027FU, 0x14EEU, 0x09D9U, 0x23B2U, 0x0BF5U, 0x1648U, 0x10E6U,
	0x026AU, 0x14EBU, 0x02FDU, 0x1500U, 0x0300U, 0x1BDCU, 0x11B2U, 0x24D1U, 0x0C1EU, 0x2405U, 0x19B8U, 0x2CD2U, 0x28B1U, 0x281AU, 0x2EE0U, 0x1B45U,
	0x1878U, 0x1136U, 0x0951U, 0x1CC3U, 0x11D3U, 0x1043U, 0x1DC1U, 0x268AU, 0x0C5DU, 0x240EU, 0x2E4CU, 0x28E7U, 0x138FU, 0x175EU, 0x2C7CU, 0x1412U,
	0x02DEU, 0x0E20U, 0x2B2AU, 0x2F50U, 0x1B55U, 0x2D0DU, 0x2F95U, 0x2916U, 0x2F04U, 0x0D93U, 0x08CCU, 0x1CB0U, 0x2663U, 0x1333U, 0x2508U, 0x19DDU,
	0x1169U, 0x1DEBU, 0x2690U, 0x1A15U, 0x1171U, 0x1035U, 0x1DBFU, 0x11F7U, 0x0291U, 0x0E15U, 0x0203U, 0x296FU, 0x1A7EU, 0x1180U, 0x0280U, 0x0737U,
	0x0EBFU, 0x16AEU, 0x0A19U, 0x1604U, 0x256FU, 0x0559U, 0x29E9U, 0x216BU, 0x2710U, 0x2EBAU, 0x1464U, 0x1E58U, 0x1FC4U, 0x1FF8U, 0x26DBU, 0x058DU,
	0x00CBU, 0x001DU, 0x224EU, 0x2E0CU, 0x0694U, 0x2A16U, 0x284DU, 0x1379U, 0x2512U, 0x20BAU, 0x1264U, 0x2BC6U, 0x13F8U, 0x176DU, 0x1EC7U, 0x2D8BU,
	0x2FA7U, 0x223DU, 0x272EU, 0x1350U, 0x1755U, 0x17E8U, 0x17FDU, 0x1800U, 0x1EDCU, 0x2D8EU, 0x0682U, 0x00EEU, 0x0022U, 0x0DBCU, 0x1689U, 0x2582U,
	0x20CAU, 0x26F9U, 0x1A24U, 0x03BCU, 0x29AEU, 0x1A87U, 0x2614U, 0x2E96U, 0x2216U, 0x2E04U, 0x144AU, 0x02E6U, 0x006AU, 0x2259U, 0x2732U, 0x0C75U,
	0x2AEDU, 0x13D9U, 0x108DU, 0x16F0U, 0x10FEU, 0x0949U, 0x2A79U, 0x1AA4U, 0x1861U, 0x2CA1U, 0x28AAU, 0x2819U, 0x0C96U, 0x165FU, 0x257CU, 0x1312U,
	0x0995U, 0x083AU, 0x0EE4U, 0x2B46U, 0x2F54U, 0x147AU, 0x10A4U, 0x2B86U, 0x21A6U, 0x2DF4U, 0x2FB6U, 0x1488U, 0x10A6U, 0x1018U, 0x2B72U, 0x13ECU,
	0x2BFEU, 0x1400U, 0x09B7U, 0x15F6U, 0x256DU, 0x20C7U, 0x201DU, 0x0B72U, 0x2AC8U, 0x2F42U, 0x1B53U, 0x187AU, 0x25C9U, 0x131DU, 0x02BBU, 0x0E1BU,
	0x0FBBU, 0x16D2U, 0x2C68U, 0x0658U, 0x00E8U, 0x226BU, 0x2059U, 0x049FU, 0x00A9U, 0x2262U, 0x0BC5U, 0x088AU, 0x15CBU, 0x031DU, 0x0E29U, 0x0FBDU,
	0x2B65U, 0x0633U, 0x1C51U, 0x2D31U, 0x21E3U, 0x196AU, 0x0A7DU, 0x2AA5U, 0x2F3DU, 0x2FE5U, 0x2FFDU, 0x06DBU, 0x1C69U, 0x040FU, 0x0770U, 0x0110U,
	0x0DDEU, 0x2445U, 0x0C0AU, 0x164BU, 0x17C2U, 0x111CU, 0x1DE0U, 0x2D6AU, 0x1434U, 0x109AU, 0x24A9U, 0x20ABU, 0x2019U, 0x124DU, 0x1730U, 0x0350U,
	0x22C3U, 0x198AU, 0x03A6U, 0x0761U, 0x0EC5U, 0x2466U, 0x277DU, 0x27EEU, 0x1A47U, 0x03C1U, 0x151CU, 0x0304U, 0x1501U, 0x254AU, 0x20C2U, 0x04AEU,
	0x22F5U, 0x0BDAU, 0x088DU, 0x1CA7U, 0x11CFU, 0x171EU, 0x0A29U, 0x2A99U, 0x13CDU, 0x251EU, 0x0C29U, 0x1D2BU, 0x1F99U, 0x2DA9U, 0x143DU, 0x252EU,
	0x20BEU, 0x0B89U, 0x0F5DU, 0x0FE9U, 0x0FFDU, 0x1DB7U, 0x1FADU, 0x0B62U, 0x1633U, 0x10E3U, 0x2B8FU, 0x0639U, 0x2A09U, 0x1A94U, 0x03CCU, 0x0E42U,
	0x08E5U, 0x15D8U, 0x10D6U, 0x1DD6U, 0x268DU, 0x1339U, 0x02BFU, 0x0740U, 0x2353U, 0x12C3U, 0x24F8U, 0x0548U, 0x230BU, 0x2E27U, 0x144FU, 0x1E55U,
	0x18E8U, 0x1146U, 0x1DE6U, 0x0B21U, 0x0197U, 0x2284U, 0x1981U, 0x1F13U, 0x0B4CU, 0x23E7U, 0x0521U, 0x29E1U, 0x2F21U, 0x2FE1U, 0x06D7U, 0x2344U,
	0x2078U, 0x0B7FU, 0x0880U, 0x0EEEU, 0x0222U, 0x004EU, 0x2255U, 0x2E0DU, 0x28DEU, 0x2EFCU, 0x1B49U, 0x119DU, 0x24CEU, 0x0542U, 0x1553U, 0x10C3U,
	0x0265U, 0x297DU, 0x1A80U, 0x2613U, 0x0C4CU, 0x1D30U, 0x0B07U, 0x1626U, 0x032AU, 0x1BE2U, 0x1F6AU, 0x1234U, 0x1E08U, 0x18DDU, 0x1820U, 0x1805U,
	0x0A4AU, 0x160BU, 0x2570U, 0x27A3U, 0x2ECFU, 0x1467U, 0x2534U, 0x2E76U, 0x28EDU, 0x2147U, 0x04C1U, 0x0E65U, 0x08EAU, 0x0146U, 0x2954U, 0x0CC3U,
	0x1D41U, 0x11E5U, 0x096AU, 0x15EBU, 0x2C47U, 0x1AE6U, 0x1F46U, 0x1FE6U, 0x2DB4U, 0x0D63U, 0x2B0FU, 0x2195U, 0x2716U, 0x0C71U, 0x01C7U, 0x0041U,
	0x149CU, 0x1E60U, 0x120EU, 0x1727U, 0x1EBDU, 0x26AEU, 0x2EACU, 0x1462U, 0x09C5U, 0x15F8U, 0x09FFU, 0x2A93U, 0x0615U, 0x07BAU, 0x2A40U, 0x2853U,
	0x2131U, 0x1275U, 0x02A3U, 0x073CU, 0x2A2EU, 0x2F2CU, 0x2907U, 0x0CB8U, 0x241BU, 0x0C04U, 0x0893U, 0x2A5FU, 0x2F33U, 0x2908U, 0x2F02U, 0x2901U
};

const std::vector<ushort> RLWEQ12289N1024::BitRevTable =
{
	0x0000U, 0x0200U, 0x0100U, 0x0300U, 0x0080U, 0x0280U, 0x0180U, 0x0380U, 0x0040U, 0x0240U, 0x0140U, 0x0340U, 0x00C0U, 0x02C0U, 0x01C0U, 0x03C0U,
	0x0020U, 0x0220U, 0x0120U, 0x0320U, 0x00A0U, 0x02A0U, 0x01A0U, 0x03A0U, 0x0060U, 0x0260U, 0x0160U, 0x0360U, 0x00E0U, 0x02E0U, 0x01E0U, 0x03E0U,
	0x0010U, 0x0210U, 0x0110U, 0x0310U, 0x0090U, 0x0290U, 0x0190U, 0x0390U, 0x0050U, 0x0250U, 0x0150U, 0x0350U, 0x00D0U, 0x02D0U, 0x01D0U, 0x03D0U,
	0x0030U, 0x0230U, 0x0130U, 0x0330U, 0x00B0U, 0x02B0U, 0x01B0U, 0x03B0U, 0x0070U, 0x0270U, 0x0170U, 0x0370U, 0x00F0U, 0x02F0U, 0x01F0U, 0x03F0U,
	0x0008U, 0x0208U, 0x0108U, 0x0308U, 0x0088U, 0x0288U, 0x0188U, 0x0388U, 0x0048U, 0x0248U, 0x0148U, 0x0348U, 0x00C8U, 0x02C8U, 0x01C8U, 0x03C8U,
	0x0028U, 0x0228U, 0x0128U, 0x0328U, 0x00A8U, 0x02A8U, 0x01A8U, 0x03A8U, 0x0068U, 0x0268U, 0x0168U, 0x0368U, 0x00E8U, 0x02E8U, 0x01E8U, 0x03E8U,
	0x0018U, 0x0218U, 0x0118U, 0x0318U, 0x0098U, 0x0298U, 0x0198U, 0x0398U, 0x0058U, 0x0258U, 0x0158U, 0x0358U, 0x00D8U, 0x02D8U, 0x01D8U, 0x03D8U,
	0x0038U, 0x0238U, 0x0138U, 0x0338U, 0x00B8U, 0x02B8U, 0x01B8U, 0x03B8U, 0x0078U, 0x0278U, 0x0178U, 0x0378U, 0x00F8U, 0x02F8U, 0x01F8U, 0x03F8U,
	0x0004U, 0x0204U, 0x0104U, 0x0304U, 0x0084U, 0x0284U, 0x0184U, 0x0384U, 0x0044U, 0x0244U, 0x0144U, 0x0344U, 0x00C4U, 0x02C4U, 0x01C4U, 0x03C4U,
	0x0024U, 0x0224U, 0x0124U, 0x0324U, 0x00A4U, 0x02A4U, 0x01A4U, 0x03A4U, 0x0064U, 0x0264U, 0x0164U, 0x0364U, 0x00E4U, 0x02E4U, 0x01E4U, 0x03E4U,
	0x0014U, 0x0214U, 0x0114U, 0x0314U, 0x0094U, 0x0294U, 0x0194U, 0x0394U, 0x0054U, 0x0254U, 0x0154U, 0x0354U, 0x00D4U, 0x02D4U, 0x01D4U, 0x03D4U,
	0x0034U, 0x0234U, 0x0134U, 0x0334U, 0x00B4U, 0x02B4U, 0x01B4U, 0x03B4U, 0x0074U, 0x0274U, 0x0174U, 0x0374U, 0x00F4U, 0x02F4U, 0x01F4U, 0x03F4U,
	0x000CU, 0x020CU, 0x010CU, 0x030CU, 0x008CU, 0x028CU, 0x018CU, 0x038CU, 0x004CU, 0x024CU, 0x014CU, 0x034CU, 0x00CCU, 0x02CCU, 0x01CCU, 0x03CCU,
	0x002CU, 0x022CU, 0x012CU, 0x032CU, 0x00ACU, 0x02ACU, 0x01ACU, 0x03ACU, 0x006CU, 0x026CU, 0x016CU, 0x036CU, 0x00ECU, 0x02ECU, 0x01ECU, 0x03ECU,
	0x001CU, 0x021CU, 0x011CU, 0x031CU, 0x009CU, 0x029CU, 0x019CU, 0x039CU, 0x005CU, 0x025CU, 0x015CU, 0x035CU, 0x00DCU, 0x02DCU, 0x01DCU, 0x03DCU,
	0x003CU, 0x023CU, 0x013CU, 0x033CU, 0x00BCU, 0x02BCU, 0x01BCU, 0x03BCU, 0x007CU, 0x027CU, 0x017CU, 0x037CU, 0x00FCU, 0x02FCU, 0x01FCU, 0x03FCU,
	0x0002U, 0x0202U, 0x0102U, 0x0302U, 0x0082U, 0x0282U, 0x0182U, 0x0382U, 0x0042U, 0x0242U, 0x0142U, 0x0342U, 0x00C2U, 0x02C2U, 0x01C2U, 0x03C2U,
	0x0022U, 0x0222U, 0x0122U, 0x0322U, 0x00A2U, 0x02A2U, 0x01A2U, 0x03A2U, 0x0062U, 0x0262U, 0x0162U, 0x0362U, 0x00E2U, 0x02E2U, 0x01E2U, 0x03E2U,
	0x0012U, 0x0212U, 0x0112U, 0x0312U, 0x0092U, 0x0292U, 0x0192U, 0x0392U, 0x0052U, 0x0252U, 0x0152U, 0x0352U, 0x00D2U, 0x02D2U, 0x01D2U, 0x03D2U,
	0x0032U, 0x0232U, 0x0132U, 0x0332U, 0x00B2U, 0x02B2U, 0x01B2U, 0x03B2U, 0x0072U, 0x0272U, 0x0172U, 0x0372U, 0x00F2U, 0x02F2U, 0x01F2U, 0x03F2U,
	0x000AU, 0x020AU, 0x010AU, 0x030AU, 0x008AU, 0x028AU, 0x018AU, 0x038AU, 0x004AU, 0x024AU, 0x014AU, 0x034AU, 0x00CAU, 0x02CAU, 0x01CAU, 0x03CAU,
	0x002AU, 0x022AU, 0x012AU, 0x032AU, 0x00AAU, 0x02AAU, 0x01AAU, 0x03AAU, 0x006AU, 0x026AU, 0x016AU, 0x036AU, 0x00EAU, 0x02EAU, 0x01EAU, 0x03EAU,
	0x001AU, 0x021AU, 0x011AU, 0x031AU, 0x009AU, 0x029AU, 0x019AU, 0x039AU, 0x005AU, 0x025AU, 0x015AU, 0x035AU, 0x00DAU, 0x02DAU, 0x01DAU, 0x03DAU,
	0x003AU, 0x023AU, 0x013AU, 0x033AU, 0x00BAU, 0x02BAU, 0x01BAU, 0x03BAU, 0x007AU, 0x027AU, 0x017AU, 0x037AU, 0x00FAU, 0x02FAU, 0x01FAU, 0x03FAU,
	0x0006U, 0x0206U, 0x0106U, 0x0306U, 0x0086U, 0x0286U, 0x0186U, 0x0386U, 0x0046U, 0x0246U, 0x0146U, 0x0346U, 0x00C6U, 0x02C6U, 0x01C6U, 0x03C6U,
	0x0026U, 0x0226U, 0x0126U, 0x0326U, 0x00A6U, 0x02A6U, 0x01A6U, 0x03A6U, 0x0066U, 0x0266U, 0x0166U, 0x0366U, 0x00E6U, 0x02E6U, 0x01E6U, 0x03E6U,
	0x0016U, 0x0216U, 0x0116U, 0x0316U, 0x0096U, 0x0296U, 0x0196U, 0x0396U, 0x0056U, 0x0256U, 0x0156U, 0x0356U, 0x00D6U, 0x02D6U, 0x01D6U, 0x03D6U,
	0x0036U, 0x0236U, 0x0136U, 0x0336U, 0x00B6U, 0x02B6U, 0x01B6U, 0x03B6U, 0x0076U, 0x0276U, 0x0176U, 0x0376U, 0x00F6U, 0x02F6U, 0x01F6U, 0x03F6U,
	0x000EU, 0x020EU, 0x010EU, 0x030EU, 0x008EU, 0x028EU, 0x018EU, 0x038EU, 0x004EU, 0x024EU, 0x014EU, 0x034EU, 0x00CEU, 0x02CEU, 0x01CEU, 0x03CEU,
	0x002EU, 0x022EU, 0x012EU, 0x032EU, 0x00AEU, 0x02AEU, 0x01AEU, 0x03AEU, 0x006EU, 0x026EU, 0x016EU, 0x036EU, 0x00EEU, 0x02EEU, 0x01EEU, 0x03EEU,
	0x001EU, 0x021EU, 0x011EU, 0x031EU, 0x009EU, 0x029EU, 0x019EU, 0x039EU, 0x005EU, 0x025EU, 0x015EU, 0x035EU, 0x00DEU, 0x02DEU, 0x01DEU, 0x03DEU,
	0x003EU, 0x023EU, 0x013EU, 0x033EU, 0x00BEU, 0x02BEU, 0x01BEU, 0x03BEU, 0x007EU, 0x027EU, 0x017EU, 0x037EU, 0x00FEU, 0x02FEU, 0x01FEU, 0x03FEU,
	0x0001U, 0x0201U, 0x0101U, 0x0301U, 0x0081U, 0x0281U, 0x0181U, 0x0381U, 0x0041U, 0x0241U, 0x0141U, 0x0341U, 0x00C1U, 0x02C1U, 0x01C1U, 0x03C1U,
	0x0021U, 0x0221U, 0x0121U, 0x0321U, 0x00A1U, 0x02A1U, 0x01A1U, 0x03A1U, 0x0061U, 0x0261U, 0x0161U, 0x0361U, 0x00E1U, 0x02E1U, 0x01E1U, 0x03E1U,
	0x0011U, 0x0211U, 0x0111U, 0x0311U, 0x0091U, 0x0291U, 0x0191U, 0x0391U, 0x0051U, 0x0251U, 0x0151U, 0x0351U, 0x00D1U, 0x02D1U, 0x01D1U, 0x03D1U,
	0x0031U, 0x0231U, 0x0131U, 0x0331U, 0x00B1U, 0x02B1U, 0x01B1U, 0x03B1U, 0x0071U, 0x0271U, 0x0171U, 0x0371U, 0x00F1U, 0x02F1U, 0x01F1U, 0x03F1U,
	0x0009U, 0x0209U, 0x0109U, 0x0309U, 0x0089U, 0x0289U, 0x0189U, 0x0389U, 0x0049U, 0x0249U, 0x0149U, 0x0349U, 0x00C9U, 0x02C9U, 0x01C9U, 0x03C9U,
	0x0029U, 0x0229U, 0x0129U, 0x0329U, 0x00A9U, 0x02A9U, 0x01A9U, 0x03A9U, 0x0069U, 0x0269U, 0x0169U, 0x0369U, 0x00E9U, 0x02E9U, 0x01E9U, 0x03E9U,
	0x0019U, 0x0219U, 0x0119U, 0x0319U, 0x0099U, 0x0299U, 0x0199U, 0x0399U, 0x0059U, 0x0259U, 0x0159U, 0x0359U, 0x00D9U, 0x02D9U, 0x01D9U, 0x03D9U,
	0x0039U, 0x0239U, 0x0139U, 0x0339U, 0x00B9U, 0x02B9U, 0x01B9U, 0x03B9U, 0x0079U, 0x0279U, 0x0179U, 0x0379U, 0x00F9U, 0x02F9U, 0x01F9U, 0x03F9U,
	0x0005U, 0x0205U, 0x0105U, 0x0305U, 0x0085U, 0x0285U, 0x0185U, 0x0385U, 0x0045U, 0x0245U, 0x0145U, 0x0345U, 0x00C5U, 0x02C5U, 0x01C5U, 0x03C5U,
	0x0025U, 0x0225U, 0x0125U, 0x0325U, 0x00A5U, 0x02A5U, 0x01A5U, 0x03A5U, 0x0065U, 0x0265U, 0x0165U, 0x0365U, 0x00E5U, 0x02E5U, 0x01E5U, 0x03E5U,
	0x0015U, 0x0215U, 0x0115U, 0x0315U, 0x0095U, 0x0295U, 0x0195U, 0x0395U, 0x0055U, 0x0255U, 0x0155U, 0x0355U, 0x00D5U, 0x02D5U, 0x01D5U, 0x03D5U,
	0x0035U, 0x0235U, 0x0135U, 0x0335U, 0x00B5U, 0x02B5U, 0x01B5U, 0x03B5U, 0x0075U, 0x0275U, 0x0175U, 0x0375U, 0x00F5U, 0x02F5U, 0x01F5U, 0x03F5U,
	0x000DU, 0x020DU, 0x010DU, 0x030DU, 0x008DU, 0x028DU, 0x018DU, 0x038DU, 0x004DU, 0x024DU, 0x014DU, 0x034DU, 0x00CDU, 0x02CDU, 0x01CDU, 0x03CDU,
	0x002DU, 0x022DU, 0x012DU, 0x032DU, 0x00ADU, 0x02ADU, 0x01ADU, 0x03ADU, 0x006DU, 0x026DU, 0x016DU, 0x036DU, 0x00EDU, 0x02EDU, 0x01EDU, 0x03EDU,
	0x001DU, 0x021DU, 0x011DU, 0x031DU, 0x009DU, 0x029DU, 0x019DU, 0x039DU, 0x005DU, 0x025DU, 0x015DU, 0x035DU, 0x00DDU, 0x02DDU, 0x01DDU, 0x03DDU,
	0x003DU, 0x023DU, 0x013DU, 0x033DU, 0x00BDU, 0x02BDU, 0x01BDU, 0x03BDU, 0x007DU, 0x027DU, 0x017DU, 0x037DU, 0x00FDU, 0x02FDU, 0x01FDU, 0x03FDU,
	0x0003U, 0x0203U, 0x0103U, 0x0303U, 0x0083U, 0x0283U, 0x0183U, 0x0383U, 0x0043U, 0x0243U, 0x0143U, 0x0343U, 0x00C3U, 0x02C3U, 0x01C3U, 0x03C3U,
	0x0023U, 0x0223U, 0x0123U, 0x0323U, 0x00A3U, 0x02A3U, 0x01A3U, 0x03A3U, 0x0063U, 0x0263U, 0x0163U, 0x0363U, 0x00E3U, 0x02E3U, 0x01E3U, 0x03E3U,
	0x0013U, 0x0213U, 0x0113U, 0x0313U, 0x0093U, 0x0293U, 0x0193U, 0x0393U, 0x0053U, 0x0253U, 0x0153U, 0x0353U, 0x00D3U, 0x02D3U, 0x01D3U, 0x03D3U,
	0x0033U, 0x0233U, 0x0133U, 0x0333U, 0x00B3U, 0x02B3U, 0x01B3U, 0x03B3U, 0x0073U, 0x0273U, 0x0173U, 0x0373U, 0x00F3U, 0x02F3U, 0x01F3U, 0x03F3U,
	0x000BU, 0x020BU, 0x010BU, 0x030BU, 0x008BU, 0x028BU, 0x018BU, 0x038BU, 0x004BU, 0x024BU, 0x014BU, 0x034BU, 0x00CBU, 0x02CBU, 0x01CBU, 0x03CBU,
	0x002BU, 0x022BU, 0x012BU, 0x032BU, 0x00ABU, 0x02ABU, 0x01ABU, 0x03ABU, 0x006BU, 0x026BU, 0x016BU, 0x036BU, 0x00EBU, 0x02EBU, 0x01EBU, 0x03EBU,
	0x001BU, 0x021BU, 0x011BU, 0x031BU, 0x009BU, 0x029BU, 0x019BU, 0x039BU, 0x005BU, 0x025BU, 0x015BU, 0x035BU, 0x00DBU, 0x02DBU, 0x01DBU, 0x03DBU,
	0x003BU, 0x023BU, 0x013BU, 0x033BU, 0x00BBU, 0x02BBU, 0x01BBU, 0x03BBU, 0x007BU, 0x027BU, 0x017BU, 0x037BU, 0x00FBU, 0x02FBU, 0x01FBU, 0x03FBU,
	0x0007U, 0x0207U, 0x0107U, 0x0307U, 0x0087U, 0x0287U, 0x0187U, 0x0387U, 0x0047U, 0x0247U, 0x0147U, 0x0347U, 0x00C7U, 0x02C7U, 0x01C7U, 0x03C7U,
	0x0027U, 0x0227U, 0x0127U, 0x0327U, 0x00A7U, 0x02A7U, 0x01A7U, 0x03A7U, 0x0067U, 0x0267U, 0x0167U, 0x0367U, 0x00E7U, 0x02E7U, 0x01E7U, 0x03E7U,
	0x0017U, 0x0217U, 0x0117U, 0x0317U, 0x0097U, 0x0297U, 0x0197U, 0x0397U, 0x0057U, 0x0257U, 0x0157U, 0x0357U, 0x00D7U, 0x02D7U, 0x01D7U, 0x03D7U,
	0x0037U, 0x0237U, 0x0137U, 0x0337U, 0x00B7U, 0x02B7U, 0x01B7U, 0x03B7U, 0x0077U, 0x0277U, 0x0177U, 0x0377U, 0x00F7U, 0x02F7U, 0x01F7U, 0x03F7U,
	0x000FU, 0x020FU, 0x010FU, 0x030FU, 0x008FU, 0x028FU, 0x018FU, 0x038FU, 0x004FU, 0x024FU, 0x014FU, 0x034FU, 0x00CFU, 0x02CFU, 0x01CFU, 0x03CFU,
	0x002FU, 0x022FU, 0x012FU, 0x032FU, 0x00AFU, 0x02AFU, 0x01AFU, 0x03AFU, 0x006FU, 0x026FU, 0x016FU, 0x036FU, 0x00EFU, 0x02EFU, 0x01EFU, 0x03EFU,
	0x001FU, 0x021FU, 0x011FU, 0x031FU, 0x009FU, 0x029FU, 0x019FU, 0x039FU, 0x005FU, 0x025FU, 0x015FU, 0x035FU, 0x00DFU, 0x02DFU, 0x01DFU, 0x03DFU,
	0x003FU, 0x023FU, 0x013FU, 0x033FU, 0x00BFU, 0x02BFU, 0x01BFU, 0x03BFU, 0x007FU, 0x027FU, 0x017FU, 0x037FU, 0x00FFU, 0x02FFU, 0x01FFU, 0x03FFU
};

//~~~Public Functions~~~//

void RLWEQ12289N1024::CpaDecrypt(std::vector<byte> &Secret, const std::vector<byte> &CipherText, const std::vector<byte> &PrivateKey)
{
	std::array<ushort, RLWE_N> vprime;
	std::array<ushort, RLWE_N> uhat;
	std::array<ushort, RLWE_N> tmp;
	std::array<ushort, RLWE_N> shat;

	PolyFromBytes(shat, PrivateKey);
	DecodeC(uhat, vprime, CipherText);

	PolyMulPointwise(tmp, shat, uhat);
	PolyInvNtt(tmp);
	PolySub(tmp, tmp, vprime);

	PolyToMessage(Secret, tmp);
}

void RLWEQ12289N1024::CpaEncrypt(std::vector<byte> &CipherText, std::vector<byte> &Secret, const std::vector<byte> &PublicKey, const std::vector<byte> &Coin)
{
	std::array<ushort, RLWE_N> sprime;
	std::array<ushort, RLWE_N> eprime;
	std::array<ushort, RLWE_N> vprime;
	std::array<ushort, RLWE_N> ahat;
	std::array<ushort, RLWE_N> bhat;
	std::array<ushort, RLWE_N> eprimeprime;
	std::array<ushort, RLWE_N> uhat;
	std::array<ushort, RLWE_N> v;
	std::vector<byte> seed(RLWE_SEED_SIZE);

	PolyFromMessage(v, Secret);

	DecodePk(bhat, seed, PublicKey);
	PolyUniform(ahat, seed);

	PolySample(sprime, Coin, 0);
	PolySample(eprime, Coin, 1);
	PolySample(eprimeprime, Coin, 2);

	PolyNtt(sprime);
	PolyNtt(eprime);

	PolyMulPointwise(uhat, ahat, sprime);
	PolyAdd(uhat, uhat, eprime);

	PolyMulPointwise(vprime, bhat, sprime);
	PolyInvNtt(vprime);

	PolyAdd(vprime, vprime, eprimeprime);
	PolyAdd(vprime, vprime, v);

	EncodeC(CipherText, uhat, vprime);
}

void RLWEQ12289N1024::CpaGenerate(std::vector<byte> &PublicKey, std::vector<byte> &PrivateKey, std::unique_ptr<Prng::IPrng> &Rng)
{
	std::array<ushort, RLWE_N> ahat;
	std::array<ushort, RLWE_N> ehat;
	std::array<ushort, RLWE_N> ahatshat;
	std::array<ushort, RLWE_N> bhat;
	std::array<ushort, RLWE_N> shat;
	std::vector<byte> pubk(RLWE_SEED_SIZE);
	std::vector<byte> noisek(RLWE_SEED_SIZE);
	std::vector<byte> tmpk(2 * RLWE_SEED_SIZE);

	Rng->Generate(pubk);
	XOF(pubk, 0, pubk.size(), tmpk, 0, tmpk.size(), Keccak::KECCAK256_RATE_SIZE);
	MemoryTools::Copy(tmpk, 0, pubk, 0, pubk.size());
	MemoryTools::Copy(tmpk, pubk.size(), noisek, 0, noisek.size());

	PolyUniform(ahat, pubk);

	PolySample(shat, noisek, 0);
	PolyNtt(shat);

	PolySample(ehat, noisek, 1);
	PolyNtt(ehat);

	PolyMulPointwise(ahatshat, shat, ahat);
	PolyAdd(bhat, ehat, ahatshat);

	PolyToBytes(PrivateKey, shat);
	EncodePk(PublicKey, bhat, pubk);
}

bool RLWEQ12289N1024::Decapsulate(std::vector<byte> &Secret, const std::vector<byte> &CipherText, const std::vector<byte> &PrivateKey)
{
	std::vector<byte> buf(2 * RLWE_SEED_SIZE);
	std::vector<byte> ctcmp(CIPHERTEXT_SIZE);
	// contains key, coins, qrom-hash 
	std::vector<byte> kcoinsd(3 * RLWE_SEED_SIZE);
	std::vector<byte> tmpc(2 * RLWE_SEED_SIZE);
	std::vector<byte> tmppk(PUBLICKEY_SIZE);
	size_t result;

	CpaDecrypt(buf, CipherText, PrivateKey);

	// use hash of pk stored in sk
	MemoryTools::Copy(PrivateKey, PRIVATEKEY_SIZE - (2 * RLWE_SEED_SIZE), buf, RLWE_SEED_SIZE, RLWE_SEED_SIZE);
	XOF(buf, 0, 2 * RLWE_SEED_SIZE, kcoinsd, 0, 3 * RLWE_SEED_SIZE, Keccak::KECCAK256_RATE_SIZE);

	// coins are in kcoinsd+NEWHOPE_SYMBYTES 
	MemoryTools::Copy(kcoinsd, RLWE_SEED_SIZE, tmpc, 0, 2 * RLWE_SEED_SIZE);
	MemoryTools::Copy(PrivateKey, RLWE_CPAPRIVATEKEY_SIZE, tmppk, 0, PUBLICKEY_SIZE);
	CpaEncrypt(ctcmp, buf, tmppk, tmpc);

	MemoryTools::Copy(kcoinsd, 2 * RLWE_SEED_SIZE, ctcmp, RLWE_CPACIPHERTEXT_SIZE, RLWE_SEED_SIZE);
	result = IntegerTools::Verify(CipherText, ctcmp, CipherText.size());

	// overwrite coins in kcoinsd with h(c)  
	XOF(CipherText, 0, CIPHERTEXT_SIZE, kcoinsd, RLWE_SEED_SIZE, RLWE_SEED_SIZE, Keccak::KECCAK256_RATE_SIZE);
	// overwrite pre-k with z on re-encryption failure
	IntegerTools::CMov(PrivateKey, PRIVATEKEY_SIZE - RLWE_SEED_SIZE, kcoinsd, 0, RLWE_SEED_SIZE, static_cast<byte>(result));
	// hash concatenation of pre-k and h(c) to k 
	XOF(kcoinsd, 0, 2 * RLWE_SEED_SIZE, Secret, 0, Secret.size(), Keccak::KECCAK256_RATE_SIZE);

	return (result == 0);
}

void RLWEQ12289N1024::Encapsulate(std::vector<byte> &CipherText, std::vector<byte> &Secret, const std::vector<byte> &PublicKey, std::unique_ptr<Prng::IPrng> &Rng)
{
	std::vector<byte> buf(2 * RLWE_SEED_SIZE);
	// contains key, coins, qrom-hash 
	std::vector<byte> kcoinsd(3 * RLWE_SEED_SIZE);
	std::vector<byte> tmps(2 * RLWE_SEED_SIZE);

	Rng->Generate(buf, 0, RLWE_SEED_SIZE);
	// don't release system RNG output directly
	XOF(buf, 0, RLWE_SEED_SIZE, buf, 0, RLWE_SEED_SIZE, Keccak::KECCAK256_RATE_SIZE);
	// multitarget countermeasure for coins + contributory KEM 
	XOF(PublicKey, 0, PublicKey.size(), buf, RLWE_SEED_SIZE, RLWE_SEED_SIZE, Keccak::KECCAK256_RATE_SIZE);
	XOF(buf, 0, buf.size(), kcoinsd, 0, kcoinsd.size(), Keccak::KECCAK256_RATE_SIZE);

	// coins are in kcoinsd+NEWHOPE_SYMBYTES
	MemoryTools::Copy(kcoinsd, RLWE_SEED_SIZE, tmps, 0, tmps.size());
	CpaEncrypt(CipherText, buf, PublicKey, tmps);

	// copy Targhi-Unruh hash into ct 
	MemoryTools::Copy(kcoinsd, 2 * RLWE_SEED_SIZE, CipherText, RLWE_CPACIPHERTEXT_SIZE, RLWE_SEED_SIZE);
	// overwrite coins in kcoinsd with h(c) 
	XOF(CipherText, 0, CIPHERTEXT_SIZE, kcoinsd, RLWE_SEED_SIZE, RLWE_SEED_SIZE, Keccak::KECCAK256_RATE_SIZE);
	XOF(kcoinsd, 0, 2 * RLWE_SEED_SIZE, Secret, 0, Secret.size(), Keccak::KECCAK256_RATE_SIZE);
}

void RLWEQ12289N1024::Generate(std::vector<byte> &PublicKey, std::vector<byte> &PrivateKey, std::unique_ptr<Prng::IPrng> &Rng)
{
	std::vector<byte> coin(RLWE_SEED_SIZE * 2);

	// generate the public and private keys
	CpaGenerate(PublicKey, PrivateKey, Rng);

	// generate H(pk)
	XOF(PublicKey, 0, PublicKey.size(), coin, 0, RLWE_SEED_SIZE, Keccak::KECCAK256_RATE_SIZE);
	// value z for pseudo-random output on reject
	Rng->Generate(coin, RLWE_SEED_SIZE, RLWE_SEED_SIZE);

	// copy the puplic key + H(pk) to sk
	MemoryTools::Copy(PublicKey, 0, PrivateKey, RLWE_CPAPRIVATEKEY_SIZE, PUBLICKEY_SIZE);
	MemoryTools::Copy(coin, 0, PrivateKey, RLWE_CPAPRIVATEKEY_SIZE + RLWE_CPAPUBLICKEY_SIZE, 2 * RLWE_SEED_SIZE);
}


//~~~Private Functions~~~//

void RLWEQ12289N1024::BitRevVector(std::array<ushort, RLWE_N> &P)
{
	ushort i;
	ushort r;
	ushort tmp;

	for (i = 0; i < RLWE_N; ++i)
	{
		r = BitRevTable[i];

		if (i < r)
		{
			tmp = P[i];
			P[i] = P[r];
			P[r] = tmp;
		}
	}
}

void RLWEQ12289N1024::DecodeC(std::array<ushort, RLWE_N> &B, std::array<ushort, RLWE_N> &V, const std::vector<byte> &R)
{
	// De-serialize the ciphertext; inverse of encode_c

	PolyFromBytes(B, R);
	PolyDecompress(V, R);
}

void RLWEQ12289N1024::DecodePk(std::array<ushort, RLWE_N> &PublicKey, std::vector<byte> &Seed, const std::vector<byte> &R)
{
	// De-serialize the public key; inverse of encodepk

	PolyFromBytes(PublicKey, R);
	MemoryTools::Copy(R, RLWE_POLY_SIZE, Seed, 0, RLWE_SEED_SIZE);
}

void RLWEQ12289N1024::EncodeC(std::vector<byte> &R, const std::array<ushort, RLWE_N> &B, const std::array<ushort, RLWE_N> &V)
{
	// Serialize the ciphertext as concatenation of the
	// serialization of the polynomial b and serialization
	// of the compressed polynomial v

	PolyToBytes(R, B);
	PolyCompress(R, V);
}

void RLWEQ12289N1024::EncodePk(std::vector<byte> &R, const std::array<ushort, RLWE_N> &PublicKey, const std::vector<byte> &Seed)
{
	// Serialize the public key as concatenation of the
	// serialization of the polynomial pk and the public seed
	// used to generete the polynomial a.

	PolyToBytes(R, PublicKey);
	MemoryTools::Copy(Seed, 0, R, RLWE_POLY_SIZE, RLWE_SEED_SIZE);
}

ushort RLWEQ12289N1024::FlipAbs(ushort X)
{
	// Computes |(x mod q) - Q/2|

	int16_t m;
	int16_t r;

	r = Freeze(X);
	r = r - (RLWE_Q / 2);
	m = r >> 15;

	return (r + m) ^ m;
}

ushort RLWEQ12289N1024::Freeze(ushort X)
{
	// Fully reduces an integer modulo q in constant time

	int16_t c;
	ushort m;
	ushort r;

	r = X % RLWE_Q;
	m = r - RLWE_Q;
	c = m;
	c >>= 15;
	r = m ^ ((r ^ m) & c);

	return r;
}

byte RLWEQ12289N1024::HammimgWeight(byte A)
{
	// Compute the Hamming weight of a byte

	byte r;

	r = A & 1;
	r += (A >> 1) & 1;
	r += (A >> 2) & 1;
	r += (A >> 3) & 1;
	r += (A >> 4) & 1;
	r += (A >> 5) & 1;
	r += (A >> 6) & 1;
	r += (A >> 7) & 1;

	return r;
}

ushort RLWEQ12289N1024::MontgomeryReduce(uint X)
{
	uint u;

	u = X * RLWE_QINV;
	u &= (1 << RLWE_RLOG) - 1;
	u *= RLWE_Q;
	X += u;

	return static_cast<ushort>(X >> RLWE_RLOG);
}

void RLWEQ12289N1024::MulCoefficients(std::array<ushort, RLWE_N> &Poly, const std::vector<ushort> &Factors)
{
	const uint RLSH = (1UL << RLWE_RLOG) - 1;
	size_t i;
	uint a;
	uint u;

	for (i = 0; i < Poly.size(); ++i)
	{
		a = Poly[i] * Factors[i];
		u = a * RLWE_QINV;
		u &= RLSH;
		u *= RLWE_Q;
		a += u;
		a >>= RLWE_RLOG;
		Poly[i] = static_cast<ushort>(a);
	}
}

void RLWEQ12289N1024::Ntt(std::array<ushort, RLWE_N> &A, const std::vector<ushort> &Omega)
{
	size_t distance;
	size_t start;
	size_t i;
	size_t j;
	size_t jTwiddle;
	ushort temp;
	ushort W;

	for (i = 0; i < 10; i += 2)
	{
		// Even level
		distance = (1UL << i);

		for (start = 0; start < distance; start++)
		{
			jTwiddle = 0;
			for (j = start; j < RLWE_N - 1; j += 2 * distance)
			{
				W = Omega[jTwiddle];
				++jTwiddle;
				temp = A[j];
				A[j] = (temp + A[j + distance]);
				A[j + distance] = MontgomeryReduce((W * (static_cast<uint>(temp) + (3 * RLWE_Q) - A[j + distance])));
			}
		}

		// Odd level
		distance <<= 1UL;

		for (start = 0; start < distance; start++)
		{
			jTwiddle = 0;
			for (j = start; j < RLWE_N - 1; j += 2 * distance)
			{
				W = Omega[jTwiddle];
				++jTwiddle;
				temp = A[j];
				A[j] = (temp + A[j + distance]) % RLWE_Q;
				A[j + distance] = MontgomeryReduce((W * (static_cast<uint>(temp) + (3 * RLWE_Q) - A[j + distance])));
			}
		}
	}
}

void RLWEQ12289N1024::PolyAdd(std::array<ushort, RLWE_N> &R, const std::array<ushort, RLWE_N> &A, const std::array<ushort, RLWE_N> &B)
{
	size_t i;

	for (i = 0; i < RLWE_N; ++i)
	{
		R[i] = (A[i] + B[i]) % RLWE_Q;
	}
}

void RLWEQ12289N1024::PolyCompress(std::vector<byte> &R, const std::array<ushort, RLWE_N> &P)
{
	std::array<uint, 8> t;
	size_t i;
	size_t k;

	k = 0;

	for (i = 0; i < RLWE_N; i += 8)
	{
		t[0] = Freeze(P[i]);
		t[0] = (((t[0] << 3) + RLWE_Q / 2) / RLWE_Q) & 7;
		t[1] = Freeze(P[i + 1]);
		t[1] = (((t[1] << 3) + RLWE_Q / 2) / RLWE_Q) & 7;
		t[2] = Freeze(P[i + 2]);
		t[2] = (((t[2] << 3) + RLWE_Q / 2) / RLWE_Q) & 7;
		t[3] = Freeze(P[i + 3]);
		t[3] = (((t[3] << 3) + RLWE_Q / 2) / RLWE_Q) & 7;
		t[4] = Freeze(P[i + 4]);
		t[4] = (((t[4] << 3) + RLWE_Q / 2) / RLWE_Q) & 7;
		t[5] = Freeze(P[i + 5]);
		t[5] = (((t[5] << 3) + RLWE_Q / 2) / RLWE_Q) & 7;
		t[6] = Freeze(P[i + 6]);
		t[6] = (((t[6] << 3) + RLWE_Q / 2) / RLWE_Q) & 7;
		t[7] = Freeze(P[i + 7]);
		t[7] = (((t[7] << 3) + RLWE_Q / 2) / RLWE_Q) & 7;

		R[RLWE_POLY_SIZE + k] = t[0] | (t[1] << 3) | (t[2] << 6);
		R[RLWE_POLY_SIZE + k + 1] = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
		R[RLWE_POLY_SIZE + k + 2] = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
		k += 3;
	}
}

void RLWEQ12289N1024::PolyDecompress(std::array<ushort, RLWE_N> &R, const std::vector<byte> &A)
{
	size_t i;
	size_t k;

	k = 0;

	for (i = 0; i < RLWE_N; i += 8)
	{
		R[i] = A[RLWE_POLY_SIZE + k] & 7;
		R[i + 1] = (A[RLWE_POLY_SIZE + k] >> 3) & 7;
		R[i + 2] = (A[RLWE_POLY_SIZE + k] >> 6) | ((A[RLWE_POLY_SIZE + k + 1] << 2) & 4);
		R[i + 3] = (A[RLWE_POLY_SIZE + k + 1] >> 1) & 7;
		R[i + 4] = (A[RLWE_POLY_SIZE + k + 1] >> 4) & 7;
		R[i + 5] = (A[RLWE_POLY_SIZE + k + 1] >> 7) | ((A[RLWE_POLY_SIZE + k + 2] << 1) & 6);
		R[i + 6] = (A[RLWE_POLY_SIZE + k + 2] >> 2) & 7;
		R[i + 7] = (A[RLWE_POLY_SIZE + k + 2] >> 5);
		k += 3;

		R[i] = (static_cast<uint>(R[i]) * RLWE_Q + 4) >> 3;
		R[i + 1] = (static_cast<uint>(R[i + 1]) * RLWE_Q + 4) >> 3;
		R[i + 2] = (static_cast<uint>(R[i + 2]) * RLWE_Q + 4) >> 3;
		R[i + 3] = (static_cast<uint>(R[i + 3]) * RLWE_Q + 4) >> 3;
		R[i + 4] = (static_cast<uint>(R[i + 4]) * RLWE_Q + 4) >> 3;
		R[i + 5] = (static_cast<uint>(R[i + 5]) * RLWE_Q + 4) >> 3;
		R[i + 6] = (static_cast<uint>(R[i + 6]) * RLWE_Q + 4) >> 3;
		R[i + 7] = (static_cast<uint>(R[i + 7]) * RLWE_Q + 4) >> 3;
	}
}

void RLWEQ12289N1024::PolyFromBytes(std::array<ushort, RLWE_N> &R, const std::vector<byte> &A)
{
	size_t i;

	for (i = 0; i < RLWE_N / 4; ++i)
	{
		R[(4 * i)] = A[(7 * i)] | ((static_cast<ushort>(A[(7 * i) + 1]) & 0x3F) << 8);
		R[(4 * i) + 1] = (A[(7 * i) + 1] >> 6) | (static_cast<ushort>(A[(7 * i) + 2]) << 2) | ((static_cast<ushort>(A[(7 * i) + 3]) & 0x0F) << 10);
		R[(4 * i) + 2] = (A[(7 * i) + 3] >> 4) | (static_cast<ushort>(A[(7 * i) + 4]) << 4) | ((static_cast<ushort>(A[(7 * i) + 5]) & 0x03) << 12);
		R[(4 * i) + 3] = (A[(7 * i) + 5] >> 2) | (static_cast<ushort>(A[(7 * i) + 6]) << 6);
	}
}

void RLWEQ12289N1024::PolyFromMessage(std::array<ushort, RLWE_N> &R, const std::vector<byte> &Message)
{
	size_t i;
	size_t j;
	uint mask;

	for (i = 0; i < 32; ++i)
	{
		for (j = 0; j < 8; ++j)
		{
			mask = -((Message[i] >> j) & 1);
			R[(8 * i) + j] = mask & (RLWE_Q / 2);
			R[(8 * i) + j + 256] = mask & (RLWE_Q / 2);
			R[(8 * i) + j + 512] = mask & (RLWE_Q / 2);
			R[(8 * i) + j + 768] = mask & (RLWE_Q / 2);
		}
	}
}

void RLWEQ12289N1024::PolyInvNtt(std::array<ushort, RLWE_N> &R)
{
	BitRevVector(R);
	Ntt(R, OmegasInvMontgomery);
	MulCoefficients(R, PsisInvMontgomery);
}

void RLWEQ12289N1024::PolyMulPointwise(std::array<ushort, RLWE_N> &R, const std::array<ushort, RLWE_N> &A, const std::array<ushort, RLWE_N> &B)
{
	size_t i;
	ushort t;

	for (i = 0; i < RLWE_N; ++i)
	{
		// t is now in Montgomery domain
		t = MontgomeryReduce(0x00000C72UL * B[i]);
		// r->coeffs[i] is back in normal domain
		R[i] = MontgomeryReduce(A[i] * t);
	}
}

void RLWEQ12289N1024::PolyNtt(std::array<ushort, RLWE_N> &R)
{
	MulCoefficients(R, PsisBitrevMontgomery);
	Ntt(R, OmegasMontgomery);
}

void RLWEQ12289N1024::PolySample(std::array<ushort, RLWE_N> &R, const std::vector<byte> &Seed, byte Nonce)
{
	std::vector<byte> buf(128);
	std::vector<byte> tmpk(RLWE_SEED_SIZE + 2);
	size_t i;
	size_t j;
	byte a;
	byte b;

	MemoryTools::Copy(Seed, 0, tmpk, 0, RLWE_SEED_SIZE);
	tmpk[RLWE_SEED_SIZE] = Nonce;

	// Generate noise in blocks of 64 coefficients
	for (i = 0; i < RLWE_N / 64; ++i)
	{
		tmpk[RLWE_SEED_SIZE + 1] = static_cast<byte>(i);
		XOF(tmpk, 0, tmpk.size(), buf, 0, buf.size(), Keccak::KECCAK256_RATE_SIZE);

		for (j = 0; j < 64; j++)
		{
			a = buf[(2 * j)];
			b = buf[(2 * j) + 1];
			R[(64 * i) + j] = HammimgWeight(a) + (RLWE_Q - HammimgWeight(b));
		}
	}
}

void RLWEQ12289N1024::PolySub(std::array<ushort, RLWE_N> &R, const std::array<ushort, RLWE_N> &A, const std::array<ushort, RLWE_N> &B)
{
	size_t i;

	for (i = 0; i < RLWE_N; ++i)
	{
		R[i] = (A[i] + 3 * RLWE_Q - B[i]) % RLWE_Q;
	}
}

void RLWEQ12289N1024::PolyToBytes(std::vector<byte> &R, const std::array<ushort, RLWE_N> &P)
{
	size_t i;
	ushort t0;
	ushort t1;
	ushort t2;
	ushort t3;

	for (i = 0; i < RLWE_N / 4; ++i)
	{
		t0 = Freeze(P[(4 * i)]);
		t1 = Freeze(P[(4 * i) + 1]);
		t2 = Freeze(P[(4 * i) + 2]);
		t3 = Freeze(P[(4 * i) + 3]);

		R[(7 * i)] = t0 & 0xFF;
		R[(7 * i) + 1] = (t0 >> 8) | (t1 << 6);
		R[(7 * i) + 2] = (t1 >> 2);
		R[(7 * i) + 3] = (t1 >> 10) | (t2 << 4);
		R[(7 * i) + 4] = (t2 >> 4);
		R[(7 * i) + 5] = (t2 >> 12) | (t3 << 2);
		R[(7 * i) + 6] = (t3 >> 6);
	}
}

void RLWEQ12289N1024::PolyToMessage(std::vector<byte> &Message, const std::array<ushort, RLWE_N> &X)
{
	size_t i;
	ushort t;

	MemoryTools::Clear(Message, 0, RLWE_SEED_SIZE);

	for (i = 0; i < 256; ++i)
	{
		t = FlipAbs(X[i]);
		t += FlipAbs(X[i + 256]);
		t += FlipAbs(X[i + 512]);
		t += FlipAbs(X[i + 768]);
		t = ((t - RLWE_Q));
		t >>= 15;
		Message[i >> 3] |= t << (i & 7);
	}
}

void RLWEQ12289N1024::PolyUniform(std::array<ushort, RLWE_N> &A, const std::vector<byte> &Seed)
{
	std::vector<byte> buf(Keccak::KECCAK128_RATE_SIZE);
	std::vector<byte> tmpk(RLWE_SEED_SIZE + 1);
	size_t ctr;
	size_t i;
	size_t j;
	ushort val;

	ctr = 0;
	MemoryTools::Copy(Seed, 0, tmpk, 0, RLWE_SEED_SIZE);

	// generate a in blocks of 64 coefficients
	for (i = 0; i < RLWE_N / 64; ++i)
	{
		ctr = 0;
		// domain-separate the 16 independent calls
		tmpk[RLWE_SEED_SIZE] = static_cast<byte>(i);

		while (ctr < 64)
		{
			//gen.Generate(buf);
			XOF(tmpk, 0, tmpk.size(), buf, 0, buf.size(), Keccak::KECCAK128_RATE_SIZE);

			for (j = 0; j < Keccak::KECCAK128_RATE_SIZE && ctr < 64; j += 2)
			{
				val = (buf[j] | (static_cast<ushort>(buf[j + 1]) << 8));
				if (val < 5 * RLWE_Q)
				{
					A[(i * 64) + ctr] = val;
					ctr++;
				}
			}
		}
	}
}

void RLWEQ12289N1024::XOF(const std::vector<byte> &Input, size_t InOffset, size_t InLength, std::vector<byte> &Output, size_t OutOffset, size_t OutLength, size_t Rate)
{
	Keccak::XOFR24P1600(Input, InOffset, InLength, Output, OutOffset, OutLength, Rate);
}

NAMESPACE_RINGLWEEND
